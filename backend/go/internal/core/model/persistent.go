// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package model defines the core data structures for the application.
// This file, `persistent.go`, contains the struct definitions for data that is
// intended to be stored long-term in the BigQuery database. The struct tags
// (`json:"..."` and `bigquery:"..."`) are used by the respective libraries to
// map struct fields to JSON keys during serialization/deserialization and to
// BigQuery table columns during insertion/retrieval.
package model

import (
	"time"

	"github.com/google/uuid"
)

// Actor is used to represent the public details of an actor or actress.
// This struct is currently defined but not fully utilized in the main workflows.
// It serves as a placeholder for potential future enhancements where detailed
// actor information might be fetched and stored.
type Actor struct {
	Id           string    `json:"id" bigquery:"id"`                   // Unique identifier for the actor.
	CreateDate   time.Time `json:"create_date" bigquery:"create_date"` // Timestamp when the actor record was created.
	Name         string    `json:"name" bigquery:"name"`               // The full name of the actor.
	DateOfBirth  time.Time `json:"dob" bigquery:"dob"`                 // Actor's date of birth.
	DateOfDeath  time.Time `json:"dod" bigquery:"dod"`                 // Actor's date of death, if applicable.
	PlaceOfBirth string    `json:"pob" bigquery:"pob"`                 // Actor's place of birth.
	Biography    string    `json:"bio" bigquery:"bio"`                 // A short biography of the actor.
	Aliases      []string  `json:"aliases" bigquery:"aliases"`         // Any known aliases for the actor.
	Awards       []string  `json:"awards" bigquery:"awards"`           // A list of awards the actor has won.
	Nominations  []string  `json:"nominations" bigquery:"nominations"` // A list of nominations the actor has received.
	ImageURL     string    `json:"ima_url" bigquery:"img_url"`         // A URL to an image of the actor.
}

// Media captures the highest level of metadata about a media file after it has
// been processed by the generative AI. This is the main object that gets
// inserted into the 'media' table in BigQuery.
type Media struct {
	Id              string        `json:"id" bigquery:"id"`                               // A deterministic UUIDv5 generated from the file name.
	CreateDate      time.Time     `json:"create_date" bigquery:"create_date"`             // Timestamp of when this record was created.
	Title           string        `json:"title" bigquery:"title"`                         // The title of the media, extracted by the AI.
	Category        string        `json:"category" bigquery:"category"`                   // The category of the media (e.g., "trailer", "movie").
	Summary         string        `json:"summary" bigquery:"summary"`                     // A detailed summary of the media content, generated by the AI.
	LengthInSeconds int           `json:"length_in_seconds" bigquery:"length_in_seconds"` // The total length of the media file in seconds.
	MediaUrl        string        `json:"media_url" bigquery:"media_url"`                 // The GCS URL of the media file.
	Director        string        `json:"director,omitempty" bigquery:"director"`         // The director of the media, if available.
	ReleaseYear     int           `json:"release_year,omitempty" bigquery:"release_year"` // The release year of the media, if available.
	Genre           string        `json:"genre,omitempty" bigquery:"genre"`               // The genre of the media, if available.
	Rating          string        `json:"rating,omitempty" bigquery:"rating"`             // The content rating (e.g., "PG-13"), if available.
	Cast            []*CastMember `json:"cast,omitempty" bigquery:"cast"`                 // A list of cast members in the media. This is a nested repeated record in BigQuery.
	Scenes          []*Scene      `json:"scenes,omitempty" bigquery:"scenes"`             // A list of scenes extracted from the media. This is a nested repeated record in BigQuery.
}

// NewMedia is a constructor function that creates and initializes a new Media object.
// It generates a deterministic UUIDv5 based on the provided file name, ensuring
// that the same file will always produce the same ID.
//
// Inputs:
//   - fileName: The name of the media file, used as a seed for the UUID.
//
// Outputs:
//   - *Media: A pointer to the newly created Media object.
func NewMedia(fileName string) *Media {
	// Generate a UUIDv5 using the standard URL namespace and the file name as the
	// unique identifier. This makes the ID generation repeatable.
	generatedID := uuid.NewSHA1(uuid.NameSpaceURL, []byte(fileName))
	return &Media{
		Id:         generatedID.String(),   // Set the generated ID.
		CreateDate: time.Now(),             // Set the creation timestamp to the current time.
		Cast:       make([]*CastMember, 0), // Initialize an empty slice for cast members.
		Scenes:     make([]*Scene, 0),      // Initialize an empty slice for scenes.
	}
}

// Scene represents a single, time-indexed segment within a media file.
// It contains the script and other details for that specific time span.
// Scenes are stored as a nested repeated record within the main Media object in BigQuery.
type Scene struct {
	SequenceNumber   int    `json:"sequence" bigquery:"sequence"`                     // The sequential order of the scene in the media.
	TokensToGenerate int    `json:"tokens_to_generate" bigquery:"tokens_to_generate"` // Placeholder for tracking token usage (not currently used).
	TokensGenerated  int    `json:"tokens_generated" bigquery:"tokens_generated"`     // Placeholder for tracking token usage (not currently used).
	Start            string `json:"start" bigquery:"start"`                           // The start time of the scene in HH:MM:SS format.
	End              string `json:"end" bigquery:"end"`                               // The end time of the scene in HH:MM:SS format.
	Script           string `json:"script" bigquery:"script"`                         // The detailed script/description of the scene, generated by the AI.
}

// CastMember is a mapping object that links a character's name to the actor
// who plays them. This is stored as a nested repeated record in BigQuery.
type CastMember struct {
	CharacterName string `json:"character_name" bigquery:"character_name"` // The name of the character.
	ActorName     string `json:"actor_name" bigquery:"actor_name"`         // The name of the actor.
}

// CastDialog represents a line of dialogue spoken by a specific character in a scene.
// This struct is currently defined but not used in the main workflows.
type CastDialog struct {
	CharacterName string `json:"character_name" bigquery:"character_name"` // The name of the character speaking.
	Dialog        string `json:"dialog" bigquery:"dialog"`                 // The dialogue text.
}

// SceneEmbedding stores the vector embedding for a single scene's script.
// These embeddings are used for performing semantic (vector) searches.
// This data is stored in the 'scene_embeddings' table in BigQuery.
type SceneEmbedding struct {
	Id             string    `json:"id" bigquery:"media_id"`                     // The ID of the parent Media object, acting as a foreign key.
	SequenceNumber int       `json:"sequence_number" bigquery:"sequence_number"` // The sequence number of the scene this embedding corresponds to.
	ModelName      string    `json:"model_name" bigquery:"model_name"`           // The name of the AI model used to generate the embedding.
	Embeddings     []float64 `json:"embeddings" bigquery:"embeddings"`           // The vector embedding as an array of floating-point numbers.
}

// NewSceneEmbedding is a constructor function for the SceneEmbedding struct.
// It initializes a new SceneEmbedding object with the provided details.
//
// Inputs:
//   - mediaId: The ID of the parent media object.
//   - sequenceNumber: The sequence number of the corresponding scene.
//   - modelName: The name of the embedding model used.
//
// Outputs:
//   - *SceneEmbedding: A pointer to the newly created SceneEmbedding object.
func NewSceneEmbedding(
	mediaId string,
	sequenceNumber int,
	modelName string) *SceneEmbedding {

	return &SceneEmbedding{
		Id:             mediaId,
		SequenceNumber: sequenceNumber,
		ModelName:      modelName,
		Embeddings:     make([]float64, 0), // Initialize an empty slice for the embeddings.
	}
}
