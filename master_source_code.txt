================================================================
File: .aspect/rules/external_repository_action_cache/npm_translate_lock_LTQzNzE5MDgwNg==
================================================================
# @generated
# Input hashes for repository rule npm_translate_lock(name = "npm", pnpm_lock = "@@//web/apps/media-search:pnpm-lock.yaml").
# This file should be checked into version control along with the pnpm-lock.yaml file.
web/apps/media-search/.npmrc=494917092
web/apps/media-search/package.json=-936465213
web/apps/media-search/pnpm-lock.yaml=-1697983013


================================================================
File: .gitignore
================================================================
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore the entire ffmpeg directory as we will no longer be using that
ffmpeg/

# Ignore log files
*.log


================================================================
File: .vscode/launch.json
================================================================
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        
        {
            "name": "Launch file",
            "type": "go",
            "request": "launch",
            "mode": "debug",
            "program": "${file}"
        },
        {
            "name": "Launch Package",
            "type": "go",
            "request": "launch",
            "mode": "auto",
            "program": "${workspaceFolder}/cmd/server",
            "cwd": "${workspaceFolder}"
        }
    ]
}

================================================================
File: LICENSE
================================================================

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

================================================================
File: NOTICE
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

This project is built on top of other Open Source Software, please see the
manifest of each project / module for license details.

================================================================
File: README.md
================================================================
<!--
 Copyright 2024 Google, LLC
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
     https://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
# Media Metadata Extraction & Search

[cite_start]This project provides a complete solution for processing video files, extracting intelligence using Google's Generative AI, persisting the metadata to BigQuery, and enabling powerful semantic search through a web interface. [cite: 564]

## Architecture

The project is composed of three main parts:

1.  **Go Backend API (`/cmd/server`)**: A Go server built with Gin that exposes a REST API for file uploads and media search. It listens to Cloud Storage events via Pub/Sub to trigger media processing workflows.
2.  **React Frontend (`/web/ui`)**: A React and Material-UI single-page application for interacting with the backend, searching for media, and viewing results.
3.  **GCP Infrastructure (`/deployments/terraform`)**: Terraform scripts to provision all necessary GCP resources, including GCS buckets, Pub/Sub topics, and BigQuery datasets.

[cite_start]The core processing logic uses a **Chain of Responsibility (COR)** pattern [cite: 565][cite_start], where each step (resizing, summary generation, scene extraction) is an atomic, testable unit of work. [cite: 566]

## Prerequisites

Before you begin, ensure you have the following installed:

* [cite_start]**Go**: Version 1.23 or later [cite: 1]
* [cite_start]**Node.js**: Version 20.x or later [cite: 529]
* [cite_start]**PNPM**: `npm install -g pnpm@8` [cite: 532]
* **FFmpeg**: Must be installed and available in your system's PATH.
* **Google Cloud SDK**: Authenticated to your GCP account.
* **Terraform**: For deploying infrastructure.

## Getting Started

### 1. Configure Your Environment

Copy the example Terraform variables file:

```shell
cp deployments/terraform/terraform.tfvars.example deployments/terraform/terraform.tfvars

Edit 

deployments/terraform/terraform.tfvars and set your project_id and unique names for high_res_bucket and low_res_bucket. 

2. Deploy GCP Infrastructure
Shell

cd deployments/terraform
terraform init
terraform apply
3. Configure the Go Backend
The backend reads its configuration from TOML files. Create a local configuration for development:

Shell

cp configs/.env.toml configs/.env.local.toml
Edit 

configs/.env.local.toml and fill in the values for your GCP project, API key, and the bucket names you defined in the previous step. 


4. Running the Application Locally
You will need two separate terminal windows.

Terminal 1: Start the Go Backend API

Shell

# From the project root
go run ./cmd/server
The API server will start on http://localhost:8080.

Terminal 2: Start the React Frontend

Shell

# From the project root
cd web/ui
pnpm install
pnpm dev
The UI will be available at http://localhost:5173 (or another port specified by Vite).

Testing
To run the entire Go test suite:

Shell

# From the project root
go test ./...



You can also run the whole application in one go by using the following shell script
Run the application with: ./start.sh


================================================================
File: cmd/server/listeners.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"context"

	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
	"github.com/jaycherian/gcp-go-media-search/internal/core/workflow"
)

func SetupListeners(config *cloud.Config, cloudClients *cloud.ServiceClients, ctx context.Context) {
	// TODO - Externalize the destination topic and ffmpeg command
	mediaResizeWorkflow := workflow.NewMediaResizeWorkflow(config, cloudClients, "/snap/bin/ffmpeg", &model.MediaFormatFilter{Width: "240"})
	cloudClients.PubSubListeners["HiResTopic"].SetCommand(mediaResizeWorkflow)
	cloudClients.PubSubListeners["HiResTopic"].Listen(ctx)

	mediaIngestion := workflow.NewMediaReaderPipeline(config, cloudClients, "creative-flash")

	cloudClients.PubSubListeners["LowResTopic"].SetCommand(mediaIngestion)
	cloudClients.PubSubListeners["LowResTopic"].Listen(ctx)
}


================================================================
File: cmd/server/main.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"context"
	"log"
	"log/slog"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"strconv"
	"syscall"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin"

	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
	"github.com/jaycherian/gcp-go-media-search/internal/telemetry"
)

// // state manages the application's dependencies.
// var state = &StateManager{}

// // StateManager holds the shared components for the application.
// type StateManager struct {
// 	config        *cloud.Config
// 	cloud         *cloud.ServiceClients
// 	searchService *services.SearchService
// 	mediaService  *services.MediaService
// }

func main() {
	telemetry.SetupLogging()
	slog.Info("Logging initialized")

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	config := GetConfig()

	_, err := telemetry.SetupOpenTelemetry(ctx, config)
	if err != nil {
		slog.Error("Failed to setup OpenTelemetry", "error", err)
		log.Fatal(err)
	}
	slog.Info("Tracing initialized")

	InitState(ctx)
	slog.Info("Initialized State")

	r := gin.Default()

	// Add OpenTelemetry middleware
	r.Use(otelgin.Middleware("media-search-server"))

	// **Use a default, more robust CORS configuration for development**
	// This allows all origins, methods, and headers, which is safe for local dev
	// and fixes potential communication issues between the frontend and backend.
	r.Use(cors.Default())

	// Create the "/api/v1" group
	apiV1 := r.Group("/api/v1")
	{
		// Register media and upload routes
		MediaRouter(apiV1)
		FileUpload(apiV1)
	}

	srv := &http.Server{
		Addr:    ":8080",
		Handler: r, // Use r as the handler, not r.Handler()
	}

	// Start the server in a goroutine
	go func() {
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			slog.Error("filed to listen: ", "error", err)
		}
	}()
	slog.Info("Server Ready on port 8080")

	// Wait for an interrupt signal to gracefully shut down the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	slog.Info("Shutdown Server ...")

	// The context is used to inform the server it has 5 seconds to finish
	// the request it is currently handling
	shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer shutdownCancel()

	if err := srv.Shutdown(shutdownCtx); err != nil {
		slog.Error("Server Shutdown Failed:", "error", err)
	}

	log.Println("Server exiting")
}

// MediaRouter sets up the routes for media searching and retrieval.
func MediaRouter(r *gin.RouterGroup) {
	media := r.Group("/media")
	{
		media.GET("", func(c *gin.Context) {
			query := c.Query("s")
			count, err := strconv.Atoi(c.DefaultQuery("count", "5"))
			if err != nil {
				count = 5
			}
			if len(query) == 0 {
				c.Status(http.StatusBadRequest)
				return
			}
			sceneResults, err := state.searchService.FindScenes(c, query, count)
			if err != nil {
				log.Printf("Error finding scenes: %v\n", err)
				c.Status(http.StatusInternalServerError)
				return
			}

			out := make(map[string]*model.Media)
			for _, r := range sceneResults {
				var med *model.Media
				if m, ok := out[r.MediaId]; !ok {
					m, err := state.mediaService.Get(c, r.MediaId)
					if err != nil {
						log.Printf("Error getting media %s: %v\n", r.MediaId, err)
						c.Status(http.StatusInternalServerError)
						return
					}
					m.Scenes = make([]*model.Scene, 0)
					out[r.MediaId] = m
					med = m
				} else {
					med = m
				}

				s, err := state.mediaService.GetScene(c, r.MediaId, r.SequenceNumber)
				if err != nil {
					log.Printf("Error getting scene %d for media %s: %v\n", r.SequenceNumber, r.MediaId, err)
					c.Status(http.StatusInternalServerError)
					return
				}
				med.Scenes = append(med.Scenes, s)
			}
			results := make([]*model.Media, 0, len(out))
			for _, v := range out {
				results = append(results, v)
			}
			c.JSON(http.StatusOK, results)
		})

		media.GET("/:id", func(c *gin.Context) {
			id := c.Param("id")
			out, err := state.mediaService.Get(c, id)
			if err != nil {
				c.Status(http.StatusNotFound)
				return
			}
			c.JSON(http.StatusOK, out)
		})

		// New endpoint to generate a signed URL for streaming
		media.GET("/:id/stream", func(c *gin.Context) {
			id := c.Param("id")
			print("After assigning ID\n")
			media, err := state.mediaService.Get(c, id)
			print("after media\n")
			if err != nil {
				print("inside first error\n")
				c.JSON(http.StatusNotFound, gin.H{"error": "Media not found"})
				return
			}

			// Generate a signed URL that is valid for 15 minutes.
			signedURL, err := state.mediaService.GenerateSignedURL(c, media.MediaUrl, 15*time.Minute)
			print("After getting signed URL\n")
			if err != nil {
				print("inside second error\n")
				print("The error is \n")
				print(err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "Could not generate streaming URL"})
				return
			}
			print("Before returning ok\n)")
			c.JSON(http.StatusOK, gin.H{"url": signedURL})
			print("the signed url is ", signedURL)
		})

		media.GET("/:id/scenes/:scene_id", func(c *gin.Context) {
			id := c.Param("id")
			sceneID, err := strconv.Atoi(c.Param("scene_id"))
			if err != nil {
				c.Status(http.StatusBadRequest)
				return
			}
			out, err := state.mediaService.GetScene(c, id, sceneID)
			if err != nil {
				c.Status(http.StatusNotFound)
				return
			}
			c.JSON(http.StatusOK, out)
		})
	}
}

// FileUpload sets up the route for handling file uploads.
func FileUpload(r *gin.RouterGroup) {
	upload := r.Group("/uploads")
	{
		upload.POST("", func(c *gin.Context) {
			form, err := c.MultipartForm()
			if err != nil {
				c.String(http.StatusBadRequest, "get form err: %s", err.Error())
				return
			}
			files := form.File["files"]
			bucket := state.cloud.StorageClient.Bucket(state.config.Storage.HiResInputBucket)

			for _, file := range files {
				localPath := filepath.Join(os.TempDir(), file.Filename)
				if err := c.SaveUploadedFile(file, localPath); err != nil {
					c.String(http.StatusBadRequest, "upload file err: %s", err.Error())
					return
				}

				content, err := os.ReadFile(localPath)
				if err != nil {
					log.Println(err)
					c.Status(http.StatusInternalServerError)
					return
				}
				wc := bucket.Object(file.Filename).NewWriter(c)
				wc.ContentType = "video/mp4"
				if _, err = wc.Write(content); err != nil {
					c.String(http.StatusInternalServerError, "write file to bucket err: %s", err.Error())
					return
				}
				if err := wc.Close(); err != nil {
					log.Printf("failed to close bucket handle: %v\n", err)
				}
				if err := os.Remove(localPath); err != nil {
					log.Printf("failed to remove file from server: %v\n", err)
				}
			}
			c.String(http.StatusOK, "Uploaded successfully %d files.", len(files))
		})
	}
}

// // SetupListeners configures and starts the Pub/Sub listeners.
// func SetupListeners(config *cloud.Config, cloudClients *cloud.ServiceClients, ctx context.Context) {
// 	mediaResizeWorkflow := workflow.NewMediaResizeWorkflow(config, cloudClients, "ffmpeg", &model.MediaFormatFilter{Width: "240"})
// 	cloudClients.PubSubListeners["HiResTopic"].SetCommand(mediaResizeWorkflow)
// 	cloudClients.PubSubListeners["HiResTopic"].Listen(ctx)

// 	mediaIngestion := workflow.NewMediaReaderPipeline(config, cloudClients, "creative-flash")
// 	cloudClients.PubSubListeners["LowResTopic"].SetCommand(mediaIngestion)
// 	cloudClients.PubSubListeners["LowResTopic"].Listen(ctx)
// }

// // GetConfig loads the application configuration.
// func GetConfig() *cloud.Config {
// 	if state.config == nil {
// 		if err := os.Setenv(cloud.EnvConfigFilePrefix, "configs"); err != nil {
// 			log.Fatalf("failed to setup env: %v\n", err)
// 		}
// 		if err := os.Setenv(cloud.EnvConfigRuntime, "local"); err != nil {
// 			log.Fatalf("failed to setup env: %v\n", err)
// 		}
// 		config := cloud.NewConfig()
// 		cloud.LoadConfig(&config)
// 		state.config = config
// 	}
// 	return state.config
// }

// // InitState initializes the application state and dependencies.
// func InitState(ctx context.Context, config *cloud.Config) {
// 	cloudClients, err := cloud.NewCloudServiceClients(ctx, config)
// 	if err != nil {
// 		panic(err)
// 	}
// 	state.cloud = cloudClients

// 	datasetName := config.BigQueryDataSource.DatasetName
// 	mediaTableName := config.BigQueryDataSource.MediaTable
// 	embeddingTableName := config.BigQueryDataSource.EmbeddingTable

// 	state.searchService = &services.SearchService{
// 		BigqueryClient: cloudClients.BiqQueryClient,
// 		EmbeddingModel: cloudClients.EmbeddingModels["multi-lingual"],
// 		DatasetName:    datasetName,
// 		MediaTable:     mediaTableName,
// 		EmbeddingTable: embeddingTableName,
// 	}

// 	state.mediaService = &services.MediaService{
// 		BigqueryClient: cloudClients.BiqQueryClient,
// 		DatasetName:    datasetName,
// 		MediaTable:     mediaTableName,
// 	}

// 	embeddingGenerator := workflow.NewMediaEmbeddingGeneratorWorkflow(config, cloudClients)
// 	embeddingGenerator.StartTimer()

// 	SetupListeners(config, cloudClients, ctx)
// }


================================================================
File: cmd/server/setup.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"context"
	"log"
	"os"

	credentials "cloud.google.com/go/iam/credentials/apiv1"
	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"github.com/jaycherian/gcp-go-media-search/internal/core/services"
	"github.com/jaycherian/gcp-go-media-search/internal/core/workflow"
)

type StateManager struct {
	config        *cloud.Config
	cloud         *cloud.ServiceClients
	searchService *services.SearchService
	mediaService  *services.MediaService
}

var state = &StateManager{}

func SetupOS() (err error) {
	err = os.Setenv(cloud.EnvConfigFilePrefix, "configs")
	if err != nil {
		return err
	}
	err = os.Setenv(cloud.EnvConfigRuntime, "local")
	return err
}

func GetConfig() *cloud.Config {
	if state.config == nil {
		err := SetupOS()
		if err != nil {
			log.Fatalf("failed to setup os for testing: %v\n", err)
		}
		// Create a default cloud config
		config := cloud.NewConfig()
		// Load it from the TOML files
		cloud.LoadConfig(&config)
		state.config = config
	}
	return state.config
}

func InitState(ctx context.Context) {
	// Get the config file
	config := GetConfig()

	cloudClients, err := cloud.NewCloudServiceClients(ctx, config)
	if err != nil {
		panic(err)
	}

	iamClient, err := credentials.NewIamCredentialsClient(ctx)
	if err != nil {
		panic(err)
	}
	cloudClients.IAMClient = iamClient

	state.cloud = cloudClients

	datasetName := config.BigQueryDataSource.DatasetName
	mediaTableName := config.BigQueryDataSource.MediaTable
	embeddingTableName := config.BigQueryDataSource.EmbeddingTable

	state.searchService = &services.SearchService{
		BigqueryClient: cloudClients.BiqQueryClient,
		EmbeddingModel: cloudClients.EmbeddingModels["multi-lingual"],
		DatasetName:    datasetName,
		MediaTable:     mediaTableName,
		EmbeddingTable: embeddingTableName,
	}

	state.mediaService = &services.MediaService{
		BigqueryClient: cloudClients.BiqQueryClient,
		StorageClient:  cloudClients.StorageClient, // Pass the storage client here
		IAMClient:      cloudClients.IAMClient,
		SignerEmail:    config.Application.SignerServiceAccountEmail,
		DatasetName:    datasetName,
		MediaTable:     mediaTableName,
	}

	embeddingGenerator := workflow.NewMediaEmbeddingGeneratorWorkflow(config, cloudClients)
	embeddingGenerator.StartTimer()

	SetupListeners(config, cloudClients, ctx)

}


================================================================
File: configs/.env.local.toml
================================================================
# Override these attribute values in this environment specific configuration.

[application]
google_project_id = "media-second-search"
# Jun 24, 2025: Modified by Jay Cherian to use Service Account keys instead of AI Studio API Keys
google_api_key = "AIzaSyD1cLaLggUpG19G0ouHcRAlXaCJnsNlk6g"
signer_service_account_email = "media-search@media-second-search.iam.gserviceaccount.com"

[storage]
high_res_input_bucket = "mezz2-bucket"
low_res_output_bucket = "enc2-bucket"


================================================================
File: configs/.env.test.toml
================================================================
# Override these attribute values in this environment specific configuration.

[application]
google_project_id = "media-second-search"
# Jun 24, 2025: Modified by Jay Cherian to use Service Account keys instead of AI Studio API Keys
google_api_key = "AIzaSyD1cLaLggUpG19G0ouHcRAlXaCJnsNlk6g"
signer_service_account_email = "media-search@media-second-search.iam.gserviceaccount.com"

[storage]
high_res_input_bucket = "mezz2-bucket"
low_res_output_bucket = "enc2-bucket"


================================================================
File: configs/.env.toml
================================================================
[application]
name = "media-search"
google_project_id = ""
location = "us-central1"
google_api_key = ""
thread_pool_size = 10

[big_query_data_source]
dataset = "media_ds"
media_table = "media"
embedding_table = "scene_embeddings"

[topic_subscriptions."HiResTopic"]
name = "media_high_res_resources_subscription"
dead_letter_topic = "media_high_res_events_dead_letter"
timeout_in_seconds = 10

[topic_subscriptions."LowResTopic"]
name = "media_low_res_resources_subscription"
dead_letter_topic = "media_low_res_events_dead_letter"
timeout_in_seconds = 10

[storage]
hires_input_bucket = ""
lowres_output_bucket = ""

[embedding_models.multi-lingual]
model = "text-embedding-004"
MaxRequestsPerMinute = 100

[embedding_models.en-us]
model = "text-embedding-004"
MaxRequestsPerMinute = 100

[agent_models.creative-flash]
model = "gemini-1.5-flash-002"
temperature = 0.8
top_p = 0.5
top_k = 30
max_tokens = 8192
system_instructions = """
Your role is a film, and media trailer official capable of describing
in detail directors, producers, cinematographers, screenwriters, and actors.
In addition, you're able to summarize plot points, identify scene time stamps
and recognize which actor is playing which character, and which character is in each scene.
"""
output_format = "application/json"
rate_limit = 200

[agent_models."creative-pro"]
model = "gemini-1.5-flash-002"
temperature = 0.8
top_p = 0.5
top_k = 30
max_tokens = 8192
output_format = "application/json"
enable_google = true
rate_limit = 100

[agent_models."critical-flash"]
model = "gemini-1.5-flash"
temperature = 0.2
top_p = 0.5
top_k = 30
max_tokens = 8192
output_format = "application/json"
rate_limit = 200

[agent_models."critical-pro"]
model = "gemini-1.5-flash"
temperature = 0.2
top_p = 0.5
top_k = 30
max_tokens = 8192
output_format = "application/json"
enable_google = true
rate_limit = 200


[categories.trailer]
name = "Trailer"
definition = "A short advertisement or clip of a single movie"
system_instructions = ""
summary = ""
scenee = ""

[categories."trailer_comp"]
name = "Tailer Composition"
definition = "A collection of multiple trailers for different movies"
system_instructions = ""

[categories.movie]
name = "Movie"
definition = "A feature length film"
system_instructions = ""

[categories.news]
name = "News"
definition = "A news clip and/or news broadcast"
system_instructions = ""

[categories.sports]
name = "Sports"
definition = "A feature length sporting event that may or may not include commercials"
system_instructions = ""

# Below this line are prompt template definitions
[prompt_templates]
summary = """Review the attached media file and extract the following information
- Title as title
- Lower case category name as category from one of the following categories and definitions:
    - {{ .CATEGORIES }}
- Summary - a detailed summary of the media contents, plot, and cinematic themes in markdown format
- Length in Seconds as length_in_seconds,
- Media URL as media_url
- Director as director
- Release Year as release_year, a four digit year
- Genre as genre
- Rating as rating with one of the following values: G, PG, PG-13, R, NC-17
- Cast as cast, an array of Cast Members including Character Name as character_name, and associated actor name as actor_name
- Extract the scenes and order by start and end times in the format of HH:MM:SS or hours:minutes:seconds as two digits numbers left padded by zeros.
    - All scenes should have a minimum length of 10 seconds.
- Add a sequence number to each scene starting from 1 and incrementing in order of the timestamp

Example Output Format:
{{ .EXAMPLE_JSON }}
"""

scene = """Given the following media file, summary, actors, and characters, extract the following details between time frames {{ .TIME_START }} - {{ .TIME_END }} in json format.
- sequence_number: {{ .SEQUENCE }} as a number
- start: {{ .TIME_START }} as a string
- end: {{ .TIME_END }} as a string
- script: write a detailed scene description that includes colors, action sequences, dialog with both character and actor citations, any products or brand names, and lastly any significant promps in as plain text

Media Summary:
{{ .SUMMARY_DOCUMENT }}

Example Output:
{{ .EXAMPLE_JSON }}"""


================================================================
File: configs/example_.env.local.toml
================================================================
# Override these attribute values in this environment specific configuration.

[application]
google_project_id = ""
google_api_key = ""
signer_service_account_email = ""

[storage]
high_res_input_bucket = ""
low_res_output_bucket = ""


================================================================
File: configs/example_.env.test.toml
================================================================
# Override these attribute values in this environment specific configuration.

[application]
google_project_id = ""
google_api_key = ""
signer_service_account_email = ""

[storage]
high_res_input_bucket = ""
low_res_output_bucket = ""


================================================================
File: deployments/terraform/main.tf
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

terraform {
  required_version = ">= 0.12"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 6.5.0"
    }
  }
}

provider "google" {
  project = var.project_id
  region = var.region
}

module "low_res_resources" {
  source = "./modules/low_res"
  region = var.region
  low_res_bucket = var.low_res_bucket
}

module "high_res_resources" {
  source = "./modules/high_res"
  region = var.region
  high_res_bucket = var.high_res_bucket
}

module "bigquery" {
  source = "./modules/bigquery"
  region = var.region
}




================================================================
File: deployments/terraform/modules/bigquery/main.tf
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

terraform {
  required_version = ">= 0.12"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 6.5.0"
    }
  }
}

# TODO for production we may want to add customer managed encryption

# trunk-ignore(checkov/CKV_GCP_81)
resource "google_bigquery_dataset" "media_ds" {
  dataset_id                  = "media_ds"
  description                 = "Media data source for media file object"
  location                    = "US"
  delete_contents_on_destroy = false
  max_time_travel_hours = 96
  labels = {
    env = "test"
  }
}

# trunk-ignore(checkov/CKV_GCP_80)
resource "google_bigquery_table" "media_ds_scene_embeddings" {
  dataset_id = google_bigquery_dataset.media_ds.dataset_id
  table_id   = "scene_embeddings"
  deletion_protection = true
  schema = <<EOF
[
    {
        "name": "media_id",
        "type": "STRING",
        "mode": "REQUIRED"
    },
    {
        "name": "model_name",
        "type": "STRING",
        "mode": "REQUIRED"
    },
    {
        "name": "sequence_number",
        "type": "INTEGER",
        "mode": "REQUIRED"
    },
    {
        "name": "embeddings",
        "type": "FLOAT64",
        "mode": "REPEATED"
    }
]
EOF
}

# trunk-ignore(checkov/CKV_GCP_80)
resource "google_bigquery_table" "media_ds_media" {
  dataset_id = google_bigquery_dataset.media_ds.dataset_id
  table_id   = "media"
  deletion_protection = true
  schema = <<EOF
[
    {
        "name": "id",
        "type": "STRING",
        "mode": "REQUIRED"
    },
    {
        "name": "create_date",
        "type": "TIMESTAMP",
        "mode": "REQUIRED"
    },
    {
        "name": "title",
        "type": "STRING",
        "mode": "REQUIRED"
    },
    {
        "name": "category",
        "type": "STRING",
        "mode": "REQUIRED"
    },
    {
        "name": "summary",
        "type": "STRING",
        "mode": "REQUIRED"
    },
    {
        "name": "media_url",
        "type": "STRING",
        "mode": "REQUIRED"
    },
    {
        "name": "length_in_seconds",
        "type": "INTEGER",
        "mode": "NULLABLE"
    },
    {
        "name": "director",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "release_year",
        "type": "INTEGER",
        "mode": "NULLABLE"
    },
    {
        "name": "genre",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "rating",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "cast",
        "type": "RECORD",
        "mode": "REPEATED",
        "fields": [
            {
                "name": "character_name",
                "type": "STRING",
                "mode": "NULLABLE"
            },
            {
                "name": "actor_name",
                "type": "STRING",
                "mode": "NULLABLE"
            }
        ]
    },
    {
        "name": "scenes",
        "type": "RECORD",
        "mode": "REPEATED",
        "fields": [
            {
                "name": "sequence",
                "type": "INTEGER",
                "mode": "REQUIRED"
            },
            {
                "name": "tokens_to_generate",
                "type": "INTEGER",
                "mode": "NULLABLE"
            },
            {
                "name": "tokens_generated",
                "type": "INTEGER",
                "mode": "NULLABLE"
            },
            {
                "name": "start",
                "type": "STRING",
                "mode": "NULLABLE"
            },
            {
                "name": "end",
                "type": "STRING",
                "mode": "NULLABLE"
            },
            {
                "name": "script",
                "type": "STRING",
                "mode": "NULLABLE"
            }
        ]
    }
]
EOF
}

================================================================
File: deployments/terraform/modules/bigquery/variables.tf
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

variable "region" {
    type = string
    description = "Project Default Region"
}

================================================================
File: deployments/terraform/modules/high_res/main.tf
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
terraform {
  required_version = ">= 0.12"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 6.5.0"
    }
  }
}

data "google_storage_project_service_account" "gcs_account" {
}

# trunk-ignore(checkov/CKV_GCP_83)
resource "google_pubsub_topic" "media_high_res_events" {
  name = "media_high_res_events"
  message_storage_policy {
    allowed_persistence_regions = [var.region]
  }
}

# trunk-ignore(checkov/CKV_GCP_83)
resource "google_pubsub_topic" "media_high_res_events_dead_letter" {
  name = "media_high_res_events_dead_letter"
  message_storage_policy {
    allowed_persistence_regions = [var.region]
  }
}


resource "google_storage_bucket" "media_high_res_resources" {
  name          = var.high_res_bucket
  location      = var.region
  uniform_bucket_level_access = true
  force_destroy = true
  public_access_prevention = "enforced"
  versioning {
    enabled = true
  }
  logging {
    log_bucket = "media_logs"
    log_object_prefix = "media-logs"
  }
}


resource "google_pubsub_subscription" "media_high_res_resources_subscription" {
  name  = "media_high_res_resources_subscription"
  topic = google_pubsub_topic.media_high_res_events.id

  # Enable exactly-once delivery by enabling message ordering
  enable_message_ordering = true

  # Configure retry policy for failed message delivery attempts
  retry_policy {
    minimum_backoff = "10s"
    maximum_backoff = "600s"
  }

  # Configure dead-letter policy to handle messages that cannot be delivered
 dead_letter_policy {
    dead_letter_topic     = google_pubsub_topic.media_high_res_events_dead_letter.id
    max_delivery_attempts = 10
  }
}


resource "google_storage_notification" "media_high_res_resource_notifications" {
  bucket         = google_storage_bucket.media_high_res_resources.name
  payload_format = "JSON_API_V1"
  topic          = google_pubsub_topic.media_high_res_events.id
  event_types    = ["OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE"]
  custom_attributes = {
    new-attribute = "new-attribute-value"
  }
  depends_on = [google_pubsub_topic_iam_binding.binding_high_res]
}

resource "google_pubsub_topic_iam_binding" "binding_high_res" {
  topic   = google_pubsub_topic.media_high_res_events.id
  role    = "roles/pubsub.publisher"
  members = ["serviceAccount:${data.google_storage_project_service_account.gcs_account.email_address}"]
}

================================================================
File: deployments/terraform/modules/high_res/variables.tf
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

variable "region" {
    type = string
    description = "Project Default Region"
}

variable "high_res_bucket" {
    type = string
    description = "The name of the high resultion media bucket"
}


================================================================
File: deployments/terraform/modules/low_res/main.tf
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

terraform {
  required_version = ">= 0.12"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 6.5.0"
    }
  }
}

data "google_storage_project_service_account" "gcs_account" {
}

# trunk-ignore(checkov/CKV_GCP_83)
resource "google_pubsub_topic" "media_low_res_events" {
  name = "media_low_res_events"
  message_storage_policy {
    allowed_persistence_regions = [var.region]
  }
}

# trunk-ignore(checkov/CKV_GCP_83)
resource "google_pubsub_topic" "media_low_res_events_dead_letter" {
  name = "media_low_res_events_dead_letter"
  message_storage_policy {
    allowed_persistence_regions = [var.region]
  }
}

resource "google_storage_bucket" "media_low_res_resources" {
  name          = var.low_res_bucket
  location      = var.region
  uniform_bucket_level_access = true
  force_destroy = true
  public_access_prevention = "enforced"
  versioning {
    enabled = true
  }
  logging {
    log_bucket = "media_logs"
    log_object_prefix = "media-logs"
  }
}

resource "google_pubsub_subscription" "media_low_res_resources_subscription" {
  name  = "media_low_res_resources_subscription"
  topic = google_pubsub_topic.media_low_res_events.id

  # Enable exactly-once delivery by enabling message ordering
  enable_message_ordering = true

  # Configure retry policy for failed message delivery attempts
  retry_policy {
    minimum_backoff = "10s"
    maximum_backoff = "600s"
  }

  # Configure dead-letter policy to handle messages that cannot be delivered
 dead_letter_policy {
    dead_letter_topic     = google_pubsub_topic.media_low_res_events_dead_letter.id
    max_delivery_attempts = 10
  }
}

resource "google_storage_notification" "media_low_res_resource_notifications" {
  bucket         = google_storage_bucket.media_low_res_resources.name
  payload_format = "JSON_API_V1"
  topic          = google_pubsub_topic.media_low_res_events.id
  event_types    = ["OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE"]
  custom_attributes = {
    new-attribute = "new-attribute-value"
  }
  depends_on = [google_pubsub_topic_iam_binding.binding_low_res]
}

resource "google_pubsub_topic_iam_binding" "binding_low_res" {
  topic   = google_pubsub_topic.media_low_res_events.id
  role    = "roles/pubsub.publisher"
  members = ["serviceAccount:${data.google_storage_project_service_account.gcs_account.email_address}"]
}

================================================================
File: deployments/terraform/modules/low_res/variables.tf
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

variable "region" {
    type = string
    description = "Project Default Region"
}
variable "low_res_bucket" {
    type = string
    description = "The name of the low resolution media bucket"
}


================================================================
File: deployments/terraform/modules/pipeline/main.tf
================================================================
terraform {
  required_version = ">= 0.12"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 6.5.0"
    }
  }
}

resource "google_compute_instance_template" "tpl" {
  name_prefix  = "media-pipeline-nodejs-instance-template-"
  machine_type = "e2-medium"
  zone         = var.region

  disk {
    source_image = "ubuntu-os-cloud/ubuntu-2204-lts"
    disk_size_gb = 500
  }

  network_interface {
    network = "default"
  }

  shielded_instance_config {
    enable_secure_boot          = true
    enable_vtpm                 = true
    enable_integrity_monitoring = true
  }

  metadata = {
    block-project-ssh-keys = true
  }

  metadata_startup_script = <<EOF
#!/bin/bash

# Update package lists
sudo apt-get update

# Install FFmpeg
sudo apt-get install -y ffmpeg

# Install Node.js
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt-get install -y nodejs

# Copy your Node.js program (replace with your actual implementation)
# Example:
# sudo gsutil cp gs://your-bucket/your-program.js /home/your-user/

# Start your Node.js program (replace with your actual implementation)
# Example:
# node /home/your-user/your-program.js
EOF
}

resource "google_compute_region_instance_group_manager" "mig" {
  name = "media-pipeline-nodejs-mig"
  version {
    instance_template = google_compute_instance_template.tpl.id
    name              = "primary"
  }
  base_instance_name  = "media-pipeline-nodejs-instance"
  zone                = var.region
  target_size         = 1
}

resource "google_compute_region_autoscaler" "autoscaler" {
  name    = "mdeia-pipeline-nodejs-autoscaler"
  target  = google_compute_region_instance_group_manager.mig.id
  zone = var.region

  autoscaling_policy {
    cpu_utilization {
      predictive_method = "NONE"
      target            = 0.6
    }
    min_replicas = 1
    max_replicas = 10
    mode         = "ON"
  }
}

================================================================
File: deployments/terraform/modules/pipeline/variables.tf
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

variable "project_id" {
  type = string
  description = "Project ID"
}

variable "region" {
    type = string
    description = "Project Default Region"
}

================================================================
File: deployments/terraform/terraform.tfvars.example
================================================================
#Defining the bucket names for high resolution media. Please define a unique name as this bucket will be created in your project
high_res_bucket = ""

#Defining the bucket name for low resolution media. Please define a unique name as this bucket will be created in your project.
low_res_bucket = ""

#Specify the project to create infrastructure.
project_id     = ""

================================================================
File: deployments/terraform/variables.tf
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

variable "project_id" {
  type = string
  default = ""
}

variable "region" {
    type = string
    default = "us-central1"
}

variable "media_low_res_schema_name" {
    type = string
    default = "media_low_res_schema"
}

variable "low_res_bucket" {
    type = string
}

variable "high_res_bucket" {
    type = string
}


================================================================
File: docs/CodeOfConduct.md
================================================================
---
title: "Code of Conduct"
weight: 4
date: 2022-08-25T23:11:46-04:00
---

<!--
 Copyright 2022 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

At Google, we recognize and celebrate the creativity and collaboration of open source contributors and the diversity of skills, experiences, cultures, and opinions they bring to the projects and communities they participate in.

Every one of Google's open source projects and communities are inclusive environments, based on treating all individuals respectfully, regardless of gender identity and expression, sexual orientation, disabilities, neurodiversity, physical appearance, body size, ethnicity, nationality, race, age, religion, or similar personal characteristic.

We value diverse opinions, but we value respectful behavior more.

Respectful behavior includes:

Being considerate, kind, constructive, and helpful.
Not engaging in demeaning, discriminatory, harassing, hateful, sexualized, or physically threatening behavior, speech, and imagery.
Not engaging in unwanted physical contact.
Some Google open source projects may adopt an explicit project code of conduct, which may have additional detailed expectations for participants. Most of those projects will use our modified Contributor Covenant.

Resolve peacefully
We do not believe that all conflict is necessarily bad; healthy debate and disagreement often yields positive results. However, it is never okay to be disrespectful.

If you see someone behaving disrespectfully, you are encouraged to address the behavior directly with those involved. Many issues can be resolved quickly and easily, and this gives people more control over the outcome of their dispute. If you are unable to resolve the matter for any reason, or if the behavior is threatening or harassing, report it. We are dedicated to providing an environment where participants feel welcome and safe.

Reporting problems
Some Google open source projects may adopt a project-specific code of conduct. In those cases, a Google employee will be identified as the Project Steward, who will receive and handle reports of code of conduct violations. In the event that a project hasn’t identified a Project Steward, you can report problems by emailing opensource@google.com.

We will investigate every complaint, but you may not receive a direct response. We will use our discretion in determining when and how to follow up on reported incidents, which may range from not taking action to permanent expulsion from the project and project-sponsored spaces. We will notify the accused of the report and provide them an opportunity to discuss it before any action is taken. The identity of the reporter will be omitted from the details of the report supplied to the accused. In potentially harmful situations, such as ongoing harassment or threats to anyone's safety, we may take action without notice.

This document was adapted from the IndieWeb Code of Conduct.

================================================================
File: docs/CodeStyleGuide.md
================================================================
---
title: "Code Style Guide"
weight: 4
date: 2022-08-25T23:12:09-04:00
---

<!---
 Copyright 2022 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
--->

- [HTML / CSS](https://google.github.io/styleguide/htmlcssguide.html)
- [Java Script](https://google.github.io/styleguide/jsguide.html)
- [Java Code Style Guide](https://google.github.io/styleguide/javaguide.html)
- [Go Lang](https://github.com/golang/go/wiki/CodeReviewComments)

================================================================
File: docs/Contributors.md
================================================================
---
title: "Contributors"
weight: 2
icon: "pen-solid"
---

<!---
 Copyright 2022 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
--->

## Thank you

No Open Source Software (OSS) stands alone. The following contributors have made material
contributions to this project and their work is sincerely appreciated.

<!-- Please keep list in alphabetic order, Name or nickname as a link to your profile, Start Date (MM/dd/YYYY) -->

| Name              | Role         | Start Date | Bio                                                        |
|-------------------|--------------|------------|------------------------------------------------------------|
| Jay Cherian       | Project Lead | 10/15/2024 | [Linked In](https://www.linkedin.com/in/jay-cherian/)      |
| Christopher Grant | Contributor  | 10/15/2024 | [Linked In](https://www.linkedin.com/in/christophergrant/) |
| Ryan McGuinness   | Contributor  | 10/15/2024 | [Linked In](https://www.linkedin.com/in/rmcguinness/)      |



================================================================
File: docs/README.md
================================================================
# Documents

* [Contributors](Contributors.md)
* [Code of Conduct](CodeOfConduct.md)
* [Code Style Guide](CodeStyleGuide.md)
* Tooling
  * [Setting Up IntelliJ Idea](SettingUpIntelliJ.md)

================================================================
File: docs/SettingUpIntelliJ.md
================================================================
# Setting Up IntelliJ Ultimate as your IDE

<!---
 Copyright 2022 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
--->

IntelliJ and Bazel work very well together, especially when using
multiple languages. That being said, there are some steps to follow
to make it operate well.

## Go Lang tool setup

Since this if for IntelliJ Ultimate, you should install a couple of the 
go tools first and ensure they are on your path. View the [Workstation Setup](WorkstationSetup.md)
file at the root for more information.

## Plugins

Install the following plugins:

* Go
* Bazel
* Terraform
* Google Cloud Code

> If you set up your environment correct, you're ready to go (pun intended)
> Otherwise, you'll need to configure your buildifier path on the Bazel tab.

## Why IntelliJ Idea

IntelliJ offers a higher quality of tooling over VS Code when it comes to executing and debugging
Go and Bazel and Node JS.

## Importing a bazel project

Once you've restarted you're IDE, you'll see the ability to import a bazel project.
Click on that button and navigate to the project directory.

You'll be presented with a configuration screen, below is a working configuration
you should copy and paste.

```yaml
directories:
  # Add the directories you want added as source here
  # By default, we've added your entire workspace ('.')
  -bazel-bin
  -bazel-out
  -bazel-testlogs
  -bazel-vide-warehouse-go
  -.bazelrc
  -video-warehouse.code-workspace
  -.trunk
  .

# Automatically includes all relevant targets under the 'directories' above
derive_targets_from_directories: true

targets:
  # If source code isn't resolving, add additional targets that compile it here

additional_languages:
  go
  javascript
  typescript
```

## Finalize
Now you're ready to go. If you want a clean file tree, click on the vertical "..."
on the project explorer, and choose "appearance > (uncheck) Exclude files.". This
will exclude the normally hidden files.

You may build and synchronize using the "Bazel" menu on the system tray.


================================================================
File: docs/SettingUpVisualStudioCode.md
================================================================
# Setting Up Visual Studio Code


================================================================
File: docs/WorkstationSetup.md
================================================================
# Workstation Setup

This will help you set up your developer environment outside the IDE.

## Node JS

Node JS is used as a general purpose program manager and JavaScript / Typescript transpiler.

```shell
# Add Node JS to your development environment

# Install the version manager
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash

# Reload your profile
source ~/.zshrc 

# Install Node
nvm install 22
````

## PNPM

This project uses PNPM a more efficient package manager. Be sure to install the stable 8.x version.
Version 9 introduced breaking changes not compatible yet with other tooling.

```shell
npm install -g pnpm@8.15.8
```

## Bazel

Bazel is a unique build tool in that it supports most modern languages and propagates the
mono-repo style of development. In addition, it's ideal for Go as it builds a hermetic
environment to run your CI/CD pipelines in.

```shell

# The CLI for building
npm install -g @bazel/bazelisk
# An efficient runtime wrapper for bazel targets
npm install -g @bazel/ibazel
```

## Go

```shell
# Install Buildifier, Buildozer, and Unused Deps
go install github.com/bazelbuild/buildtools/buildifier@latest
go install github.com/bazelbuild/buildtools/buildozer@latest
go install github.com/bazelbuild/buildtools/unused_deps@latest

# Install dlv, the golang debugger
go install github.com/go-delve/delve/cmd/dlv@latest

# Lastly, add go tooling to your system path
# vim ~/.zshrc or ~/.bashrc or ~/.bash_profile
# export PATH=$PATH:$HOME/go/bin
```

## Terraform




================================================================
File: go.mod
================================================================
module github.com/jaycherian/gcp-go-media-search

go 1.23.1

require (
	cloud.google.com/go/bigquery v1.67.0
	cloud.google.com/go/iam v1.5.2
	cloud.google.com/go/pubsub v1.49.0
	cloud.google.com/go/storage v1.53.0
	github.com/BurntSushi/toml v1.4.0
	github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric v0.51.0
	github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/trace v1.24.3
	github.com/gin-contrib/cors v1.7.2
	github.com/gin-gonic/gin v1.10.0
	github.com/google/generative-ai-go v0.18.0
	github.com/google/uuid v1.6.0
	github.com/h2non/filetype v1.1.3
	github.com/stretchr/testify v1.10.0
	github.com/zeebo/assert v1.3.0
	go.opentelemetry.io/contrib/bridges/otelslog v0.6.0
	go.opentelemetry.io/contrib/detectors/gcp v1.35.0
	go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin v0.56.0
	go.opentelemetry.io/contrib/propagators/autoprop v0.56.0
	go.opentelemetry.io/otel v1.35.0
	go.opentelemetry.io/otel/metric v1.35.0
	go.opentelemetry.io/otel/sdk v1.35.0
	go.opentelemetry.io/otel/sdk/metric v1.35.0
	go.opentelemetry.io/otel/trace v1.35.0
	golang.org/x/time v0.11.0
	google.golang.org/api v0.235.0
)

require (
	cel.dev/expr v0.20.0 // indirect
	cloud.google.com/go v0.121.2 // indirect
	cloud.google.com/go/ai v0.8.0 // indirect
	cloud.google.com/go/auth v0.16.1 // indirect
	cloud.google.com/go/auth/oauth2adapt v0.2.8 // indirect
	cloud.google.com/go/compute/metadata v0.7.0 // indirect
	cloud.google.com/go/longrunning v0.6.7 // indirect
	cloud.google.com/go/monitoring v1.24.2 // indirect
	cloud.google.com/go/trace v1.11.6 // indirect
	github.com/GoogleCloudPlatform/opentelemetry-operations-go/detectors/gcp v1.27.0 // indirect
	github.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/resourcemapping v0.51.0 // indirect
	github.com/apache/arrow/go/v15 v15.0.2 // indirect
	github.com/bytedance/sonic v1.12.3 // indirect
	github.com/bytedance/sonic/loader v0.2.0 // indirect
	github.com/cespare/xxhash/v2 v2.3.0 // indirect
	github.com/cloudwego/base64x v0.1.4 // indirect
	github.com/cloudwego/iasm v0.2.0 // indirect
	github.com/cncf/xds/go v0.0.0-20250121191232-2f005788dc42 // indirect
	github.com/davecgh/go-spew v1.1.1 // indirect
	github.com/envoyproxy/go-control-plane/envoy v1.32.4 // indirect
	github.com/envoyproxy/protoc-gen-validate v1.2.1 // indirect
	github.com/felixge/httpsnoop v1.0.4 // indirect
	github.com/gabriel-vasile/mimetype v1.4.6 // indirect
	github.com/gin-contrib/sse v0.1.0 // indirect
	github.com/go-jose/go-jose/v4 v4.0.4 // indirect
	github.com/go-logr/logr v1.4.2 // indirect
	github.com/go-logr/stdr v1.2.2 // indirect
	github.com/go-playground/locales v0.14.1 // indirect
	github.com/go-playground/universal-translator v0.18.1 // indirect
	github.com/go-playground/validator/v10 v10.22.1 // indirect
	github.com/goccy/go-json v0.10.3 // indirect
	github.com/google/flatbuffers v23.5.26+incompatible // indirect
	github.com/google/s2a-go v0.1.9 // indirect
	github.com/googleapis/enterprise-certificate-proxy v0.3.6 // indirect
	github.com/googleapis/gax-go/v2 v2.14.2 // indirect
	github.com/json-iterator/go v1.1.12 // indirect
	github.com/klauspost/compress v1.17.11 // indirect
	github.com/klauspost/cpuid/v2 v2.2.8 // indirect
	github.com/leodido/go-urn v1.4.0 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
	github.com/modern-go/reflect2 v1.0.2 // indirect
	github.com/pelletier/go-toml/v2 v2.2.3 // indirect
	github.com/pierrec/lz4/v4 v4.1.18 // indirect
	github.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10 // indirect
	github.com/pmezard/go-difflib v1.0.0 // indirect
	github.com/spiffe/go-spiffe/v2 v2.5.0 // indirect
	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
	github.com/ugorji/go/codec v1.2.12 // indirect
	github.com/zeebo/errs v1.4.0 // indirect
	github.com/zeebo/xxh3 v1.0.2 // indirect
	go.opencensus.io v0.24.0 // indirect
	go.opentelemetry.io/auto/sdk v1.1.0 // indirect
	go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.60.0 // indirect
	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.60.0 // indirect
	go.opentelemetry.io/contrib/propagators/aws v1.31.0 // indirect
	go.opentelemetry.io/contrib/propagators/b3 v1.31.0 // indirect
	go.opentelemetry.io/contrib/propagators/jaeger v1.31.0 // indirect
	go.opentelemetry.io/contrib/propagators/ot v1.31.0 // indirect
	go.opentelemetry.io/otel/log v0.7.0 // indirect
	go.uber.org/multierr v1.11.0 // indirect
	golang.org/x/arch v0.11.0 // indirect
	golang.org/x/crypto v0.38.0 // indirect
	golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect
	golang.org/x/mod v0.23.0 // indirect
	golang.org/x/net v0.40.0 // indirect
	golang.org/x/oauth2 v0.30.0 // indirect
	golang.org/x/sync v0.14.0 // indirect
	golang.org/x/sys v0.33.0 // indirect
	golang.org/x/text v0.25.0 // indirect
	golang.org/x/tools v0.30.0 // indirect
	golang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da // indirect
	google.golang.org/genproto v0.0.0-20250505200425-f936aa4a68b2 // indirect
	google.golang.org/genproto/googleapis/api v0.0.0-20250528174236-200df99c418a // indirect
	google.golang.org/genproto/googleapis/rpc v0.0.0-20250528174236-200df99c418a // indirect
	google.golang.org/grpc v1.72.2 // indirect
	google.golang.org/protobuf v1.36.6 // indirect
	gopkg.in/yaml.v3 v3.0.1 // indirect
)


================================================================
File: go.sum
================================================================
cel.dev/expr v0.20.0 h1:OunBvVCfvpWlt4dN7zg3FM6TDkzOePe1+foGJ9AXeeI=
cel.dev/expr v0.20.0/go.mod h1:MrpN08Q+lEBs+bGYdLxxHkZoUSsCp0nSKTs0nTymJgw=
cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
cloud.google.com/go v0.121.2 h1:v2qQpN6Dx9x2NmwrqlesOt3Ys4ol5/lFZ6Mg1B7OJCg=
cloud.google.com/go v0.121.2/go.mod h1:nRFlrHq39MNVWu+zESP2PosMWA0ryJw8KUBZ2iZpxbw=
cloud.google.com/go/ai v0.8.0 h1:rXUEz8Wp2OlrM8r1bfmpF2+VKqc1VJpafE3HgzRnD/w=
cloud.google.com/go/ai v0.8.0/go.mod h1:t3Dfk4cM61sytiggo2UyGsDVW3RF1qGZaUKDrZFyqkE=
cloud.google.com/go/auth v0.16.1 h1:XrXauHMd30LhQYVRHLGvJiYeczweKQXZxsTbV9TiguU=
cloud.google.com/go/auth v0.16.1/go.mod h1:1howDHJ5IETh/LwYs3ZxvlkXF48aSqqJUM+5o02dNOI=
cloud.google.com/go/auth/oauth2adapt v0.2.8 h1:keo8NaayQZ6wimpNSmW5OPc283g65QNIiLpZnkHRbnc=
cloud.google.com/go/auth/oauth2adapt v0.2.8/go.mod h1:XQ9y31RkqZCcwJWNSx2Xvric3RrU88hAYYbjDWYDL+c=
cloud.google.com/go/bigquery v1.67.0 h1:GXleMyn/cu5+DPLy9Rz5f5IULWTLrepwbQnP/5qrVbY=
cloud.google.com/go/bigquery v1.67.0/go.mod h1:HQeP1AHFuAz0Y55heDSb0cjZIhnEkuwFRBGo6EEKHug=
cloud.google.com/go/compute/metadata v0.7.0 h1:PBWF+iiAerVNe8UCHxdOt6eHLVc3ydFeOCw78U8ytSU=
cloud.google.com/go/compute/metadata v0.7.0/go.mod h1:j5MvL9PprKL39t166CoB1uVHfQMs4tFQZZcKwksXUjo=
cloud.google.com/go/datacatalog v1.26.0 h1:eFgygb3DTufTWWUB8ARk+dSuXz+aefNJXTlkWlQcWwE=
cloud.google.com/go/datacatalog v1.26.0/go.mod h1:bLN2HLBAwB3kLTFT5ZKLHVPj/weNz6bR0c7nYp0LE14=
cloud.google.com/go/iam v1.5.2 h1:qgFRAGEmd8z6dJ/qyEchAuL9jpswyODjA2lS+w234g8=
cloud.google.com/go/iam v1.5.2/go.mod h1:SE1vg0N81zQqLzQEwxL2WI6yhetBdbNQuTvIKCSkUHE=
cloud.google.com/go/kms v1.21.2 h1:c/PRUSMNQ8zXrc1sdAUnsenWWaNXN+PzTXfXOcSFdoE=
cloud.google.com/go/kms v1.21.2/go.mod h1:8wkMtHV/9Z8mLXEXr1GK7xPSBdi6knuLXIhqjuWcI6w=
cloud.google.com/go/logging v1.13.0 h1:7j0HgAp0B94o1YRDqiqm26w4q1rDMH7XNRU34lJXHYc=
cloud.google.com/go/logging v1.13.0/go.mod h1:36CoKh6KA/M0PbhPKMq6/qety2DCAErbhXT62TuXALA=
cloud.google.com/go/longrunning v0.6.7 h1:IGtfDWHhQCgCjwQjV9iiLnUta9LBCo8R9QmAFsS/PrE=
cloud.google.com/go/longrunning v0.6.7/go.mod h1:EAFV3IZAKmM56TyiE6VAP3VoTzhZzySwI/YI1s/nRsY=
cloud.google.com/go/monitoring v1.24.2 h1:5OTsoJ1dXYIiMiuL+sYscLc9BumrL3CarVLL7dd7lHM=
cloud.google.com/go/monitoring v1.24.2/go.mod h1:x7yzPWcgDRnPEv3sI+jJGBkwl5qINf+6qY4eq0I9B4U=
cloud.google.com/go/pubsub v1.49.0 h1:5054IkbslnrMCgA2MAEPcsN3Ky+AyMpEZcii/DoySPo=
cloud.google.com/go/pubsub v1.49.0/go.mod h1:K1FswTWP+C1tI/nfi3HQecoVeFvL4HUOB1tdaNXKhUY=
cloud.google.com/go/storage v1.53.0 h1:gg0ERZwL17pJ+Cz3cD2qS60w1WMDnwcm5YPAIQBHUAw=
cloud.google.com/go/storage v1.53.0/go.mod h1:7/eO2a/srr9ImZW9k5uufcNahT2+fPb8w5it1i5boaA=
cloud.google.com/go/trace v1.11.6 h1:2O2zjPzqPYAHrn3OKl029qlqG6W8ZdYaOWRyr8NgMT4=
cloud.google.com/go/trace v1.11.6/go.mod h1:GA855OeDEBiBMzcckLPE2kDunIpC72N+Pq8WFieFjnI=
github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
github.com/BurntSushi/toml v1.4.0 h1:kuoIxZQy2WRRk1pttg9asf+WVv6tWQuBNVmK8+nqPr0=
github.com/BurntSushi/toml v1.4.0/go.mod h1:ukJfTF/6rtPPRCnwkur4qwRxa8vTRFBF0uk2lLoLwho=
github.com/GoogleCloudPlatform/opentelemetry-operations-go/detectors/gcp v1.27.0 h1:ErKg/3iS1AKcTkf3yixlZ54f9U1rljCkQyEXWUnIUxc=
github.com/GoogleCloudPlatform/opentelemetry-operations-go/detectors/gcp v1.27.0/go.mod h1:yAZHSGnqScoU556rBOVkwLze6WP5N+U11RHuWaGVxwY=
github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric v0.51.0 h1:fYE9p3esPxA/C0rQ0AHhP0drtPXDRhaWiwg1DPqO7IU=
github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric v0.51.0/go.mod h1:BnBReJLvVYx2CS/UHOgVz2BXKXD9wsQPxZug20nZhd0=
github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/trace v1.24.3 h1:0t8v1hFl4bfMxvAyeD+Nay9YeVTffUMf3U5LM/0dTIM=
github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/trace v1.24.3/go.mod h1:r8vUXZXWrNOUb+fF1iy1/KiK1lfR4bl4ebk6kOfPpY0=
github.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/cloudmock v0.51.0 h1:OqVGm6Ei3x5+yZmSJG1Mh2NwHvpVmZ08CB5qJhT9Nuk=
github.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/cloudmock v0.51.0/go.mod h1:SZiPHWGOOk3bl8tkevxkoiwPgsIl6CwrWcbwjfHZpdM=
github.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/resourcemapping v0.51.0 h1:6/0iUd0xrnX7qt+mLNRwg5c0PGv8wpE8K90ryANQwMI=
github.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/resourcemapping v0.51.0/go.mod h1:otE2jQekW/PqXk1Awf5lmfokJx4uwuqcj1ab5SpGeW0=
github.com/apache/arrow/go/v15 v15.0.2 h1:60IliRbiyTWCWjERBCkO1W4Qun9svcYoZrSLcyOsMLE=
github.com/apache/arrow/go/v15 v15.0.2/go.mod h1:DGXsR3ajT524njufqf95822i+KTh+yea1jass9YXgjA=
github.com/bytedance/sonic v1.12.3 h1:W2MGa7RCU1QTeYRTPE3+88mVC0yXmsRQRChiyVocVjU=
github.com/bytedance/sonic v1.12.3/go.mod h1:B8Gt/XvtZ3Fqj+iSKMypzymZxw/FVwgIGKzMzT9r/rk=
github.com/bytedance/sonic/loader v0.1.1/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=
github.com/bytedance/sonic/loader v0.2.0 h1:zNprn+lsIP06C/IqCHs3gPQIvnvpKbbxyXQP1iU4kWM=
github.com/bytedance/sonic/loader v0.2.0/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=
github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
github.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=
github.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
github.com/cloudwego/base64x v0.1.4 h1:jwCgWpFanWmN8xoIUHa2rtzmkd5J2plF/dnLS6Xd/0Y=
github.com/cloudwego/base64x v0.1.4/go.mod h1:0zlkT4Wn5C6NdauXdJRhSKRlJvmclQ1hhJgA0rcu/8w=
github.com/cloudwego/iasm v0.2.0 h1:1KNIy1I1H9hNNFEEH3DVnI4UujN+1zjpuk6gwHLTssg=
github.com/cloudwego/iasm v0.2.0/go.mod h1:8rXZaNYT2n95jn+zTI1sDr+IgcD2GVs0nlbbQPiEFhY=
github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=
github.com/cncf/xds/go v0.0.0-20250121191232-2f005788dc42 h1:Om6kYQYDUk5wWbT0t0q6pvyM49i9XZAv9dDrkDA7gjk=
github.com/cncf/xds/go v0.0.0-20250121191232-2f005788dc42/go.mod h1:W+zGtBO5Y1IgJhy4+A9GOqVhqLpfZi+vwmdNXUehLA8=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
github.com/envoyproxy/go-control-plane v0.13.4 h1:zEqyPVyku6IvWCFwux4x9RxkLOMUL+1vC9xUFv5l2/M=
github.com/envoyproxy/go-control-plane v0.13.4/go.mod h1:kDfuBlDVsSj2MjrLEtRWtHlsWIFcGyB2RMO44Dc5GZA=
github.com/envoyproxy/go-control-plane/envoy v1.32.4 h1:jb83lalDRZSpPWW2Z7Mck/8kXZ5CQAFYVjQcdVIr83A=
github.com/envoyproxy/go-control-plane/envoy v1.32.4/go.mod h1:Gzjc5k8JcJswLjAx1Zm+wSYE20UrLtt7JZMWiWQXQEw=
github.com/envoyproxy/go-control-plane/ratelimit v0.1.0 h1:/G9QYbddjL25KvtKTv3an9lx6VBE2cnb8wp1vEGNYGI=
github.com/envoyproxy/go-control-plane/ratelimit v0.1.0/go.mod h1:Wk+tMFAFbCXaJPzVVHnPgRKdUdwW/KdbRt94AzgRee4=
github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
github.com/envoyproxy/protoc-gen-validate v1.2.1 h1:DEo3O99U8j4hBFwbJfrz9VtgcDfUKS7KJ7spH3d86P8=
github.com/envoyproxy/protoc-gen-validate v1.2.1/go.mod h1:d/C80l/jxXLdfEIhX1W2TmLfsJ31lvEjwamM4DxlWXU=
github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
github.com/gabriel-vasile/mimetype v1.4.6 h1:3+PzJTKLkvgjeTbts6msPJt4DixhT4YtFNf1gtGe3zc=
github.com/gabriel-vasile/mimetype v1.4.6/go.mod h1:JX1qVKqZd40hUPpAfiNTe0Sne7hdfKSbOqqmkq8GCXc=
github.com/gin-contrib/cors v1.7.2 h1:oLDHxdg8W/XDoN/8zamqk/Drgt4oVZDvaV0YmvVICQw=
github.com/gin-contrib/cors v1.7.2/go.mod h1:SUJVARKgQ40dmrzgXEVxj2m7Ig1v1qIboQkPDTQ9t2E=
github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=
github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
github.com/gin-gonic/gin v1.10.0 h1:nTuyha1TYqgedzytsKYqna+DfLos46nTv2ygFy86HFU=
github.com/gin-gonic/gin v1.10.0/go.mod h1:4PMNQiOhvDRa013RKVbsiNwoyezlm2rm0uX/T7kzp5Y=
github.com/go-jose/go-jose/v4 v4.0.4 h1:VsjPI33J0SB9vQM6PLmNjoHqMQNGPiZ0rHL7Ni7Q6/E=
github.com/go-jose/go-jose/v4 v4.0.4/go.mod h1:NKb5HO1EZccyMpiZNbdUw/14tiXNyUJh188dfnMCAfc=
github.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
github.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=
github.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
github.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=
github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=
github.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=
github.com/go-playground/assert/v2 v2.2.0/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=
github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=
github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=
github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=
github.com/go-playground/validator/v10 v10.22.1 h1:40JcKH+bBNGFczGuoBYgX4I6m/i27HYW8P9FDk5PbgA=
github.com/go-playground/validator/v10 v10.22.1/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=
github.com/goccy/go-json v0.10.3 h1:KZ5WoDbxAIgm2HNbYckL0se1fHD6rz5j4ywS6ebzDqA=
github.com/goccy/go-json v0.10.3/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=
github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
github.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=
github.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=
github.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=
github.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=
github.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=
github.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=
github.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
github.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=
github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
github.com/google/flatbuffers v23.5.26+incompatible h1:M9dgRyhJemaM4Sw8+66GHBu8ioaQmyPLg1b8VwK5WJg=
github.com/google/flatbuffers v23.5.26+incompatible/go.mod h1:1AeVuKshWv4vARoZatz6mlQ0JxURH0Kv5+zNeJKJCa8=
github.com/google/generative-ai-go v0.18.0 h1:6ybg9vOCLcI/UpBBYXOTVgvKmcUKFRNj+2Cj3GnebSo=
github.com/google/generative-ai-go v0.18.0/go.mod h1:JYolL13VG7j79kM5BtHz4qwONHkeJQzOCkKXnpqtS/E=
github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
github.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
github.com/google/go-cmp v0.7.0 h1:wk8382ETsv4JYUZwIsn6YpYiWiBsYLSJiTsyBybVuN8=
github.com/google/go-cmp v0.7.0/go.mod h1:pXiqmnSA92OHEEa9HXL2W4E7lf9JzCmGVUdgjX3N/iU=
github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
github.com/google/martian/v3 v3.3.3 h1:DIhPTQrbPkgs2yJYdXU/eNACCG5DVQjySNRNlflZ9Fc=
github.com/google/martian/v3 v3.3.3/go.mod h1:iEPrYcgCF7jA9OtScMFQyAlZZ4YXTKEtJ1E6RWzmBA0=
github.com/google/s2a-go v0.1.9 h1:LGD7gtMgezd8a/Xak7mEWL0PjoTQFvpRudN895yqKW0=
github.com/google/s2a-go v0.1.9/go.mod h1:YA0Ei2ZQL3acow2O62kdp9UlnvMmU7kA6Eutn0dXayM=
github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
github.com/googleapis/enterprise-certificate-proxy v0.3.6 h1:GW/XbdyBFQ8Qe+YAmFU9uHLo7OnF5tL52HFAgMmyrf4=
github.com/googleapis/enterprise-certificate-proxy v0.3.6/go.mod h1:MkHOF77EYAE7qfSuSS9PU6g4Nt4e11cnsDUowfwewLA=
github.com/googleapis/gax-go/v2 v2.14.2 h1:eBLnkZ9635krYIPD+ag1USrOAI0Nr0QYF3+/3GqO0k0=
github.com/googleapis/gax-go/v2 v2.14.2/go.mod h1:ON64QhlJkhVtSqp4v1uaK92VyZ2gmvDQsweuyLV+8+w=
github.com/h2non/filetype v1.1.3 h1:FKkx9QbD7HR/zjK1Ia5XiBsq9zdLi5Kf3zGyFTAFkGg=
github.com/h2non/filetype v1.1.3/go.mod h1:319b3zT68BvV+WRj7cwy856M2ehB3HqNOt6sy1HndBY=
github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
github.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=
github.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=
github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=
github.com/klauspost/cpuid/v2 v2.2.8 h1:+StwCXwm9PdpiEkPyzBXIy+M9KUb4ODm0Zarf1kS5BM=
github.com/klauspost/cpuid/v2 v2.2.8/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=
github.com/knz/go-libedit v1.10.1/go.mod h1:MZTVkCWyz0oBc7JOWP3wNAzd002ZbM/5hgShxwh4x8M=
github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
github.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=
github.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=
github.com/pierrec/lz4/v4 v4.1.18 h1:xaKrnTkyoqfh1YItXl56+6KJNVYWlEEPuAQW9xsplYQ=
github.com/pierrec/lz4/v4 v4.1.18/go.mod h1:gZWDp/Ze/IJXGXf23ltt2EXimqmTUXEy0GFuRQyBid4=
github.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10 h1:GFCKgmp0tecUJ0sJuv4pzYCqS9+RGSn52M3FUwPs+uo=
github.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10/go.mod h1:t/avpk3KcrXxUnYOhZhMXJlSEyie6gQbtLq5NM3loB8=
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
github.com/rogpeppe/go-internal v1.13.1 h1:KvO1DLK/DRN07sQ1LQKScxyZJuNnedQ5/wKSR38lUII=
github.com/rogpeppe/go-internal v1.13.1/go.mod h1:uMEvuHeurkdAXX61udpOXGD/AzZDWNMNyH2VO9fmH0o=
github.com/spiffe/go-spiffe/v2 v2.5.0 h1:N2I01KCUkv1FAjZXJMwh95KK1ZIQLYbPfhaxw8WS0hE=
github.com/spiffe/go-spiffe/v2 v2.5.0/go.mod h1:P+NxobPc6wXhVtINNtFjNWGBTreew1GBUCwT2wPmb7g=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
github.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=
github.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
github.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=
github.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=
github.com/ugorji/go/codec v1.2.12 h1:9LC83zGrHhuUA9l16C9AHXAqEV/2wBQ4nkvumAE65EE=
github.com/ugorji/go/codec v1.2.12/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
github.com/zeebo/assert v1.3.0 h1:g7C04CbJuIDKNPFHmsk4hwZDO5O+kntRxzaUoNXj+IQ=
github.com/zeebo/assert v1.3.0/go.mod h1:Pq9JiuJQpG8JLJdtkwrJESF0Foym2/D9XMU5ciN/wJ0=
github.com/zeebo/errs v1.4.0 h1:XNdoD/RRMKP7HD0UhJnIzUy74ISdGGxURlYG8HSWSfM=
github.com/zeebo/errs v1.4.0/go.mod h1:sgbWHsvVuTPHcqJJGQ1WhI5KbWlHYz+2+2C/LSEtCw4=
github.com/zeebo/xxh3 v1.0.2 h1:xZmwmqxHZA8AI603jOQ0tMqmBr9lPeFwGg6d+xy9DC0=
github.com/zeebo/xxh3 v1.0.2/go.mod h1:5NWz9Sef7zIDm2JHfFlcQvNekmcEl9ekUZQQKCYaDcA=
go.einride.tech/aip v0.68.1 h1:16/AfSxcQISGN5z9C5lM+0mLYXihrHbQ1onvYTr93aQ=
go.einride.tech/aip v0.68.1/go.mod h1:XaFtaj4HuA3Zwk9xoBtTWgNubZ0ZZXv9BZJCkuKuWbg=
go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
go.opentelemetry.io/auto/sdk v1.1.0 h1:cH53jehLUN6UFLY71z+NDOiNJqDdPRaXzTel0sJySYA=
go.opentelemetry.io/auto/sdk v1.1.0/go.mod h1:3wSPjt5PWp2RhlCcmmOial7AvC4DQqZb7a7wCow3W8A=
go.opentelemetry.io/contrib/bridges/otelslog v0.6.0 h1:V/XtFJ8mMisAO2E0tXcgwi40wJUxbiz8I2/RtgaZ8AU=
go.opentelemetry.io/contrib/bridges/otelslog v0.6.0/go.mod h1:g7kkoEznNXb0li+YvlwPWoqxTbpC3BtmZtZutB39G4M=
go.opentelemetry.io/contrib/detectors/gcp v1.35.0 h1:bGvFt68+KTiAKFlacHW6AhA56GF2rS0bdD3aJYEnmzA=
go.opentelemetry.io/contrib/detectors/gcp v1.35.0/go.mod h1:qGWP8/+ILwMRIUf9uIVLloR1uo5ZYAslM4O6OqUi1DA=
go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin v0.56.0 h1:0nTRpaCaILLdooXAQnfktlL6Zw1ECKEW9DZGH2byi2c=
go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin v0.56.0/go.mod h1:A7aFlp4WSLmeOnFRZwf2dMU+40THPc+rsr6KOwZLOcg=
go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.60.0 h1:x7wzEgXfnzJcHDwStJT+mxOz4etr2EcexjqhBvmoakw=
go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.60.0/go.mod h1:rg+RlpR5dKwaS95IyyZqj5Wd4E13lk/msnTS0Xl9lJM=
go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.60.0 h1:sbiXRNDSWJOTobXh5HyQKjq6wUC5tNybqjIqDpAY4CU=
go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.60.0/go.mod h1:69uWxva0WgAA/4bu2Yy70SLDBwZXuQ6PbBpbsa5iZrQ=
go.opentelemetry.io/contrib/propagators/autoprop v0.56.0 h1:FtwGTy9ka2eBVnBotuligqO2V+il+Hp74APIJsWNbd8=
go.opentelemetry.io/contrib/propagators/autoprop v0.56.0/go.mod h1:XzSaHSuUiWveyQwmofA3IEK23+SpzfSEcVZXpqfBh+E=
go.opentelemetry.io/contrib/propagators/aws v1.31.0 h1:OJHDboLd4zH1j0UrxoQbSDPEykmBJ/epVa/v+fRCRi0=
go.opentelemetry.io/contrib/propagators/aws v1.31.0/go.mod h1:mtT7x7gY+jL4fH34l8dkZeo6Jvf+3Fy002rjuEdRnTM=
go.opentelemetry.io/contrib/propagators/b3 v1.31.0 h1:PQPXYscmwbCp76QDvO4hMngF2j8Bx/OTV86laEl8uqo=
go.opentelemetry.io/contrib/propagators/b3 v1.31.0/go.mod h1:jbqfV8wDdqSDrAYxVpXQnpM0XFMq2FtDesblJ7blOwQ=
go.opentelemetry.io/contrib/propagators/jaeger v1.31.0 h1:k9P5RQEWIKUP6N18/ouSvPD/uTjc7s+8WPnuVK6lWOI=
go.opentelemetry.io/contrib/propagators/jaeger v1.31.0/go.mod h1:OpgiBRssaVKOTM5lSKkOBIGQh/ixvfZRmxQXARK/kGQ=
go.opentelemetry.io/contrib/propagators/ot v1.31.0 h1:PtlNuoEn5sa2Mfz1Jb+NhOVgT4SjAw90XmziOloj87E=
go.opentelemetry.io/contrib/propagators/ot v1.31.0/go.mod h1:5W00bdNbK3dCy/Eqxgi1nLq4qYbAekf7b7IGETqZgVE=
go.opentelemetry.io/otel v1.35.0 h1:xKWKPxrxB6OtMCbmMY021CqC45J+3Onta9MqjhnusiQ=
go.opentelemetry.io/otel v1.35.0/go.mod h1:UEqy8Zp11hpkUrL73gSlELM0DupHoiq72dR+Zqel/+Y=
go.opentelemetry.io/otel/exporters/stdout/stdoutmetric v1.35.0 h1:PB3Zrjs1sG1GBX51SXyTSoOTqcDglmsk7nT6tkKPb/k=
go.opentelemetry.io/otel/exporters/stdout/stdoutmetric v1.35.0/go.mod h1:U2R3XyVPzn0WX7wOIypPuptulsMcPDPs/oiSVOMVnHY=
go.opentelemetry.io/otel/log v0.7.0 h1:d1abJc0b1QQZADKvfe9JqqrfmPYQCz2tUSO+0XZmuV4=
go.opentelemetry.io/otel/log v0.7.0/go.mod h1:2jf2z7uVfnzDNknKTO9G+ahcOAyWcp1fJmk/wJjULRo=
go.opentelemetry.io/otel/metric v1.35.0 h1:0znxYu2SNyuMSQT4Y9WDWej0VpcsxkuklLa4/siN90M=
go.opentelemetry.io/otel/metric v1.35.0/go.mod h1:nKVFgxBZ2fReX6IlyW28MgZojkoAkJGaE8CpgeAU3oE=
go.opentelemetry.io/otel/sdk v1.35.0 h1:iPctf8iprVySXSKJffSS79eOjl9pvxV9ZqOWT0QejKY=
go.opentelemetry.io/otel/sdk v1.35.0/go.mod h1:+ga1bZliga3DxJ3CQGg3updiaAJoNECOgJREo9KHGQg=
go.opentelemetry.io/otel/sdk/metric v1.35.0 h1:1RriWBmCKgkeHEhM7a2uMjMUfP7MsOF5JpUCaEqEI9o=
go.opentelemetry.io/otel/sdk/metric v1.35.0/go.mod h1:is6XYCUMpcKi+ZsOvfluY5YstFnhW0BidkR+gL+qN+w=
go.opentelemetry.io/otel/trace v1.35.0 h1:dPpEfJu1sDIqruz7BHFG3c7528f6ddfSWfFDVt/xgMs=
go.opentelemetry.io/otel/trace v1.35.0/go.mod h1:WUk7DtFp1Aw2MkvqGdwiXYDZZNvA/1J8o6xRXLrIkyc=
go.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=
go.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=
go.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=
go.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=
golang.org/x/arch v0.11.0 h1:KXV8WWKCXm6tRpLirl2szsO5j/oOODwZf4hATmGVNs4=
golang.org/x/arch v0.11.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=
golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
golang.org/x/crypto v0.38.0 h1:jt+WWG8IZlBnVbomuhg2Mdq0+BBQaHbtqHEFEigjUV8=
golang.org/x/crypto v0.38.0/go.mod h1:MvrbAqul58NNYPKnOra203SB9vpuZW0e+RRZV+Ggqjw=
golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=
golang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=
golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
golang.org/x/mod v0.23.0 h1:Zb7khfcRGKk+kqfxFaP5tZqCnDZMjC5VtUBs87Hr6QM=
golang.org/x/mod v0.23.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=
golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
golang.org/x/net v0.40.0 h1:79Xs7wF06Gbdcg4kdCCIQArK11Z1hr5POQ6+fIYHNuY=
golang.org/x/net v0.40.0/go.mod h1:y0hY0exeL2Pku80/zKK7tpntoX23cqL3Oa6njdgRtds=
golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
golang.org/x/oauth2 v0.30.0 h1:dnDm7JmhM45NNpd8FDDeLhK6FwqbOf4MLCM9zb1BOHI=
golang.org/x/oauth2 v0.30.0/go.mod h1:B++QgG3ZKulg6sRPGD/mqlHQs5rB3Ml9erfeDY7xKlU=
golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.14.0 h1:woo0S4Yywslg6hp4eUFjTVOyKt0RookbpAHG4c1HmhQ=
golang.org/x/sync v0.14.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.33.0 h1:q3i8TbbEz+JRD9ywIRlyRAQbM0qF7hu24q3teo2hbuw=
golang.org/x/sys v0.33.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
golang.org/x/text v0.25.0 h1:qVyWApTSYLk/drJRO5mDlNYskwQznZmkpV2c8q9zls4=
golang.org/x/text v0.25.0/go.mod h1:WEdwpYrmk1qmdHvhkSTNPm3app7v4rsT8F2UD6+VHIA=
golang.org/x/time v0.11.0 h1:/bpjEDfN9tkoN/ryeYHnv5hcMlc8ncjMcM4XBk5NWV0=
golang.org/x/time v0.11.0/go.mod h1:CDIdPxbZBQxdj6cxyCIdrNogrJKMJ7pr37NYpMcMDSg=
golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
golang.org/x/tools v0.30.0 h1:BgcpHewrV5AUp2G9MebG4XPFI1E2W41zU1SaqVA9vJY=
golang.org/x/tools v0.30.0/go.mod h1:c347cR/OJfw5TI+GfX7RUPNMdDRRbjvYTS0jPyvsVtY=
golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
golang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da h1:noIWHXmPHxILtqtCOPIhSt0ABwskkZKjD3bXGnZGpNY=
golang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da/go.mod h1:NDW/Ps6MPRej6fsCIbMTohpP40sJ/P/vI1MoTEGwX90=
gonum.org/v1/gonum v0.12.0 h1:xKuo6hzt+gMav00meVPUlXwSdoEJP46BR+wdxQEFK2o=
gonum.org/v1/gonum v0.12.0/go.mod h1:73TDxJfAAHeA8Mk9mf8NlIppyhQNo5GLTcYeqgo2lvY=
google.golang.org/api v0.235.0 h1:C3MkpQSRxS1Jy6AkzTGKKrpSCOd2WOGrezZ+icKSkKo=
google.golang.org/api v0.235.0/go.mod h1:QpeJkemzkFKe5VCE/PMv7GsUfn9ZF+u+q1Q7w6ckxTg=
google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
google.golang.org/genproto v0.0.0-20250505200425-f936aa4a68b2 h1:1tXaIXCracvtsRxSBsYDiSBN0cuJvM7QYW+MrpIRY78=
google.golang.org/genproto v0.0.0-20250505200425-f936aa4a68b2/go.mod h1:49MsLSx0oWMOZqcpB3uL8ZOkAh1+TndpJ8ONoCBWiZk=
google.golang.org/genproto/googleapis/api v0.0.0-20250528174236-200df99c418a h1:SGktgSolFCo75dnHJF2yMvnns6jCmHFJ0vE4Vn2JKvQ=
google.golang.org/genproto/googleapis/api v0.0.0-20250528174236-200df99c418a/go.mod h1:a77HrdMjoeKbnd2jmgcWdaS++ZLZAEq3orIOAEIKiVw=
google.golang.org/genproto/googleapis/rpc v0.0.0-20250528174236-200df99c418a h1:v2PbRU4K3llS09c7zodFpNePeamkAwG3mPrAery9VeE=
google.golang.org/genproto/googleapis/rpc v0.0.0-20250528174236-200df99c418a/go.mod h1:qQ0YXyHHx3XkvlzUtpXDkS29lDSafHMZBAZDc03LQ3A=
google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
google.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=
google.golang.org/grpc v1.72.2 h1:TdbGzwb82ty4OusHWepvFWGLgIbNo1/SUynEN0ssqv8=
google.golang.org/grpc v1.72.2/go.mod h1:wH5Aktxcg25y1I3w7H69nHfXdOG3UiadoBtjh3izSDM=
google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
google.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=
google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=
google.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
google.golang.org/protobuf v1.36.6 h1:z1NpPI8ku2WgiWnf+t9wTPsn6eP1L7ksHUlkfLvd9xY=
google.golang.org/protobuf v1.36.6/go.mod h1:jduwjTPXsFjZGTmRluh+L6NjiWu7pchiJ2/5YcXBHnY=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
nullprogram.com/x/optparse v1.0.0/go.mod h1:KdyPE+Igbe0jQUrVfMqDMeJQIJZEuyV7pjYmp6pbG50=


================================================================
File: internal/api/dashboard.go
================================================================
package main

import "github.com/gin-gonic/gin"

func Dashboard(r *gin.RouterGroup) {
	stats := r.Group("/stats")
	{
		stats.GET("", func(c *gin.Context) {

		})
	}
}


================================================================
File: internal/api/file_upload.go
================================================================
// // Copyright 2024 Google, LLC
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //     https://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.

// package main

// import (
// 	"log"
// 	"os"
// 	"path/filepath"

// 	"github.com/gin-gonic/gin"
// )

// func FileUpload(r *gin.RouterGroup) {
// 	config := GetConfig()

// 	upload := r.Group("/uploads")
// 	{
// 		upload.POST("", func(c *gin.Context) {
// 			form, err := c.MultipartForm()
// 			if err != nil {
// 				c.Status(400)
// 				return
// 			}
// 			files := form.File["files"]
// 			bucket := state.cloud.StorageClient.Bucket(config.Storage.HiResInputBucket)

// 			for _, file := range files {
// 				localPath := filepath.Join(os.TempDir(), file.Filename)
// 				err := c.SaveUploadedFile(file, localPath)
// 				if err != nil {
// 					log.Println(err)
// 					c.Status(400)
// 					return
// 				}
// 				content, err := os.ReadFile(localPath)
// 				if err != nil {
// 					log.Println(err)
// 					c.Status(400)
// 					return
// 				}
// 				wc := bucket.Object(file.Filename).NewWriter(c)
// 				wc.ContentType = "video/mp4"
// 				_, err = wc.Write(content)
// 				if err != nil {
// 					c.Status(500)
// 					log.Printf("failed to write file to bucket: %v\n", err)
// 					return
// 				}
// 				err = wc.Close()
// 				if err != nil {
// 					log.Printf("failed to close bucket handle: %v\n", err)
// 				}
// 				err = os.Remove(localPath)
// 				if err != nil {
// 					log.Printf("failed to remove file from server: %v\n", err)
// 				}
// 			}
// 			c.Status(200)
// 		})
// 	}
// }

================================================================
File: internal/api/media.go
================================================================
// // Copyright 2024 Google, LLC
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //     https://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.

// package main

// import (
// 	"log"
// 	"strconv"

// 	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
// 	"github.com/gin-gonic/gin"
// )

// func MediaRouter(r *gin.RouterGroup) {
// 	media := r.Group("/media")
// 	{
// 		media.GET("", func(c *gin.Context) {
// 			query := c.Query("s")
// 			count, err := strconv.Atoi(c.DefaultQuery("count", "5"))
// 			if err != nil {
// 				count = 5
// 			}
// 			if len(query) == 0 {
// 				c.Status(404)
// 				return
// 			}
// 			sceneResults, err := state.searchService.FindScenes(c, query, count)

// 			if err != nil {
// 				c.Status(404)
// 				log.Println(err)
// 				return
// 			}

// 			out := make(map[string]*model.Media, 0)

// 			// Convert the results into a map driven by the media id
// 			for _, r := range sceneResults {
// 				var med *model.Media
// 				if m, ok := out[r.MediaId]; !ok {
// 					m, err := state.mediaService.Get(c, r.MediaId)
// 					if err != nil {
// 						log.Print(err)
// 						c.Status(400)
// 						return
// 					}
// 					// Clear the scenes
// 					m.Scenes = make([]*model.Scene, 0)
// 					out[r.MediaId] = m
// 					med = m
// 				} else {
// 					med = m
// 				}

// 				s, err := state.mediaService.GetScene(c, r.MediaId, r.SequenceNumber)
// 				if err != nil {
// 					c.Status(400)
// 					return
// 				}
// 				med.Scenes = append(med.Scenes, s)
// 			}
// 			// Reduce
// 			results := make([]*model.Media, 0)
// 			for _, v := range out {
// 				results = append(results, v)
// 			}
// 			c.JSON(200, results)
// 		})

// 		media.GET("/:id", func(c *gin.Context) {
// 			id := c.Param("id")
// 			out, err := state.mediaService.Get(c, id)
// 			if err != nil {
// 				c.Status(404)
// 				return
// 			}
// 			c.JSON(200, out)
// 		})

// 		media.GET("/:id/scenes/:scene_id", func(c *gin.Context) {
// 			id := c.Param("id")
// 			sceneId, err := strconv.Atoi(c.Param("scene_id"))
// 			if err != nil {
// 				c.Status(400)
// 				return
// 			}
// 			out, err := state.mediaService.GetScene(c, id, sceneId)
// 			if err != nil {
// 				c.Status(404)
// 				return
// 			}
// 			c.JSON(200, out)
// 		})
// 	}
// }


================================================================
File: internal/cloud/config.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cloud

import "github.com/google/generative-ai-go/genai"

// DefaultSafetySettings Default System Settings for GenAI agents
var DefaultSafetySettings = []*genai.SafetySetting{
	{
		Category:  genai.HarmCategoryDangerousContent,
		Threshold: genai.HarmBlockNone,
	},
	{
		Category:  genai.HarmCategoryHarassment,
		Threshold: genai.HarmBlockNone,
	},
	{
		Category:  genai.HarmCategoryHateSpeech,
		Threshold: genai.HarmBlockNone,
	},
	{
		Category:  genai.HarmCategorySexuallyExplicit,
		Threshold: genai.HarmBlockNone,
	},
}

// BigQueryDataSource represents the configuration for a BigQuery data source.
type BigQueryDataSource struct {
	DatasetName    string `toml:"dataset"`         // The name of the BigQuery dataset.
	MediaTable     string `toml:"media_table"`     // The name of the BigQuery table containing media information.
	EmbeddingTable string `toml:"embedding_table"` // The name of the BigQuery table containing embedding vectors.
}

// PromptTemplates holds the templates for different types of prompts.
type PromptTemplates struct {
	SummaryPrompt string `toml:"summary"` // The template for generating summaries.
	ScenePrompt   string `toml:"scene"`   // The template for generating scene descriptions.
}

// VertexAiEmbeddingModel represents the configuration for a Vertex AI embedding model.
type VertexAiEmbeddingModel struct {
	Model                string `toml:"model"`                   // The name of the Vertex AI embedding model.
	MaxRequestsPerMinute int    `toml:"max_requests_per_minute"` // The maximum number of requests allowed per minute.
}

// VertexAiLLMModel represents the configuration for a Vertex AI large language model (LLM).
type VertexAiLLMModel struct {
	Model              string  `toml:"model"`               // The name of the Vertex AI LLM.
	SystemInstructions string  `toml:"system_instructions"` // The system instructions for the LLM.
	Temperature        float32 `toml:"temperature"`         // The temperature parameter for the LLM.
	TopP               float32 `toml:"top_p"`               // The top_p parameter for the LLM.
	TopK               int32   `toml:"top_k"`               // The top_k parameter for the LLM.
	MaxTokens          int32   `toml:"max_tokens"`          // The maximum number of tokens for the LLM output.
	OutputFormat       string  `toml:"output_format"`       // The desired output format for the LLM.
	EnableGoogle       bool    `toml:"enable_google"`       // Whether to enable Google Search for the LLM.
	RateLimit          int     `toml:"rate_limit"`          // The rate limit for the LLM in requests per second.
}

// TopicSubscription represents the configuration for a Pub/Sub topic subscription.
type TopicSubscription struct {
	Name             string `toml:"name"`               // The name of the Pub/Sub subscription.
	DeadLetterTopic  string `toml:"dead_letter_topic"`  // The name of the dead-letter topic for the subscription.
	TimeoutInSeconds int    `toml:"timeout_in_seconds"` // The timeout for the subscription in seconds.
}

// Storage represents the configuration for storage buckets.
type Storage struct {
	HiResInputBucket   string `toml:"high_res_input_bucket"` // The name of the bucket for high-resolution input files.
	LowResOutputBucket string `toml:"low_res_output_bucket"` // The name of the bucket for low-resolution output files.
}

type Category struct {
	Name               string `toml:"name"`
	Definition         string `toml:"definition"`
	SystemInstructions string `toml:"system_instructions"`
	Summary            string `toml:"summary"`
	Scene              string `toml:"scene"`
}

// Config represents the overall configuration for the application.
type Config struct {
	Application struct {
		Name                      string `toml:"name"`                         // The name of the application.
		GoogleProjectId           string `toml:"google_project_id"`            // The Google Cloud project ID.
		GoogleLocation            string `toml:"location"`                     // The Google Cloud location.
		GoogleAPIKey              string `toml:"google_api_key"`               // The Google Cloud API key.
		ThreadPoolSize            int    `toml:"thread_pool_size"`             // The size of the thread pool.
		SignerServiceAccountEmail string `toml:"signer_service_account_email"` // The service account for signing URLs
	} `toml:"application"`
	Storage            Storage                           `toml:"storage"`               // Storage configuration.
	BigQueryDataSource BigQueryDataSource                `toml:"big_query_data_source"` // BigQuery data source configuration.
	PromptTemplates    PromptTemplates                   `toml:"prompt_templates"`      // Prompt templates configuration.
	TopicSubscriptions map[string]TopicSubscription      `toml:"topic_subscriptions"`   // Pub/Sub topic subscriptions configuration.
	EmbeddingModels    map[string]VertexAiEmbeddingModel `toml:"embedding_models"`      // Vertex AI embedding models configuration.
	AgentModels        map[string]VertexAiLLMModel       `toml:"agent_models"`          // Vertex AI LLM models configuration.
	Categories         map[string]Category               `toml:"categories"`            // A list of category definitions and LLM overrides.
}

// NewConfig creates a new Config instance with initialized maps.
func NewConfig() *Config {
	return &Config{
		TopicSubscriptions: make(map[string]TopicSubscription),
		EmbeddingModels:    make(map[string]VertexAiEmbeddingModel),
		AgentModels:        make(map[string]VertexAiLLMModel),
		Categories:         make(map[string]Category),
	}
}


================================================================
File: internal/cloud/gcs.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cloud

// GetGCSObjectName returns a placeholder string for a GCS object name.
func GetGCSObjectName() string {
	return "__GCS__OBJ__"
}

// GCSPubSubNotification is the structure of a message received from a
// Google Cloud Storage (GCS) Pub/Sub notification. It contains metadata
// about a change to an object in a GCS bucket.
type GCSPubSubNotification struct {
	Kind                    string                 `json:"kind"`
	ID                      string                 `json:"id"`
	SelfLink                string                 `json:"selfLink"`
	Name                    string                 `json:"name"`
	Bucket                  string                 `json:"bucket"`
	Generation              string                 `json:"generation"`
	MetaGeneration          string                 `json:"metageneration"`
	ContentType             string                 `json:"contentType"`
	TimeCreated             string                 `json:"timeCreated"`
	Updated                 string                 `json:"updated"`
	StorageClass            string                 `json:"storageClass"`
	TimeStorageClassUpdated string                 `json:"timeStorageClassUpdated"`
	Size                    string                 `json:"size"`
	MD5Hash                 string                 `json:"md5Hash"`
	MediaLink               string                 `json:"mediaLink"`
	MetaData                map[string]interface{} `json:"metadata"`
	Crc32c                  string                 `json:"crc32c"`
	ETag                    string                 `json:"etag"`
}

// GCSObject is a simplified representation of a Google Cloud Storage (GCS)
// object. It contains the bucket name, object name, and MIME type of the object.
type GCSObject struct {
	Bucket   string
	Name     string
	MIMEType string
}


================================================================
File: internal/cloud/pub_sub_listener.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cloud

import (
	"cloud.google.com/go/pubsub"
	"context"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"log"
)

// PubSubListener is a simple stateful wrapper around a subscription object.
// this allows for the easy configuration of multiple listeners. Since listeners
// life-cycles are outside the command life-cycle they are considered cloud components.
type PubSubListener struct {
	client       *pubsub.Client       // The Pub/Sub client.
	subscription *pubsub.Subscription // The Pub/Sub subscription.
	command      cor.Command          // The command to execute when a message is received.
}

// NewPubSubListener the constructor for PubSubListener
func NewPubSubListener(
	pubsubClient *pubsub.Client, // The Pub/Sub client.
	subscriptionID string, // The ID of the Pub/Sub subscription.
	command cor.Command, // The command to execute when a message is received.
) (cmd *PubSubListener, err error) {

	// Get the subscription from the Pub/Sub client.
	sub := pubsubClient.Subscription(subscriptionID)

	// Create a new PubSubListener.
	cmd = &PubSubListener{
		client:       pubsubClient,
		subscription: sub,
		command:      command,
	}
	return cmd, nil
}

// SetCommand A setter for the underlying handler command.
func (m *PubSubListener) SetCommand(command cor.Command) {
	// Only set the command if it's not already set.
	if m.command == nil {
		m.command = command
	}
}

// Listen starts the async function for listening and should be instantiated
// using the same context of the cloud service but may be configured independently
// for a different recovery life-cycle.
func (m *PubSubListener) Listen(ctx context.Context) {
	log.Printf("listening: %s", m.subscription)

	// Start a goroutine to listen for messages.
	go func() {
		// Create a new tracer.
		tracer := otel.Tracer("message-listener")

		// Receive messages from the subscription.
		err := m.subscription.Receive(ctx, func(_ context.Context, msg *pubsub.Message) {
			// Start a new span.
			spanCtx, span := tracer.Start(ctx, "receive-message")
			span.SetName("receive-message")
			span.SetAttributes(attribute.String("msg", string(msg.Data)))
			log.Println("received message")

			// Create a new chain context.
			chainCtx := cor.NewBaseContext()
			chainCtx.SetContext(spanCtx)
			chainCtx.Add(cor.CtxIn, string(msg.Data))

			// Execute the command.
			m.command.Execute(chainCtx)

			// Only acknowledge the message if the command executed successfully.
			if !chainCtx.HasErrors() {
				span.SetStatus(codes.Ok, "success")
				msg.Ack()
			} else {
				span.SetStatus(codes.Error, "failed")
				for _, e := range chainCtx.GetErrors() {
					log.Printf("error executing chain: %v", e)
				}
			}

			// End the span.
			span.End()
		})

		// Log any errors.
		if err != nil {
			log.Printf("error receiving data: %v", err)
		}
	}()
}


================================================================
File: internal/cloud/state.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cloud

import (
	"context"
	"log"

	"cloud.google.com/go/bigquery"
	credentials "cloud.google.com/go/iam/credentials/apiv1"
	"cloud.google.com/go/pubsub"
	"cloud.google.com/go/storage"
	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
)

// ServiceClients is the state machine for the cloud clients.
type ServiceClients struct {
	StorageClient   *storage.Client                         // The Google Cloud Storage client.
	PubsubClient    *pubsub.Client                          // The Google Cloud Pub/Sub client.
	GenAIClient     *genai.Client                           // The Google Cloud Vertex AI client.
	BiqQueryClient  *bigquery.Client                        // The Google Cloud BigQuery client.
	IAMClient       *credentials.IamCredentialsClient       // The IAM credentials client for signing URLs.
	PubSubListeners map[string]*PubSubListener              // A map of Pub/Sub listeners, keyed by subscription name.
	EmbeddingModels map[string]*genai.EmbeddingModel        // A map of Vertex AI embedding models, keyed by model name.
	AgentModels     map[string]*QuotaAwareGenerativeAIModel // A map of Vertex AI LLM models, keyed by model name.
}

// Close A close method to ensure all clients are shut down,
// these are handled using a closable context, but here for clean testing.
func (c *ServiceClients) Close() {
	_ = c.StorageClient.Close()
	_ = c.PubsubClient.Close()
	_ = c.GenAIClient.Close()
	_ = c.BiqQueryClient.Close()
}

// NewCloudServiceClients A helper function for correctly initializing the Google Cloud Services based on the configuration.
func NewCloudServiceClients(ctx context.Context, config *Config) (cloud *ServiceClients, err error) {
	// Create a new Google Cloud Storage client.
	sc, err := storage.NewClient(ctx)
	if err != nil {
		return nil, err
	}

	// Create a new Google Cloud Pub/Sub client.
	pc, err := pubsub.NewClient(ctx, config.Application.GoogleProjectId)
	if err != nil {
		return nil, err
	}

	// Create a new Google Cloud Vertex AI client.
	gc, err := genai.NewClient(ctx, option.WithAPIKey(config.Application.GoogleAPIKey))
	if err != nil {
		log.Printf("error creating genai client: %v", err)
		return nil, err
	}

	// Create a new Google Cloud BigQuery client.
	bc, err := bigquery.NewClient(ctx, config.Application.GoogleProjectId)
	if err != nil {
		return nil, err
	}

	// Create Pub/Sub listeners based on the configuration.
	subscriptions := make(map[string]*PubSubListener)
	for sub := range config.TopicSubscriptions {
		values := config.TopicSubscriptions[sub]
		actual, err := NewPubSubListener(pc, values.Name, nil)
		if err != nil {
			return nil, err
		}
		subscriptions[sub] = actual
	}

	// Create Vertex AI embedding models based on the configuration.
	embeddingModels := make(map[string]*genai.EmbeddingModel)
	for emb := range config.EmbeddingModels {
		embeddingModels[emb] = gc.EmbeddingModel(config.EmbeddingModels[emb].Model)
	}

	// Create Vertex AI LLM models based on the configuration.
	agentModels := make(map[string]*QuotaAwareGenerativeAIModel)
	for am := range config.AgentModels {
		values := config.AgentModels[am]
		model := gc.GenerativeModel(values.Model)
		model.SetTemperature(values.Temperature)
		model.SetTopK(values.TopK)
		model.SetTopP(values.TopP)
		model.SetMaxOutputTokens(values.MaxTokens)
		model.SystemInstruction = &genai.Content{
			Parts: []genai.Part{genai.Text(values.SystemInstructions)},
		}
		model.SafetySettings = DefaultSafetySettings
		model.ResponseMIMEType = values.OutputFormat
		model.Tools = []*genai.Tool{}
		wrappedAgent := NewQuotaAwareModel(model, values.RateLimit)
		agentModels[am] = wrappedAgent
	}

	// Create a new ServiceClients instance with all the initialized clients.
	cloud = &ServiceClients{
		StorageClient:   sc,
		PubsubClient:    pc,
		GenAIClient:     gc,
		BiqQueryClient:  bc,
		PubSubListeners: subscriptions,
		EmbeddingModels: embeddingModels,
		AgentModels:     agentModels,
	}

	return cloud, err
}


================================================================
File: internal/cloud/test/config_test.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cloud_test

import (
	"testing"

	"github.com/jaycherian/gcp-go-media-search/internal/testutil"
	"github.com/stretchr/testify/assert"
)

// TestConfig is used to test the validity of the hierarchy loader.
// First load is .env.toml, then .env.test.toml (set in test.SetupOS)
// any value redefined in .env.test.toml will overwrite .env.toml allowing
// the environment to take precedence over the defaults.
func TestConfig(t *testing.T) {
	config := test.GetConfig()
	// Uncomment this to see the final configuration structure
	// cloud.PrintConfig(config)

	assert.NotNil(t, config)
	assert.Equal(t, 2, len(config.TopicSubscriptions))
	assert.Equal(t, 2, len(config.EmbeddingModels))
	assert.Equal(t, 4, len(config.AgentModels))
	assert.Equal(t, 5, len(config.Categories))
}


================================================================
File: internal/cloud/test/pubsub_listener_test.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cloud_test

import (
	"context"
	"fmt"
	"log"
	"sync"
	"testing"
	"time"

	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"github.com/jaycherian/gcp-go-media-search/internal/testutil"
	"github.com/stretchr/testify/assert"
)

type MediaMessageCommand struct {
	cor.Command
}

func (c *MediaMessageCommand) IsExecutable(context cor.Context) bool {
	return context != nil && context.Get("message").(cloud.GCSPubSubNotification).Kind == "storage#object"
}

func (c *MediaMessageCommand) Execute(context cor.Context) {
	notification := context.Get("message").(cloud.GCSPubSubNotification)
	log.Println(fmt.Sprintf("Message:\n%v\n", notification))
}

func TestMessageHandler(t *testing.T) {
	ctx, cancel := context.WithCancel(context.Background())
	config := test.GetConfig()

	cloudClients, err := cloud.NewCloudServiceClients(ctx, config)
	test.HandleErr(err, t)
	defer cloudClients.Close()

	// Create the external controller group.
	var wg sync.WaitGroup
	wg.Add(1)

	pubsubListener := cloudClients.PubSubListeners["HiResTopic"]
	pubsubListener.SetCommand(&MediaMessageCommand{})

	assert.NotNil(t, pubsubListener)
	pubsubListener.Listen(ctx)

	go func() {
		time.Sleep(10 * time.Second)
		// By calling cancel here, we shut down the Message Listener
		// which in turn signals the WaitGroup that the work is complete.
		wg.Done()
		cancel()
	}()

	wg.Wait()
}


================================================================
File: internal/cloud/utils.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cloud

import (
	"context"
	"errors"
	"fmt"
	"go.opentelemetry.io/otel/metric"
	"log"
	"os"
	"strings"

	"github.com/BurntSushi/toml"
	"github.com/google/generative-ai-go/genai"
)

// Cloud Constants
const (
	ConfigFileBaseName  = ".env"
	ConfigFileExtension = ".toml"
	ConfigSeparator     = "."
	EnvConfigFilePrefix = "GCP_CONFIG_PREFIX"
	EnvConfigRuntime    = "GCP_RUNTIME"
	MaxRetries          = 3
)

// Simple utility to see if a file exists
func fileExists(in string) bool {
	_, err := os.Stat(in)
	return !errors.Is(err, os.ErrNotExist)
}

// LoadConfig The configuration loader, a hierarchical loader that allows environment overrides.
func LoadConfig(baseConfig interface{}) {
	configurationFilePrefix := os.Getenv(EnvConfigFilePrefix)
	if len(configurationFilePrefix) > 0 && !strings.HasSuffix(configurationFilePrefix, string(os.PathSeparator)) {
		configurationFilePrefix = configurationFilePrefix + string(os.PathSeparator)
	}

	runtimeEnvironment := os.Getenv(EnvConfigRuntime)
	if runtimeEnvironment == "" {
		runtimeEnvironment = "test"
	}

	// Read Base Config
	baseConfigFileName := configurationFilePrefix + ConfigFileBaseName + ConfigFileExtension
	fmt.Printf("Base Configuration File: %s\n", baseConfigFileName)

	// Override with environment config
	envConfigFileName := configurationFilePrefix + ConfigFileBaseName + ConfigSeparator + runtimeEnvironment + ConfigFileExtension
	fmt.Printf("Environment Configuration File: %s\n", envConfigFileName)

	if fileExists(baseConfigFileName) {
		_, err := toml.DecodeFile(baseConfigFileName, baseConfig)
		if err != nil {
			log.Fatalf("failed to decode base configuration file %s with error: %s", baseConfigFileName, err)
		}
	}

	if fileExists(envConfigFileName) {
		_, err := toml.DecodeFile(envConfigFileName, baseConfig)
		if err != nil {
			log.Fatalf("failed to decode environment configuration file: %s with error: %s", envConfigFileName, err)
		}
	}
}

// GenerateMultiModalResponse A GenAI helper function for executing multi-modal requests with a retry limit.
func GenerateMultiModalResponse(
	ctx context.Context,
	inputTokenCounter metric.Int64Counter,
	outputTokenCounter metric.Int64Counter,
	retryCounter metric.Int64Counter,
	tryCount int,
	model *QuotaAwareGenerativeAIModel,
	parts ...genai.Part) (value string, err error) {
	resp, err := model.GenerateContent(ctx, parts...)
	inputTokenCounter.Add(ctx, int64(resp.UsageMetadata.PromptTokenCount))
	outputTokenCounter.Add(ctx, int64(resp.UsageMetadata.CandidatesTokenCount))
	if err != nil {
		if tryCount < MaxRetries {
			retryCounter.Add(ctx, 1)
			return GenerateMultiModalResponse(ctx, inputTokenCounter, outputTokenCounter, retryCounter, tryCount+1, model, parts...)
		} else {
			return "", err
		}
	}
	value = ""
	for _, candidate := range resp.Candidates {
		if candidate.Content != nil {
			for _, part := range candidate.Content.Parts {
				value += fmt.Sprint(part)
			}
		}
	}
	return value, nil
}

// NewTextPart A delegate method for creating text parts
func NewTextPart(in string) genai.Part {
	return genai.Text(in)
}

// NewFileData A delegate method for creating File Data parts.
func NewFileData(in string, mimeType string) genai.Part {
	return genai.FileData{URI: in, MIMEType: mimeType}
}


================================================================
File: internal/cloud/wrappers.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cloud

import (
	"context"
	"errors"
	"time"

	"github.com/google/generative-ai-go/genai"
	"golang.org/x/time/rate"
)

// QuotaAwareGenerativeAIModel wraps a genai.GenerativeModel with rate limiting.
type QuotaAwareGenerativeAIModel struct {
	*genai.GenerativeModel              // The wrapped Vertex AI LLM.
	RateLimit              rate.Limiter // The rate limiter for the LLM.
}

// NewQuotaAwareModel creates a new QuotaAwareGenerativeAIModel with the given rate limit.
func NewQuotaAwareModel(wrapped *genai.GenerativeModel, requestsPerSecond int) *QuotaAwareGenerativeAIModel {
	return &QuotaAwareGenerativeAIModel{
		GenerativeModel: wrapped,
		RateLimit:       *rate.NewLimiter(rate.Every(time.Second/1), requestsPerSecond),
	}
}

// GenerateContent generates content using the wrapped LLM with rate limiting.
func (q *QuotaAwareGenerativeAIModel) GenerateContent(ctx context.Context, parts ...genai.Part) (resp *genai.GenerateContentResponse, err error) {
	// Check if the rate limit allows a request.
	if q.RateLimit.Allow() {
		// If allowed, make the request to the LLM.
		resp, err = q.GenerativeModel.GenerateContent(ctx, parts...)
		if err != nil {
			// If there's an error, check the retry count from the context.
			retryCount := ctx.Value("retry").(int)
			if retryCount > 3 {
				// If retry count exceeds the limit, return an error.
				return nil, errors.New("failed generation on max retries")
			}
			// If retries are allowed, wait for one minute and try again.
			errCtx := context.WithValue(ctx, "retry", retryCount+1)
			time.Sleep(time.Minute * 1)
			return q.GenerateContent(errCtx, parts...)
		}
		// If successful, return the response.
		return resp, err
	} else {
		// If rate limit is exceeded, wait for 5 seconds and try again.
		time.Sleep(time.Second * 5)
		return q.GenerateContent(ctx, parts...)
	}
}


================================================================
File: internal/core/commands/ffmpeg.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commands

import (
	"fmt"
	"io"

	"github.com/h2non/filetype"

	"os"
	"os/exec"
	"strings"

	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
)

const (
	DefaultFfmpegArgs = "-analyzeduration 0 -probesize 5000000 -y -hide_banner -i %s -filter:v scale=w=%s:h=trunc(ow/a/2)*2 -f mp4 %s"
	TempFilePrefix    = "ffmpeg-output-"
	CommandSeparator  = " "
)

// FFMpegCommand is a simple command used for
// downloading a media file embedded in the message, resizing it
// and uploading the resized version to the destination bucket.
// The scale uses a dynamic scale to keep the aspect ratio of the original.
type FFMpegCommand struct {
	cor.BaseCommand
	commandPath string
	targetWidth string
}

func NewFFMpegCommand(name string, commandPath string, targetWidth string) *FFMpegCommand {
	return &FFMpegCommand{
		BaseCommand: *cor.NewBaseCommand(name),
		commandPath: commandPath,
		targetWidth: targetWidth}
}

// Execute executes the business logic of the command
func (c *FFMpegCommand) Execute(context cor.Context) {
	originalInputPath := context.Get(c.GetInputParam()).(string)

	// --- Step 1: Open the original input file ---
	originalFile, err := os.Open(originalInputPath)
	if err != nil {
		c.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(c.GetName(), fmt.Errorf("failed to open original input file: %w", err))
		return
	}
	defer originalFile.Close()

	// --- Step 2: Detect the file type to determine the correct extension ---
	// Read the first 261 bytes to get the file header for type detection.
	header := make([]byte, 261)
	if _, err := originalFile.Read(header); err != nil && err != io.EOF {
		c.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(c.GetName(), fmt.Errorf("failed to read header from input file: %w", err))
		return
	}
	// Reset the reader to the start of the file for copying later.
	originalFile.Seek(0, 0)

	kind, _ := filetype.Match(header)
	if kind == filetype.Unknown {
		// Could not determine the file type, add error or proceed with caution.
		// For this example, we'll log it and let FFmpeg try anyway.
		fmt.Println("Warning: Could not determine file type. FFmpeg might fail.")
	}

	// --- Step 3: Create a new temp input file WITH the correct extension ---
	// This solves the "No such file or directory" error from FFmpeg.
	// We create it in the current directory "." to avoid Snap permission issues with "/tmp".
	newInputFile, err := os.CreateTemp(".", "ffmpeg-input-*."+kind.Extension)
	if err != nil {
		c.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(c.GetName(), fmt.Errorf("failed to create new temp input file: %w", err))
		return
	}
	defer newInputFile.Close()
	defer os.Remove(newInputFile.Name()) // IMPORTANT: Schedule cleanup of this temp file.

	// Copy the original file's content to the new, correctly named temp file.
	if _, err := io.Copy(newInputFile, originalFile); err != nil {
		c.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(c.GetName(), fmt.Errorf("failed to copy content to new temp input: %w", err))
		return
	}
	fmt.Printf("Created new temporary input with correct extension: %s\n", newInputFile.Name())

	// --- Step 4: Create the temporary output file ---
	// Also creating in "." to avoid Snap permission issues.
	outputFile, err := os.CreateTemp(".", "ffmpeg-output-*.mp4")
	if err != nil {
		c.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(c.GetName(), fmt.Errorf("could not create a temp output file: %w", err))
		return
	}
	outputFile.Close() // Close the file so FFmpeg can write to it.

	// --- Step 5: Build and run the FFmpeg command ---
	// Using the NEW input file and the NEW output file.
	args := fmt.Sprintf(DefaultFfmpegArgs, newInputFile.Name(), c.targetWidth, outputFile.Name())
	cmd := exec.Command(c.commandPath, strings.Split(args, CommandSeparator)...)

	fmt.Printf("Executing FFmpeg command: %s\n", cmd.String())
	cmd.Stderr = os.Stderr // Pipe FFmpeg errors to standard error.

	if err := cmd.Run(); err != nil {
		os.Remove(outputFile.Name()) // Clean up the failed output file.
		c.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(c.GetName(), fmt.Errorf("error running ffmpeg: %w", err))
		return
	}

	fmt.Printf("FFmpeg processing successful. Output is at: %s\n", outputFile.Name())
	c.GetSuccessCounter().Add(context.GetContext(), 1)
	context.AddTempFile(outputFile.Name()) // Assuming this tracks files for later cleanup.
	context.Add(cor.CtxOut, outputFile.Name())
}


================================================================
File: internal/core/commands/gcs_file_upload.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commands

import (
	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"io"
	"log"
	"os"
	"path/filepath"

	"cloud.google.com/go/storage"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
)

type GCSFileUpload struct {
	cor.BaseCommand
	client *storage.Client
	bucket string
}

func NewGCSFileUpload(name string, client *storage.Client, bucket string) *GCSFileUpload {
	return &GCSFileUpload{BaseCommand: *cor.NewBaseCommand(name), client: client, bucket: bucket}
}

func (c *GCSFileUpload) Execute(context cor.Context) {
	path := context.Get(c.GetInputParam()).(string)
	name := filepath.Base(path)

	original := context.Get(cloud.GetGCSObjectName()).(*cloud.GCSObject)

	dat, err := os.Open(path)
	if err != nil {
		context.AddError(c.GetName(), err)
		return
	}

	defer func(name string) {
		err := os.Remove(name)
		if err != nil {
			log.Printf("failed to remove file from OS: %v\n", err)
		}
	}(path)

	writerBucket := c.client.Bucket(c.bucket)
	if original != nil {
		obj := writerBucket.Object(original.Name)
		writer := obj.NewWriter(context.GetContext())
		defer func(writer *storage.Writer) {
			err := writer.Close()
			if err != nil {
				log.Printf("failed to close writer: %v\n", err)
			}
		}(writer)
		written, err := io.Copy(writer, dat)
		if err != nil {
			log.Printf("failed to close writer or partial write: %d total bytes, %v\n", written, err)
			context.AddError(c.GetName(), err)
			return
		}
	} else {
		obj := writerBucket.Object(name)
		writer := obj.NewWriter(context.GetContext())
		defer func(writer *storage.Writer) {
			err := writer.Close()
			if err != nil {
				log.Printf("failed to close writer: %v\n", err)
			}
		}(writer)
		written, err := io.Copy(writer, dat)
		if err != nil {
			log.Printf("failed to close writer or partial write: %d total bytes, %v\n", written, err)
			context.AddError(c.GetName(), err)
			return
		}
	}
}


================================================================
File: internal/core/commands/gcs_to_temp_file.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commands

import (
	"fmt"
	"io"
	"log"
	"os"

	"github.com/jaycherian/gcp-go-media-search/internal/cloud"

	"cloud.google.com/go/storage"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
)

type GCSToTempFile struct {
	cor.BaseCommand
	client         *storage.Client
	tempFilePrefix string
}

func NewGCSToTempFile(name string, client *storage.Client, tempFilePrefix string) *GCSToTempFile {
	return &GCSToTempFile{
		BaseCommand:    *cor.NewBaseCommand(name),
		client:         client,
		tempFilePrefix: tempFilePrefix,
	}
}

func (c *GCSToTempFile) Execute(context cor.Context) {
	msg := context.Get(c.GetInputParam()).(*cloud.GCSObject)

	readerBucket := c.client.Bucket(msg.Bucket)
	obj := readerBucket.Object(msg.Name)
	reader, err := obj.NewReader(context.GetContext())
	if err != nil {
		c.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(c.GetName(), err)
		return
	}
	defer func(reader *storage.Reader, context cor.Context) {
		err := reader.Close()
		if err != nil {
			c.GetErrorCounter().Add(context.GetContext(), 1)
			log.Printf("failed to close reader: %v\n", err)
		}
	}(reader, context)

	tempFile, err := os.CreateTemp("", c.tempFilePrefix)
	if err != nil {
		fmt.Print("could not create Temp file", err)
	}
	written, err := io.Copy(tempFile, reader)
	if err != nil {
		c.GetErrorCounter().Add(context.GetContext(), 1)
		log.Printf("failed to copy io, %d written: %v\n", written, err)
		context.AddError(c.GetName(), err)
		return
	}
	c.GetSuccessCounter().Add(context.GetContext(), 1)
	// Add to the temp files to clean up after execution in a chain
	context.AddTempFile(tempFile.Name())
	// Make the variable available if needed
	context.Add(c.GetOutputParam(), tempFile.Name())
}


================================================================
File: internal/core/commands/media_assembly.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commands

import (
	"encoding/json"
	"fmt"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
	"sort"
	"strings"
	"time"
)

const (
	DefaultMovieTimeFormat = "15:04:05"
)

type MediaAssembly struct {
	cor.BaseCommand
	summaryParam     string
	sceneParam       string
	mediaObjectParam string
}

// NewMediaAssembly default constructor for MediaAssembly
func NewMediaAssembly(name string, summaryParam string, sceneParam string, mediaObjectParam string) *MediaAssembly {
	return &MediaAssembly{
		BaseCommand:      *cor.NewBaseCommand(name),
		summaryParam:     summaryParam,
		sceneParam:       sceneParam,
		mediaObjectParam: mediaObjectParam}
}

// IsExecutable overrides the default to verify the summary param and scene param are in the context
func (m *MediaAssembly) IsExecutable(context cor.Context) bool {
	return context != nil &&
		context.Get(m.summaryParam) != nil &&
		context.Get(m.sceneParam) != nil
}

func (m *MediaAssembly) Execute(context cor.Context) {
	summary := context.Get(m.summaryParam).(*model.MediaSummary)
	jsonScenes := context.Get(m.sceneParam).([]string)
	sceneValues := fmt.Sprintf("[ %s ]", strings.Join(jsonScenes, ","))

	scenes := make([]*model.Scene, 0)
	sceneErr := json.Unmarshal([]byte(sceneValues), &scenes)
	if sceneErr != nil {
		m.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(m.GetName(), sceneErr)
		return
	}

	// Sort the scenes and sequence them
	sort.Slice(scenes, func(i, j int) bool {
		t, _ := time.Parse(DefaultMovieTimeFormat, scenes[i].Start)
		tt, _ := time.Parse(DefaultMovieTimeFormat, scenes[j].Start)
		return t.Before(tt)
	})
	for i, scene := range scenes {
		scene.SequenceNumber = i
	}

	// Call the constructor to ensure the UUID is generated
	// TODO - Base the
	media := model.NewMedia(summary.Title)
	media.Title = summary.Title
	media.Category = summary.Category
	media.Summary = summary.Summary
	media.MediaUrl = summary.MediaUrl
	media.LengthInSeconds = summary.LengthInSeconds
	media.Director = summary.Director
	media.ReleaseYear = summary.ReleaseYear
	media.Genre = summary.Genre
	media.Rating = summary.Rating
	media.Cast = append(media.Cast, summary.Cast...)
	media.Scenes = append(media.Scenes, scenes...)

	m.GetSuccessCounter().Add(context.GetContext(), 1)

	context.Add(m.mediaObjectParam, media)
	context.Add(cor.CtxOut, media)
}


================================================================
File: internal/core/commands/media_cleanup.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commands

import (
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"github.com/google/generative-ai-go/genai"
)

type MediaCleanup struct {
	cor.BaseCommand
	client *genai.Client
}

func NewMediaCleanup(name string, client *genai.Client) *MediaCleanup {
	return &MediaCleanup{BaseCommand: *cor.NewBaseCommand(name), client: client}
}

func (v *MediaCleanup) IsExecutable(context cor.Context) bool {
	return context != nil && context.Get(GetVideoUploadFileParameterName()) != nil &&
		context.Get(GetVideoUploadFileParameterName()).(*genai.File) != nil
}

func (v *MediaCleanup) Execute(context cor.Context) {
	fil := context.Get(GetVideoUploadFileParameterName()).(*genai.File)
	err := v.client.DeleteFile(context.GetContext(), fil.Name)
	if err != nil {
		v.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(v.GetName(), err)
		return
	}
	v.GetSuccessCounter().Add(context.GetContext(), 1)
}


================================================================
File: internal/core/commands/media_persist_to_big_query.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commands

import (
	"log"

	"cloud.google.com/go/bigquery"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
)

type MediaPersistToBigQuery struct {
	cor.BaseCommand
	client     *bigquery.Client
	dataset    string
	table      string
	mediaParam string
}

func NewMediaPersistToBigQuery(name string, client *bigquery.Client, dataset string, table string, mediaParam string) *MediaPersistToBigQuery {
	return &MediaPersistToBigQuery{BaseCommand: *cor.NewBaseCommand(name), client: client, dataset: dataset, table: table, mediaParam: mediaParam}
}

func (s *MediaPersistToBigQuery) IsExecutable(context cor.Context) bool {
	return context != nil && context.Get(s.mediaParam) != nil
}

func (s *MediaPersistToBigQuery) Execute(context cor.Context) {
	log.Println("Persisting data")
	media := context.Get(s.mediaParam).(*model.Media)
	i := s.client.Dataset(s.dataset).Table(s.table).Inserter()
	if err := i.Put(context.GetContext(), media); err != nil {
		log.Printf("failed to write media to database. title %s error %s\n", media.Title, err)
		s.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(s.GetName(), err)
		return
	}
	s.GetSuccessCounter().Add(context.GetContext(), 1)
	context.Add(cor.CtxOut, media)
}


================================================================
File: internal/core/commands/media_summary_creator.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commands

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
	"go.opentelemetry.io/otel/metric"
	"text/template"

	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"github.com/google/generative-ai-go/genai"
)

type MediaSummaryCreator struct {
	cor.BaseCommand
	config                   *cloud.Config
	generativeAIModel        *cloud.QuotaAwareGenerativeAIModel
	template                 *template.Template
	geminiInputTokenCounter  metric.Int64Counter
	geminiOutputTokenCounter metric.Int64Counter
	geminiRetryCounter       metric.Int64Counter
}

func NewMediaSummaryCreator(
	name string,
	config *cloud.Config,
	generativeAIModel *cloud.QuotaAwareGenerativeAIModel,
	template *template.Template) *MediaSummaryCreator {

	out := &MediaSummaryCreator{
		BaseCommand:       *cor.NewBaseCommand(name),
		config:            config,
		generativeAIModel: generativeAIModel,
		template:          template}

	out.geminiInputTokenCounter, _ = out.GetMeter().Int64Counter(fmt.Sprintf("%s.gemini.token.input", out.GetName()))
	out.geminiOutputTokenCounter, _ = out.GetMeter().Int64Counter(fmt.Sprintf("%s.gemini.token.ouput", out.GetName()))
	out.geminiRetryCounter, _ = out.GetMeter().Int64Counter(fmt.Sprintf("%s.gemini.token.retry", out.GetName()))

	return out
}

func (t *MediaSummaryCreator) GenerateParams(_ cor.Context) map[string]interface{} {
	params := make(map[string]interface{})

	// Create a string representation of the categories
	catStr := ""
	for key, cat := range t.config.Categories {
		catStr += key + " - " + cat.Definition + "; "
	}
	params["CATEGORIES"] = t.config.Categories

	exampleSummary, _ := json.Marshal(model.GetExampleSummary())
	params["EXAMPLE_JSON"] = string(exampleSummary)
	return params
}

func (t *MediaSummaryCreator) Execute(context cor.Context) {
	mediaFile := context.Get(t.GetInputParam()).(*genai.File)
	var buffer bytes.Buffer
	err := t.template.Execute(&buffer, t.GenerateParams(context))
	if err != nil {
		t.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(t.GetName(), err)
		return
	}

	// Create the parts to query Gemini
	parts := make([]genai.Part, 0)
	parts = append(parts, cloud.NewFileData(mediaFile.URI, mediaFile.MIMEType))
	parts = append(parts, cloud.NewTextPart(buffer.String()))

	// Get the response
	out, err := cloud.GenerateMultiModalResponse(context.GetContext(), t.geminiInputTokenCounter, t.geminiOutputTokenCounter, t.geminiRetryCounter, 0, t.generativeAIModel, parts...)
	if err != nil {
		t.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(t.GetName(), err)
		return
	}
	t.GetSuccessCounter().Add(context.GetContext(), 1)
	context.Add(t.GetOutputParam(), out)
}


================================================================
File: internal/core/commands/media_summary_json_to_struct.go
================================================================
// Package commands Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package commands

import (
	"encoding/json"
	"fmt"
	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
)

type MediaSummaryJsonToStruct struct {
	cor.BaseCommand
}

func NewMediaSummaryJsonToStruct(name string, outputParamName string) *MediaSummaryJsonToStruct {
	out := MediaSummaryJsonToStruct{BaseCommand: *cor.NewBaseCommand(name)}
	out.OutputParamName = outputParamName
	return &out
}

func (s *MediaSummaryJsonToStruct) Execute(context cor.Context) {
	in := context.Get(s.GetInputParam()).(string)
	gcsFile := context.Get(cloud.GetGCSObjectName()).(*cloud.GCSObject)

	doc := &model.MediaSummary{}
	err := json.Unmarshal([]byte(in), &doc)
	if err != nil {
		s.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(s.GetName(), err)
		return
	}
	s.GetSuccessCounter().Add(context.GetContext(), 1)
	doc.MediaUrl = fmt.Sprintf("https://storage.mtls.cloud.google.com/%s/%s", gcsFile.Bucket, gcsFile.Name)
	context.Add(s.GetOutputParam(), doc)
	context.Add(cor.CtxOut, doc)
}


================================================================
File: internal/core/commands/media_trigger_reader.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commands

import (
	"encoding/json"
	"github.com/jaycherian/gcp-go-media-search/internal/cloud"

	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
)

type MediaTriggerToGCSObject struct {
	cor.BaseCommand
}

func NewMediaTriggerToGCSObject(name string) *MediaTriggerToGCSObject {
	return &MediaTriggerToGCSObject{BaseCommand: *cor.NewBaseCommand(name)}
}

func (c *MediaTriggerToGCSObject) Execute(context cor.Context) {
	in := context.Get(c.GetInputParam()).(string)
	var out cloud.GCSPubSubNotification
	err := json.Unmarshal([]byte(in), &out)
	if err != nil {
		c.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(c.GetName(), err)
		return
	}

	c.GetSuccessCounter().Add(context.GetContext(), 1)

	msg := &cloud.GCSObject{Bucket: out.Bucket, Name: out.Name, MIMEType: out.ContentType}
	context.Add(cloud.GetGCSObjectName(), msg)
	context.Add(c.GetOutputParam(), msg)
}


================================================================
File: internal/core/commands/media_upload.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commands

import (
	"time"

	"github.com/jaycherian/gcp-go-media-search/internal/cloud"

	"github.com/google/generative-ai-go/genai"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
)

type MediaUpload struct {
	cor.BaseCommand
	client           *genai.Client
	timeoutInSeconds time.Duration
}

func NewMediaUpload(name string, genaiClient *genai.Client, timeoutInSeconds time.Duration) *MediaUpload {
	return &MediaUpload{BaseCommand: *cor.NewBaseCommand(name), client: genaiClient, timeoutInSeconds: timeoutInSeconds}
}

func GetVideoUploadFileParameterName() string {
	return "__VIDEO_UPLOAD_FILE__"
}

func (v *MediaUpload) Execute(context cor.Context) {
	gcsFile := context.Get(cloud.GetGCSObjectName()).(*cloud.GCSObject)
	fileName := context.Get(v.GetInputParam()).(string)

	genFil, err := v.client.UploadFileFromPath(context.GetContext(), fileName, &genai.UploadFileOptions{DisplayName: gcsFile.Name, MIMEType: gcsFile.MIMEType})
	if err != nil {
		v.GetErrorCounter().Add(context.GetContext(), 1)
		context.AddError(v.GetName(), err)
		return
	}

	// Videos need to be processed before you can use them.
	for genFil.State == genai.FileStateProcessing {
		time.Sleep(5 * time.Second)
		var err error
		if genFil, err = v.client.GetFile(context.GetContext(), genFil.Name); err != nil {
			v.GetErrorCounter().Add(context.GetContext(), 1)
			context.AddError(v.GetName(), err)
			return
		}
	}

	v.GetSuccessCounter().Add(context.GetContext(), 1)
	context.Add(GetVideoUploadFileParameterName(), genFil)
	context.Add(v.GetOutputParam(), genFil)
}


================================================================
File: internal/core/commands/scene_extractor.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package commands

import (
	"bytes"
	goctx "context"
	"encoding/json"
	"fmt"
	"go.opentelemetry.io/otel/metric"
	"strings"
	"sync"
	"text/template"

	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
	"github.com/google/generative-ai-go/genai"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

type SceneExtractor struct {
	cor.BaseCommand
	generativeAIModel        *cloud.QuotaAwareGenerativeAIModel
	promptTemplate           *template.Template
	numberOfWorkers          int
	geminiInputTokenCounter  metric.Int64Counter
	geminiOutputTokenCounter metric.Int64Counter
	geminiRetryCounter       metric.Int64Counter
}

func NewSceneExtractor(
	name string,
	model *cloud.QuotaAwareGenerativeAIModel,
	prompt *template.Template,
	numberOfWorkers int) *SceneExtractor {
	out := &SceneExtractor{
		BaseCommand:       *cor.NewBaseCommand(name),
		generativeAIModel: model,
		promptTemplate:    prompt,
		numberOfWorkers:   numberOfWorkers}

	out.geminiInputTokenCounter, _ = out.GetMeter().Int64Counter(fmt.Sprintf("%s.gemini.token.input", out.GetName()))
	out.geminiOutputTokenCounter, _ = out.GetMeter().Int64Counter(fmt.Sprintf("%s.gemini.token.ouput", out.GetName()))
	out.geminiRetryCounter, _ = out.GetMeter().Int64Counter(fmt.Sprintf("%s.gemini.token.retry", out.GetName()))

	return out
}

func (s *SceneExtractor) IsExecutable(context cor.Context) bool {
	return context != nil &&
		context.Get(s.GetInputParam()) != nil &&
		context.Get(GetVideoUploadFileParameterName()) != nil
}

func (s *SceneExtractor) Execute(context cor.Context) {
	summary := context.Get(s.GetInputParam()).(*model.MediaSummary)
	videoFile := context.Get(GetVideoUploadFileParameterName()).(*genai.File)

	exampleScene := model.GetExampleScene()
	exampleJson, _ := json.Marshal(exampleScene)
	exampleText := string(exampleJson)

	// Create a human-readable cast
	castString := ""
	for _, cast := range summary.Cast {
		castString += fmt.Sprintf("%s - %s\n", cast.CharacterName, cast.ActorName)
	}
	summaryText := fmt.Sprintf("Title:%s\nSummary:\n\n%s\nCast:\n\n%v\n", summary.Title, summary.Summary, castString)

	var wg sync.WaitGroup
	jobs := make(chan *SceneJob, len(summary.SceneTimeStamps))
	results := make(chan *SceneResponse, len(summary.SceneTimeStamps))

	// Create worker pool
	for w := 1; w <= s.numberOfWorkers; w++ {
		wg.Add(1)
		go sceneWorker(jobs, results, &wg)
	}

	// Execute all scenes against the worker pool
	for i, ts := range summary.SceneTimeStamps {
		job := CreateJob(context.GetContext(), s.Tracer, s.geminiInputTokenCounter, s.geminiOutputTokenCounter, s.geminiRetryCounter, i, s.GetName(), summaryText, exampleText, *s.promptTemplate, videoFile, s.generativeAIModel, ts)
		jobs <- job
	}

	close(jobs)
	wg.Wait()
	close(results)

	// Aggregate the responses
	sceneData := make([]string, 0)
	for r := range results {
		if r.err != nil {
			s.GetErrorCounter().Add(context.GetContext(), 1)
			context.AddError(s.GetName(), r.err)
		} else {

			sceneData = append(sceneData, r.value)
		}
	}

	if !context.HasErrors() {
		s.GetSuccessCounter().Add(context.GetContext(), 1)
	}

	context.Add(s.GetOutputParam(), sceneData)
	context.Add(cor.CtxOut, sceneData)
}

type SceneResponse struct {
	value string
	err   error
}

type SceneJob struct {
	workerId                 int
	ctx                      goctx.Context
	geminiInputTokenCounter  metric.Int64Counter
	geminiOutputTokenCounter metric.Int64Counter
	geminiRetryCounter       metric.Int64Counter
	timeSpan                 *model.TimeSpan
	span                     trace.Span
	parts                    []genai.Part
	model                    *cloud.QuotaAwareGenerativeAIModel
	err                      error
}

func (s *SceneJob) Close(status codes.Code, description string) {
	s.span.SetStatus(status, description)
	s.span.End()
}

func CreateJob(
	ctx goctx.Context,
	tracer trace.Tracer,
	geminiInputTokenCounter metric.Int64Counter,
	geminiOutputTokenCounter metric.Int64Counter,
	geminiRetryCounter metric.Int64Counter,
	workerId int,
	commandName string,
	summaryText string,
	exampleText string,
	template template.Template,
	videoFile *genai.File,
	model *cloud.QuotaAwareGenerativeAIModel,
	timeSpan *model.TimeSpan,
) *SceneJob {
	sceneCtx, sceneSpan := tracer.Start(ctx, fmt.Sprintf("%s_genai", commandName))
	sceneSpan.SetAttributes(
		attribute.Int("sequence", workerId),
		attribute.String("start", timeSpan.Start),
		attribute.String("end", timeSpan.End),
	)
	vocabulary := make(map[string]string)
	vocabulary["SEQUENCE"] = fmt.Sprintf("%d", workerId)
	vocabulary["SUMMARY_DOCUMENT"] = summaryText
	vocabulary["TIME_START"] = timeSpan.Start
	vocabulary["TIME_END"] = timeSpan.End
	vocabulary["EXAMPLE_JSON"] = exampleText

	var doc bytes.Buffer
	err := template.Execute(&doc, vocabulary)
	if err != nil {
		return &SceneJob{err: err}
	}
	tsPrompt := doc.String()

	parts := make([]genai.Part, 0)
	parts = append(parts, cloud.NewFileData(videoFile.URI, videoFile.MIMEType))
	parts = append(parts, cloud.NewTextPart(tsPrompt))

	return &SceneJob{workerId: workerId,
		ctx:                      sceneCtx,
		geminiInputTokenCounter:  geminiInputTokenCounter,
		geminiOutputTokenCounter: geminiOutputTokenCounter,
		geminiRetryCounter:       geminiRetryCounter,
		timeSpan:                 timeSpan, span: sceneSpan, parts: parts, model: model}
}

// Create a worker function for parallel work streams
func sceneWorker(jobs <-chan *SceneJob, results chan<- *SceneResponse, wg *sync.WaitGroup) {
	defer wg.Done()
	for j := range jobs {
		if j.err == nil {
			out, err := cloud.GenerateMultiModalResponse(j.ctx, j.geminiInputTokenCounter, j.geminiOutputTokenCounter, j.geminiRetryCounter, 0, j.model, j.parts...)
			if err != nil {
				j.Close(codes.Error, "scene extract failed")
				results <- &SceneResponse{err: err}
				return
			}
			if len(strings.Trim(out, " ")) > 0 && out != "{}" {
				results <- &SceneResponse{value: out, err: nil}
			}
			j.Close(codes.Ok, "completed scene")
		} else {
			results <- &SceneResponse{value: "", err: j.err}
		}
	}
}


================================================================
File: internal/core/cor/base_chain.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cor

import (
	"fmt"

	"go.opentelemetry.io/otel/codes"
)

type BaseChain struct {
	BaseCommand
	continueOnFailure bool
	commands          []Command
}

func NewBaseChain(name string) *BaseChain {
	return &BaseChain{BaseCommand: *NewBaseCommand(name)}
}

func (c *BaseChain) ContinueOnFailure(continueOnFailure bool) Chain {
	c.continueOnFailure = continueOnFailure
	return c
}

func (c *BaseChain) AddCommand(command Command) Chain {
	c.commands = append(c.commands, command)
	return c
}

func (c *BaseChain) IsExecutable(context Context) bool {
	return context.GetContext() != nil
}

func (c *BaseChain) Execute(chCtx Context) {
	var ctx = chCtx.GetContext()
	var parentCtx = chCtx.GetContext()

	outerCtx, chainSpan := c.Tracer.Start(ctx, fmt.Sprintf("%s_execute", c.GetName()))
	for _, command := range c.commands {
		// Ensure that the next parameter is callable in a pipe stack
		commandContext, commandSpan := c.Tracer.Start(outerCtx, command.GetName())
		commandSpan.SetName(command.GetName())
		if chCtx.HasErrors() && !c.continueOnFailure {
			commandSpan.SetStatus(codes.Error, "previous error on chain")
			break
		} else if command.IsExecutable(chCtx) {
			// Since the next command may be a chain, we must set the parent context
			chCtx.SetContext(commandContext)

			// Start a span for each command to measure command performance
			command.Execute(chCtx)

			// Reset the context to the original state
			if parentCtx != nil {
				chCtx.SetContext(parentCtx)
			} else {
				chCtx.SetContext(nil)
			}
		} else {
			commandSpan.SetStatus(codes.Error, fmt.Sprintf("command not executable: %s", command.GetName()))
			commandSpan.End()
		}

		if chCtx.HasErrors() {
			commandSpan.SetStatus(codes.Error, "error after execute")
		} else {
			commandSpan.SetStatus(codes.Ok, command.GetName())
		}

		commandSpan.End()

		// Flipflop input/output
		chCtx.Remove(CtxIn)
		chCtx.Add(CtxIn, chCtx.Get(CtxOut))
		chCtx.Remove(CtxOut)
	}

	if !chCtx.HasErrors() {
		chainSpan.SetStatus(codes.Ok, c.GetName())
	} else {
		chainSpan.SetStatus(codes.Error, "chain failed to execute")
	}
	chainSpan.End()
}


================================================================
File: internal/core/cor/base_command.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cor

import (
	"fmt"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
	"log"
)

// BaseCommand is the default implementation of Command
type BaseCommand struct {
	Name            string
	InputParamName  string
	OutputParamName string
	Tracer          trace.Tracer
	Meter           metric.Meter
	SuccessCounter  metric.Int64Counter
	ErrorCounter    metric.Int64Counter
}

func NewBaseCommand(name string) *BaseCommand {
	meter := otel.Meter("github.com/GoogleCloudPlatform/solutions/media")
	successCounter, err := meter.Int64Counter(fmt.Sprintf("%s.counter.success", name))
	if err != nil {
		log.Printf("error creating success counter: %s\n", name)
	}
	errorCounter, err := meter.Int64Counter(fmt.Sprintf("%s.counter.error", name))
	if err != nil {
		log.Printf("error creating error counter: %s\n", name)
	}
	return &BaseCommand{
		Name:           name,
		Tracer:         otel.Tracer(name),
		Meter:          meter,
		SuccessCounter: successCounter,
		ErrorCounter:   errorCounter,
	}
}

func (c *BaseCommand) GetName() string {
	return c.Name
}

// IsExecutable a default implementation of IsExecutable.
func (c *BaseCommand) IsExecutable(context Context) bool {
	return context != nil && context.Get(c.GetInputParam()) != nil && context.GetContext() != nil
}

// GetInputParam the name of the parameter expected as the primary input,
// if empty it will default to CtxIn, during a chain execution event CtxIn
// will be mapped to the previous executions CtxOut to ensure PIPE / chain behaviors.
func (c *BaseCommand) GetInputParam() string {
	if len(c.InputParamName) == 0 {
		return CtxIn
	}
	return c.InputParamName
}

// GetOutputParam the name of the output parameter, the default is CtxOut
// See the chain execute method for more detail.
func (c *BaseCommand) GetOutputParam() string {
	if len(c.OutputParamName) == 0 {
		return CtxOut
	}
	return c.OutputParamName
}

func (c *BaseCommand) GetTracer() trace.Tracer {
	return c.Tracer
}

func (c *BaseCommand) GetMeter() metric.Meter {
	return c.Meter
}

func (c *BaseCommand) GetSuccessCounter() metric.Int64Counter {
	return c.SuccessCounter
}

func (c *BaseCommand) GetErrorCounter() metric.Int64Counter {
	return c.ErrorCounter
}


================================================================
File: internal/core/cor/base_context.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cor

import (
	"context"
	"log"
	"os"
)

type BaseContext struct {
	data      map[string]interface{}
	errors    map[string]error
	tempFiles []string
	context   context.Context
}

func NewBaseContext() Context {
	return &BaseContext{
		data:      make(map[string]interface{}),
		errors:    make(map[string]error),
		tempFiles: make([]string, 0),
	}
}

func (c *BaseContext) SetContext(context context.Context) {
	c.context = context
}

func (c *BaseContext) GetContext() context.Context {
	return c.context
}

func (c *BaseContext) Close() {
	// Clean up any temp files created along the way
	for _, file := range c.GetTempFiles() {
		err := os.Remove(file)
		if err != nil {
			log.Printf("failed to remove file %v\n", err)
		}
	}
}

func (c *BaseContext) Add(key string, value interface{}) Context {
	c.data[key] = value
	return c
}

func (c *BaseContext) AddTempFile(file string) {
	c.tempFiles = append(c.tempFiles, file)
}

func (c *BaseContext) GetTempFiles() []string {
	return c.tempFiles
}

func (c *BaseContext) AddError(key string, err error) {
	c.errors[key] = err
}

func (c *BaseContext) GetErrors() map[string]error {
	return c.errors
}

func (c *BaseContext) Get(key string) interface{} {
	return c.data[key]
}

func (c *BaseContext) Remove(key string) {
	delete(c.data, key)
}

func (c *BaseContext) HasErrors() bool {
	return len(c.errors) > 0
}


================================================================
File: internal/core/cor/interfaces.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cor

import (
	"context"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

const (
	CtxIn  = "__IN__"
	CtxOut = "__OUT__"
)

// Context is an opinionated runtime context for Go Lang.
// It's a bit more complex than other language versions due to the nature
// of Filesystem behaviors.
type Context interface {
	SetContext(context context.Context)
	GetContext() context.Context
	Add(key string, value interface{}) Context
	AddError(key string, err error)
	GetErrors() map[string]error
	Get(key string) interface{}
	Remove(key string)
	HasErrors() bool
	AddTempFile(file string)
	GetTempFiles() []string
	Close()
}

type Executable interface {
	Execute(context Context)
}

// Command is a simple interface that ensures an atomic unit of work.
// The principals of a Command are: 1) Atomic, 2) Testable, and 3) Thread Safe
type Command interface {
	Executable
	GetName() string
	GetInputParam() string
	GetOutputParam() string
	IsExecutable(context Context) bool
	GetTracer() trace.Tracer
	GetMeter() metric.Meter
	GetSuccessCounter() metric.Int64Counter
	GetErrorCounter() metric.Int64Counter
}

// Chain is a collection of commands that ensure the serial or parallel execution
// of the commands. The Chain is a command and therefore inherits the principals of the command
// and in addition each Chain implements it's own execution strategy.
type Chain interface {
	Command
	ContinueOnFailure(bool) Chain
	AddCommand(command Command) Chain
}


================================================================
File: internal/core/model/examples.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package model

// GetExampleScene is used to provide an example to the generative contexts.
func GetExampleScene() *Scene {
	out := &Scene{SequenceNumber: 1, Start: "00:00:00", End: "00:01:00", Script: `
INT. BATTLEFIELD - DAY

A fierce battle is raging. Soldiers are fighting and dying all around.

VOICEOVER (V.O.) - (Nathan Fillion)
I aim to misbehave.

We see a young woman, RIVER TAM (16), running through the battlefield. She is terrified and covered in blood.

RIVER (V.O.) - (Summar Glau)
They were right. They were always right.

River stumbles and falls. She looks up to see a man standing over her. He is SIMON TAM (26), her older brother.

SIMON - (Sean Maher)
It's all right, River. I'm here.

Simon helps River to her feet. They run away together.`}
	return out
}

func GetExampleSummary() *MediaSummary {
	s := &MediaSummary{
		Title:           "Serenity",
		Category:        "trailer",
		Summary:         "The crew of the ship Serenity try to evade an assassin sent to recapture telepath River.",
		LengthInSeconds: 120,
		MediaUrl:        "https://storage.mtls.cloud.google.com/bucket_name/Serenity.mp4",
		Director:        "Joss Whedon",
		ReleaseYear:     2005,
		Genre:           "Science Fiction",
		Rating:          "PG-13",
		SceneTimeStamps: make([]*TimeSpan, 0),
		Cast:            make([]*CastMember, 0),
	}
	s.SceneTimeStamps = append(s.SceneTimeStamps, &TimeSpan{Start: "00:00:00", End: "00:00:05"}, &TimeSpan{Start: "00:00:06", End: "00:00:10"})
	s.Cast = append(s.Cast, &CastMember{CharacterName: "Malcolm Reynolds", ActorName: "Nathan Fillion"})
	s.Cast = append(s.Cast, &CastMember{CharacterName: "River Tam", ActorName: "Summar Glau"})
	s.Cast = append(s.Cast, &CastMember{CharacterName: "Simon Tam", ActorName: "Sean Maher"})
	return s
}


================================================================
File: internal/core/model/persistent.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package model

import (
	"time"

	"github.com/google/uuid"
)

// Actor is used to represent the public details of an actor or actress.
type Actor struct {
	Id           string    `json:"id" bigquery:"id"`
	CreateDate   time.Time `json:"create_date" bigquery:"create_date"`
	Name         string    `json:"name" bigquery:"name"`
	DateOfBirth  time.Time `json:"dob" bigquery:"dob"` // Or time.Time if you need more precise handling
	DateOfDeath  time.Time `json:"dod" bigquery:"dod"`
	PlaceOfBirth string    `json:"pob" bigquery:"pob"`
	Biography    string    `json:"bio" bigquery:"bio"`
	Aliases      []string  `json:"aliases" bigquery:"aliases"`
	Awards       []string  `json:"awards" bigquery:"awards"`
	Nominations  []string  `json:"nominations" bigquery:"nominations"`
	ImageURL     string    `json:"ima_url" bigquery:"img_url"`
}

// Media capture the highest level of metadata about a media file.
type Media struct {
	Id              string        `json:"id" bigquery:"id"`
	CreateDate      time.Time     `json:"create_date" bigquery:"create_date"`
	Title           string        `json:"title" bigquery:"title"`
	Category        string        `json:"category" bigquery:"category"`
	Summary         string        `json:"summary" bigquery:"summary"`
	LengthInSeconds int           `json:"length_in_seconds" bigquery:"length_in_seconds"`
	MediaUrl        string        `json:"media_url" bigquery:"media_url"`
	Director        string        `json:"director,omitempty" bigquery:"director"`
	ReleaseYear     int           `json:"release_year,omitempty" bigquery:"release_year"`
	Genre           string        `json:"genre,omitempty" bigquery:"genre"`
	Rating          string        `json:"rating,omitempty" bigquery:"rating"`
	Cast            []*CastMember `json:"cast,omitempty" bigquery:"cast"`
	Scenes          []*Scene      `json:"scenes,omitempty" bigquery:"scenes"`
}

func NewMedia(fileName string) *Media {
	// Use a UUID 5
	generatedID := uuid.NewSHA1(uuid.NameSpaceURL, ([]byte)(fileName))
	return &Media{
		Id:         generatedID.String(),
		CreateDate: time.Now(),
		Cast:       make([]*CastMember, 0),
		Scenes:     make([]*Scene, 0),
	}
}

// Scene is a representation of a time span and it's sequence in a media object
// giving granular detail for the agent objects to interrogate
type Scene struct {
	SequenceNumber   int    `json:"sequence" bigquery:"sequence"`
	TokensToGenerate int    `json:"tokens_to_generate" bigquery:"tokens_to_generate"`
	TokensGenerated  int    `json:"tokens_generated" bigquery:"tokens_generated"`
	Start            string `json:"start" bigquery:"start"`
	End              string `json:"end" bigquery:"end"`
	Script           string `json:"script" bigquery:"script"`
}

// CastMember is a mapping object from a character to an actor
type CastMember struct {
	CharacterName string `json:"character_name" bigquery:"character_name"`
	ActorName     string `json:"actor_name" bigquery:"actor_name"`
}

// CastDialog is a mapping from a character to the spoken word in a scene
type CastDialog struct {
	CharacterName string `json:"character_name" bigquery:"character_name"`
	Dialog        string `json:"dialog" bigquery:"dialog"`
}

// SceneEmbedding captures the summary embedding of a media file, good for general searches.
type SceneEmbedding struct {
	Id             string    `json:"id" bigquery:"media_id"`
	SequenceNumber int       `json:"sequence_number" bigquery:"sequence_number"`
	ModelName      string    `json:"model_name" bigquery:"model_name"`
	Embeddings     []float64 `json:"embeddings" bigquery:"embeddings"`
}

func NewSceneEmbedding(
	mediaId string,
	sequenceNumber int,
	modelName string) *SceneEmbedding {

	return &SceneEmbedding{
		Id:             mediaId,
		SequenceNumber: sequenceNumber,
		ModelName:      modelName,
		Embeddings:     make([]float64, 0),
	}
}


================================================================
File: internal/core/model/test/persistent_test.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package model_test

import (
	"testing"
	"time"

	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
)

func TestNewMedia(t *testing.T) {
	fileName := "test-file.mp4"
	media := model.NewMedia(fileName)

	// Use a UUID 5
	generatedID := uuid.NewSHA1(uuid.NameSpaceURL, ([]byte)(fileName))

	assert.Equal(t, generatedID.String(), media.Id)
	assert.WithinDuration(t, time.Now(), media.CreateDate, time.Second)
	assert.Equal(t, 0, len(media.Cast))
	assert.Equal(t, 0, len(media.Scenes))
}

func TestNewSceneEmbedding(t *testing.T) {
	mediaId := "test-media-id"
	sequenceNumber := 1
	modelName := "test-model"

	embedding := model.NewSceneEmbedding(mediaId, sequenceNumber, modelName)

	assert.Equal(t, mediaId, embedding.Id)
	assert.Equal(t, sequenceNumber, embedding.SequenceNumber)
	assert.Equal(t, modelName, embedding.ModelName)
	assert.Equal(t, 0, len(embedding.Embeddings))
}


================================================================
File: internal/core/model/transient.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package model

// These objects are used in memory via workflows, but are not persisted to the dataset

// MediaFormatFilter is a simple video format object expressing the intended output
// and the destination width
type MediaFormatFilter struct {
	Format string
	Width  string
}

type TimeSpan struct {
	Start string `json:"start"`
	End   string `json:"end"`
}

type MediaSummary struct {
	Title           string        `json:"title"`
	Category        string        `json:"category"`
	Summary         string        `json:"summary"`
	LengthInSeconds int           `json:"length_in_seconds"`
	MediaUrl        string        `json:"media_url,omitempty"`
	Director        string        `json:"director,omitempty"`
	ReleaseYear     int           `json:"release_year,omitempty"`
	Genre           string        `json:"genre,omitempty"`
	Rating          string        `json:"rating,omitempty"`
	Cast            []*CastMember `json:"cast,omitempty"`
	SceneTimeStamps []*TimeSpan   `json:"scene_time_stamps,omitempty"`
}

type SceneMatchResult struct {
	MediaId        string `json:"media_id" bigquery:"media_id"`
	SequenceNumber int    `json:"sequence_number" bigquery:"sequence_number"`
}


================================================================
File: internal/core/services/media.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package services

import (
	"context"
	"fmt"
	"strings"
	"time"

	"cloud.google.com/go/bigquery"
	credentials "cloud.google.com/go/iam/credentials/apiv1"

	//	"cloud.google.com/go/iam/credentials/apiv1/credentialspb"
	"cloud.google.com/go/storage"
	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
	// credentialspb "google.golang.org/genproto/googleapis/iam/credentials/v1"
)

type MediaService struct {
	BigqueryClient *bigquery.Client
	StorageClient  *storage.Client // This field was missing
	IAMClient      *credentials.IamCredentialsClient
	SignerEmail    string
	DatasetName    string
	MediaTable     string
}

// GetFQN returns the fully qualified BQ Table Name
func (s *MediaService) GetFQN() string {
	return strings.Replace(s.BigqueryClient.Dataset(s.DatasetName).Table(s.MediaTable).FullyQualifiedName(), ":", ".", -1)
}

// Get returns a media object by id, or an error if it doesn't exist
func (s *MediaService) Get(ctx context.Context, id string) (media *model.Media, err error) {
	queryText := fmt.Sprintf(QryFindMediaById, s.GetFQN(), id)
	q := s.BigqueryClient.Query(queryText)
	itr, err := q.Read(ctx)
	if err != nil {
		return media, err
	}
	// Since this should only return a single result
	media = &model.Media{}
	err = itr.Next(media)
	return media, err
}

// GetScene returns a scene in a specified media type by its sequence number
func (s *MediaService) GetScene(ctx context.Context, id string, sceneSequence int) (scene *model.Scene, err error) {
	fqMediaTableName := strings.Replace(s.BigqueryClient.Dataset(s.DatasetName).Table(s.MediaTable).FullyQualifiedName(), ":", ".", -1)
	queryText := fmt.Sprintf(QryGetScene, fqMediaTableName, id, sceneSequence)
	q := s.BigqueryClient.Query(queryText)
	itr, err := q.Read(ctx)
	if err != nil {
		return scene, err
	}
	scene = &model.Scene{}
	// Since this should only return a single result
	err = itr.Next(scene)
	return scene, err
}

// GenerateSignedURL creates a time-limited URL to access a private GCS object.
func (s *MediaService) GenerateSignedURL(ctx context.Context, gcsURI string, expires time.Duration) (string, error) {
	// Parse the GCS URI to get the bucket and object name.
	// Example URI: https://storage.mtls.cloud.google.com/bucket_name/Serenity.mp4
	parts := strings.Split(strings.TrimPrefix(gcsURI, "https://storage.mtls.cloud.google.com/"), "/")
	if len(parts) < 2 {
		return "", fmt.Errorf("invalid GCS URI: %s", gcsURI)
	}
	bucketName := parts[0]
	objectName := strings.Join(parts[1:], "/")
	print("---------------------------------------------------\n")
	print(fmt.Sprintf("Google Project ID is %s\n", s.SignerEmail))
	print(fmt.Sprintf("Email is %s\n", s.SignerEmail))
	print(fmt.Sprintf("projects/-/serviceAccounts/%s\n", s.SignerEmail))
	print("---------------------------------------------------\n")
	opts := &storage.SignedURLOptions{
		Scheme:  storage.SigningSchemeV4,
		Method:  "GET",
		Expires: time.Now().Add(expires),
		// Use the IAM credentials client to sign the bytes for the URL.
		// This is the recommended approach for services running on GCP.

		// SignBytes: func(b []byte) ([]byte, error) {
		// 	req := &credentialspb.SignBlobRequest{
		// 		Name:    fmt.Sprintf("projects/-/serviceAccounts/%s", s.SignerEmail),
		// 		Payload: b,
		// 	}
		// 	resp, err := s.IAMClient.SignBlob(ctx, req)
		// 	if err != nil {
		// 		return nil, err
		// 	}
		// 	return resp.SignedBlob, nil
	}
	u, err := s.StorageClient.Bucket(bucketName).SignedURL(objectName, opts)
	if err != nil {
		return "", fmt.Errorf("Bucket(%q).SignedURL: %w", bucketName, err)
	}

	fmt.Println("Generated GET signed URL:")
	fmt.Printf("%s\n", u)
	fmt.Println("You can use this URL with any user agent, for example:")
	fmt.Print("curl \n", u)
	return u, nil

	// url, err := s.StorageClient.Bucket(bucketName).Object(objectName).SignedURL(ctx, opts)
	// if err != nil {
	// 	return "", fmt.Errorf("failed to sign URL: %w", err)
	// }
	// return url, nil
	// Use the top-level SignedURL function for V4 signing.
	// print("just before returning from GenerateSignedURL\n")
	// return storage.SignedURL(bucketName, objectName, opts)
}


================================================================
File: internal/core/services/queries.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package services

const (
	QrySequenceKnn   = "SELECT base.media_id, base.sequence_number FROM VECTOR_SEARCH(TABLE `%s`, 'embeddings', (SELECT [ %s ] as embed), top_k => %d, distance_type => 'EUCLIDEAN') ORDER BY distance asc"
	QryFindMediaById = "SELECT * from `%s` WHERE id = '%s'"
	QryGetScene      = "SELECT sequence, start, `end`, script FROM `%s`, UNNEST(scenes) as s WHERE id = '%s' and s.sequence = %d"
)


================================================================
File: internal/core/services/search.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package services

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"cloud.google.com/go/bigquery"
	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/iterator"
)

type SearchService struct {
	BigqueryClient *bigquery.Client
	EmbeddingModel *genai.EmbeddingModel
	DatasetName    string
	MediaTable     string
	EmbeddingTable string
}

func (s *SearchService) FindScenes(ctx context.Context, query string, maxResults int) (out []*model.SceneMatchResult, err error) {
	out = make([]*model.SceneMatchResult, 0)
	searchEmbeddings, _ := s.EmbeddingModel.EmbedContent(ctx, genai.Text(query))

	fqEmbeddingTable := strings.Replace(s.BigqueryClient.Dataset(s.DatasetName).Table(s.EmbeddingTable).FullyQualifiedName(), ":", ".", -1)

	var stringArray []string
	for _, f := range searchEmbeddings.Embedding.Values {
		stringArray = append(stringArray, strconv.FormatFloat(float64(f), 'f', -1, 64))
	}

	queryText := fmt.Sprintf(QrySequenceKnn, fqEmbeddingTable, strings.Join(stringArray, ","), maxResults)

	q := s.BigqueryClient.Query(queryText)
	itr, err := q.Read(ctx)
	if err != nil {
		return out, err
	}

	for {
		var r = &model.SceneMatchResult{}
		err := itr.Next(r)
		if err == iterator.Done {
			break
		}
		out = append(out, r)
	}
	return out, err
}


================================================================
File: internal/core/services/test/search_service_test.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package services_test

import (
	"context"
	"fmt"
	"testing"

	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"github.com/jaycherian/gcp-go-media-search/internal/core/services"
	"github.com/jaycherian/gcp-go-media-search/internal/testutil"
	"github.com/zeebo/assert"
)

func TestSearchService(t *testing.T) {
	ctx, cancel := context.WithCancel(context.Background())
	// This deferral will automatically close the client that was build from
	// the same context
	defer cancel()

	// Get the config file
	config := test.GetConfig()

	cloudClients, err := cloud.NewCloudServiceClients(ctx, config)
	test.HandleErr(err, t)
	defer cloudClients.Close()

	genModel := cloudClients.AgentModels["creative-flash"]
	assert.NotNil(t, genModel)

	embeddingModel := cloudClients.EmbeddingModels["multi-lingual"]

	searchService := &services.SearchService{
		BigqueryClient: cloudClients.BiqQueryClient,
		EmbeddingModel: embeddingModel,
		DatasetName:    "media_ds",
		MediaTable:     "media",
		EmbeddingTable: "scene_embeddings",
	}

	out, err := searchService.FindScenes(ctx, "Scenes that Woody Harrelson", 5)

	if err != nil {
		t.Error(err)
	}

	assert.Nil(t, err)

	for _, o := range out {
		fmt.Printf("%s - %d\n", o.MediaId, o.SequenceNumber)
	}
}


================================================================
File: internal/core/workflow/media_embedding_generator_workflow.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package workflow

import (
	goctx "context"
	"errors"
	"fmt"
	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	"strings"
	"time"

	"cloud.google.com/go/bigquery"
	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/iterator"
)

type MediaEmbeddingGeneratorWorkflow struct {
	cor.BaseCommand
	genaiEmbedding         *genai.EmbeddingModel
	bigqueryClient         *bigquery.Client
	dataset                string
	mediaTable             string
	embeddingTable         string
	findEligibleMediaQuery string
}

func (m *MediaEmbeddingGeneratorWorkflow) StartTimer() {
	tracer := otel.Tracer("embedding-batch")
	ticker := time.NewTicker(60 * time.Second)
	closeTicker := make(chan struct{})

	// Create a timer to run embedding checks every 60 seconds
	go func(m *MediaEmbeddingGeneratorWorkflow) {
		for {
			select {
			case <-ticker.C:
				traceCtx, span := tracer.Start(goctx.Background(), "media-embeddings")
				chainCtx := cor.NewBaseContext()
				chainCtx.SetContext(traceCtx)
				m.Execute(chainCtx)
				if chainCtx.HasErrors() {
					span.SetStatus(codes.Error, "failed to execute embedding chain")
				} else {
					span.SetStatus(codes.Ok, "executed embeddings")
				}
				span.End()
			case <-closeTicker:
				ticker.Stop()
				return
			}
		}
	}(m)
}

func NewMediaEmbeddingGeneratorWorkflow(config *cloud.Config, serviceClients *cloud.ServiceClients) *MediaEmbeddingGeneratorWorkflow {

	fqMediaTableName := strings.Replace(serviceClients.BiqQueryClient.Dataset(config.BigQueryDataSource.DatasetName).Table(config.BigQueryDataSource.MediaTable).FullyQualifiedName(), ":", ".", -1)
	fqEmbeddingTable := strings.Replace(serviceClients.BiqQueryClient.Dataset(config.BigQueryDataSource.DatasetName).Table(config.BigQueryDataSource.EmbeddingTable).FullyQualifiedName(), ":", ".", -1)
	query := fmt.Sprintf("SELECT * FROM `%s` WHERE ID NOT IN (SELECT MEDIA_ID FROM `%s`)", fqMediaTableName, fqEmbeddingTable)

	return &MediaEmbeddingGeneratorWorkflow{
		BaseCommand:            *cor.NewBaseCommand("media-embedding-generator"),
		genaiEmbedding:         serviceClients.EmbeddingModels["multi-lingual"],
		bigqueryClient:         serviceClients.BiqQueryClient,
		dataset:                config.BigQueryDataSource.DatasetName,
		mediaTable:             config.BigQueryDataSource.MediaTable,
		embeddingTable:         config.BigQueryDataSource.EmbeddingTable,
		findEligibleMediaQuery: query,
	}
}

func (m *MediaEmbeddingGeneratorWorkflow) IsExecutable(_ cor.Context) bool {
	return true
}

func (m *MediaEmbeddingGeneratorWorkflow) Execute(context cor.Context) {
	q := m.bigqueryClient.Query(m.findEligibleMediaQuery)
	it, err := q.Read(context.GetContext())
	if err != nil {
		context.AddError(m.GetName(), err)
		return
	}

	for {
		var value model.Media
		err := it.Next(&value)
		if errors.Is(err, iterator.Done) {
			break
		}
		if err != nil {
			context.AddError(m.GetName(), err)
			return
		}

		toInsert := make([]*model.SceneEmbedding, 0)

		for _, scene := range value.Scenes {
			in := model.NewSceneEmbedding(value.Id, scene.SequenceNumber, m.genaiEmbedding.Name())
			resp, err := m.genaiEmbedding.EmbedContent(context.GetContext(), genai.Text(scene.Script))
			if err != nil {
				context.AddError(m.GetName(), err)
				return
			}
			for _, f := range resp.Embedding.Values {
				in.Embeddings = append(in.Embeddings, float64(f))
			}
			toInsert = append(toInsert, in)
		}

		inserter := m.bigqueryClient.Dataset(m.dataset).Table(m.embeddingTable).Inserter()
		if err := inserter.Put(context.GetContext(), toInsert); err != nil {
			context.AddError(m.GetName(), err)
			return
		}
	}
}


================================================================
File: internal/core/workflow/media_reader_workflow.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package workflow

import (
	"cloud.google.com/go/bigquery"
	"cloud.google.com/go/storage"
	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"github.com/jaycherian/gcp-go-media-search/internal/core/commands"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"github.com/google/generative-ai-go/genai"
	"text/template"
	"time"
)

type MediaReaderWorkflow struct {
	cor.BaseCommand
	config          *cloud.Config
	bigqueryClient  *bigquery.Client
	genaiClient     *genai.Client
	genaiModel      *cloud.QuotaAwareGenerativeAIModel
	storageClient   *storage.Client
	numberOfWorkers int
	summaryTemplate *template.Template
	sceneTemplate   *template.Template
	chain           cor.Chain
}

func (m *MediaReaderWorkflow) Execute(context cor.Context) {
	m.chain.Execute(context)
}

func (m *MediaReaderWorkflow) initializeChain() {
	const SummaryOutputParamName = "__summary_output__"
	const SceneOutputParamName = "__scene_output__"
	const MediaOutputParamName = "__media_output__"

	out := cor.NewBaseChain(m.GetName())

	// Convert the Message to an Object
	out.AddCommand(commands.NewMediaTriggerToGCSObject("media-trigger-to-gcs-object"))

	// Write a temp file
	out.AddCommand(commands.NewGCSToTempFile("gcs-to-temp-file", m.storageClient, "media-summary-"))

	// Upload the file to file service
	out.AddCommand(commands.NewMediaUpload("media-upload", m.genaiClient, 300*time.Second))

	// Generate Summary
	out.AddCommand(commands.NewMediaSummaryCreator("generate-media-summary", m.config, m.genaiModel, m.summaryTemplate))

	// Convert the JSON to a struct and save to the summaryOutputParam
	out.AddCommand(commands.NewMediaSummaryJsonToStruct("convert-media-summary", SummaryOutputParamName))

	// Create the scene extraction command
	sceneExtractor := commands.NewSceneExtractor("extract-media-scenes", m.genaiModel, m.sceneTemplate, m.numberOfWorkers)
	sceneExtractor.BaseCommand.OutputParamName = SceneOutputParamName
	out.AddCommand(sceneExtractor)

	// Assemble the output into a single media object
	out.AddCommand(commands.NewMediaAssembly("assemble-media-scenes", SummaryOutputParamName, SceneOutputParamName, MediaOutputParamName))

	// Save media object to big query for async embedding job
	out.AddCommand(commands.NewMediaPersistToBigQuery(
		"write-to-bigquery",
		m.bigqueryClient,
		m.config.BigQueryDataSource.DatasetName,
		m.config.BigQueryDataSource.MediaTable, MediaOutputParamName))

	// Clean up the temporary media created by the job
	out.AddCommand(commands.NewMediaCleanup("cleanup-file-system", m.genaiClient))
	m.chain = out
}

func NewMediaReaderPipeline(
	config *cloud.Config,
	serviceClients *cloud.ServiceClients,
	agentModelName string) *MediaReaderWorkflow {

	summaryTemplate, err := template.New("summary-template").Parse(config.PromptTemplates.SummaryPrompt)
	if err != nil {
		panic(err)
	}
	sceneTemplate, err := template.New("scene-template").Parse(config.PromptTemplates.ScenePrompt)
	if err != nil {
		panic(err)
	}

	pipeline := &MediaReaderWorkflow{
		BaseCommand:     *cor.NewBaseCommand("media-reader-pipeline"),
		config:          config,
		bigqueryClient:  serviceClients.BiqQueryClient,
		genaiClient:     serviceClients.GenAIClient,
		genaiModel:      serviceClients.AgentModels[agentModelName],
		storageClient:   serviceClients.StorageClient,
		numberOfWorkers: config.Application.ThreadPoolSize,
		summaryTemplate: summaryTemplate,
		sceneTemplate:   sceneTemplate,
	}
	pipeline.initializeChain()
	return pipeline
}


================================================================
File: internal/core/workflow/media_resize_workflow.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package workflow

import (
	"cloud.google.com/go/storage"
	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"github.com/jaycherian/gcp-go-media-search/internal/core/commands"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
	"strings"
)

// DefaultFfmpegCommand The default command requires ffmpeg on the path of the running computer.
const DefaultFfmpegCommand = "ffmpeg"

// DefaultWidth The default width is the recommended size.
const DefaultWidth = "240"

type MediaResizeWorkflow struct {
	cor.BaseCommand
	ffmpegCommand    string
	videoFormat      *model.MediaFormatFilter
	storageClient    *storage.Client
	outputBucketName string
	chain            cor.Chain
}

func (m *MediaResizeWorkflow) Execute(context cor.Context) {
	m.chain.Execute(context)
}

func (m *MediaResizeWorkflow) initializeChain() {
	out := cor.NewBaseChain(m.GetName())

	// Convert the Message to an Object
	out.AddCommand(commands.NewMediaTriggerToGCSObject("gcs-topic-listener"))

	// Write a temp file
	out.AddCommand(commands.NewGCSToTempFile("copy-from-gcs-to-temp", m.storageClient, "ffmpeg-tmp-"))

	// Run FFMpeg
	out.AddCommand(commands.NewFFMpegCommand("video-resize", m.ffmpegCommand, m.videoFormat.Width))

	// Write to a GCS Bucket
	out.AddCommand(commands.NewGCSFileUpload("resized-file-upload-to-gcs", m.storageClient, m.outputBucketName))

	m.chain = out
}

func NewMediaResizeWorkflow(
	config *cloud.Config,
	serviceClients *cloud.ServiceClients,
	ffmpegCommand string,
	videoFormat *model.MediaFormatFilter) *MediaResizeWorkflow {

	// Ensure the FFMPegCommand is set, otherwise use the default
	if len(strings.Trim(ffmpegCommand, " ")) == 0 {
		ffmpegCommand = DefaultFfmpegCommand
	}

	// Set the default width
	if videoFormat == nil {
		videoFormat = &model.MediaFormatFilter{Width: DefaultWidth, Format: "mp4"}
	}

	out := &MediaResizeWorkflow{
		BaseCommand:      *cor.NewBaseCommand("media-resize-workflow"),
		ffmpegCommand:    ffmpegCommand,
		videoFormat:      videoFormat,
		storageClient:    serviceClients.StorageClient,
		outputBucketName: config.Storage.LowResOutputBucket}
	out.initializeChain()
	return out
}


================================================================
File: internal/core/workflow/test/base_test.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package workflow_test

import (
	"context"
	"os"
	"testing"

	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"github.com/jaycherian/gcp-go-media-search/internal/telemetry"
	"github.com/jaycherian/gcp-go-media-search/internal/testutil"
	"go.opentelemetry.io/contrib/bridges/otelslog"
	"go.opentelemetry.io/otel"
)

var err error
var cloudClients *cloud.ServiceClients
var ctx context.Context
var config *cloud.Config

const tName = "cloud.google.com/media/tests/workflow"

var (
	tracer = otel.Tracer(tName)
	logger = otelslog.NewLogger(tName)
)

func TestMain(m *testing.M) {
	ctx, cancel := context.WithCancel(context.Background())
	// This deferral will automatically close the client that was build from
	// the same context
	defer cancel()

	// Get the config file
	config = test.GetConfig()

	telemetry.SetupLogging()
	shutdown, err := telemetry.SetupOpenTelemetry(ctx, config)
	if err != nil {
		panic(err)
	}

	cloudClients, err = cloud.NewCloudServiceClients(ctx, config)
	if err != nil {
		panic(err)
	}
	defer cloudClients.Close()

	logger.Info("completed test setup")

	exitCode := m.Run()
	err = shutdown(ctx)
	if err != nil {
		return
	}
	os.Exit(exitCode)
}


================================================================
File: internal/core/workflow/test/media_embedding_test.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package workflow_test

import (
	"fmt"
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"testing"

	"github.com/jaycherian/gcp-go-media-search/internal/core/workflow"
	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/otel/codes"
)

func TestMediaEmbeddings(t *testing.T) {
	traceCtx, span := tracer.Start(ctx, "generate_embeddings")
	defer span.End()

	chainCtx := cor.NewBaseContext()
	chainCtx.SetContext(traceCtx)

	embeddingWorkflow := workflow.NewMediaEmbeddingGeneratorWorkflow(config, cloudClients)
	embeddingWorkflow.Execute(chainCtx)

	for _, e := range chainCtx.GetErrors() {
		fmt.Printf("Error: %v \n", e)
	}

	assert.False(t, chainCtx.HasErrors())
	span.SetStatus(codes.Ok, "success")
	assert.Nil(t, err)
}


================================================================
File: internal/core/workflow/test/media_ingestion_test.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package workflow_test

import (
	"fmt"
	"log"
	"testing"

	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"github.com/jaycherian/gcp-go-media-search/internal/core/workflow"
	"github.com/jaycherian/gcp-go-media-search/internal/testutil"
	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/otel/codes"
)

func TestMediaChain(t *testing.T) {
	traceCtx, span := tracer.Start(ctx, "media-ingestion-test")
	defer span.End()

	mediaIngestion := workflow.NewMediaReaderPipeline(config, cloudClients, "creative-flash")

	chainCtx := cor.NewBaseContext()
	chainCtx.SetContext(traceCtx)
	chainCtx.Add(cor.CtxIn, test.GetTestLowResMessageText())

	mediaIngestion.Execute(chainCtx)

	for k, err := range chainCtx.GetErrors() {
		fmt.Printf("Error: (%s): %v\n", k, err)
	}

	if chainCtx.HasErrors() {
		span.SetStatus(codes.Error, "failed to execute media ingestion test")
	}

	assert.False(t, chainCtx.HasErrors())

	span.SetStatus(codes.Ok, "passed - media ingestion test")

	log.Println(chainCtx.Get("MEDIA"))
}


================================================================
File: internal/core/workflow/test/media_resize_test.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package workflow_test

import (
	"github.com/jaycherian/gcp-go-media-search/internal/core/cor"
	"github.com/jaycherian/gcp-go-media-search/internal/core/model"
	"github.com/jaycherian/gcp-go-media-search/internal/core/workflow"
	"github.com/jaycherian/gcp-go-media-search/internal/testutil"
	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/otel/codes"
	"log"
	"testing"
)

func TestFFMpegCommand(t *testing.T) {
	traceContext, span := tracer.Start(ctx, "media-resize-test")
	defer span.End()

	mediaResizeWorkflow := workflow.NewMediaResizeWorkflow(config, cloudClients, "bin/ffmpeg", &model.MediaFormatFilter{Width: "240"})

	// Create the context
	chainCtx := cor.NewBaseContext()
	chainCtx.SetContext(traceContext)
	chainCtx.Add(cor.CtxIn, test.GetTestHighResMessageText())

	// This assertion insures the command can be executed
	assert.True(t, mediaResizeWorkflow.IsExecutable(chainCtx))
	mediaResizeWorkflow.Execute(chainCtx)

	for _, err := range chainCtx.GetErrors() {
		log.Printf("error in chain: %v", err.Error())
	}

	if chainCtx.HasErrors() {
		span.SetStatus(codes.Error, "failed - media-resize-test")
	}

	assert.False(t, chainCtx.HasErrors())
	span.SetStatus(codes.Ok, "passed - media-resize-test")
}


================================================================
File: internal/telemetry/setup_logging.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package telemetry

import (
	"context"
	"io"
	"log"
	"log/slog"
	"os"

	"go.opentelemetry.io/otel/trace"
)

type spanContextLogHandler struct {
	slog.Handler
}

func handlerWithSpanContext(handler slog.Handler) *spanContextLogHandler {
	return &spanContextLogHandler{Handler: handler}
}

func (t *spanContextLogHandler) Handle(ctx context.Context, record slog.Record) error {
	// Get the SpanContext from the golang Context.
	if s := trace.SpanContextFromContext(ctx); s.IsValid() {
		// Add trace context attributes following Cloud Logging structured log format described
		// in https://cloud.google.com/logging/docs/structured-logging#special-payload-fields

		record.AddAttrs(
			slog.Any("logging.googleapis.com/trace", s.TraceID()),
		)
		record.AddAttrs(
			slog.Any("logging.googleapis.com/spanId", s.SpanID()),
		)
		record.AddAttrs(
			slog.Bool("logging.googleapis.com/trace_sampled", s.TraceFlags().IsSampled()),
		)
	}
	return t.Handler.Handle(ctx, record)
}

func replacer(_ []string, a slog.Attr) slog.Attr {
	// Rename attribute keys to match Cloud Logging structured log format
	switch a.Key {
	case slog.LevelKey:
		a.Key = "severity"
		// Map slog.Level string values to Cloud Logging LogSeverity
		// https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#LogSeverity
		if level := a.Value.Any().(slog.Level); level == slog.LevelWarn {
			a.Value = slog.StringValue("WARNING")
		}
	case slog.TimeKey:
		a.Key = "timestamp"
	case slog.MessageKey:
		a.Key = "message"
	}
	return a
}

func SetupLogging() {
	// Create a multi writer
	file, _ := os.Create("app.log")
	multiWriter := io.MultiWriter(os.Stdout, file)

	// Set output to standard output (instead of the default standard error)
	log.SetOutput(multiWriter)

	// Set a prefix for log messages
	log.SetPrefix("[INFO] ")

	// Add flags for date and time
	log.SetFlags(log.Ldate | log.Ltime)

	// Setup the SLOG behavior
	// Use json as our base logging format.
	jsonHandler := slog.NewJSONHandler(multiWriter, &slog.HandlerOptions{ReplaceAttr: replacer})

	// Add span context attributes when Context is passed to logging calls.
	instrumentedHandler := handlerWithSpanContext(jsonHandler)

	// Set this handler as the global slog handler.
	slog.SetDefault(slog.New(instrumentedHandler))
	slog.SetLogLoggerLevel(slog.LevelInfo)
}


================================================================
File: internal/telemetry/setup_trace.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package telemetry

import (
	"context"
	"errors"
	"go.opentelemetry.io/otel/sdk/metric"
	"log"
	"log/slog"

	mexporter "github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric"
	telemetryexporter "github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/trace"

	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
	"go.opentelemetry.io/contrib/detectors/gcp"
	"go.opentelemetry.io/contrib/propagators/autoprop"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/sdk/resource"
	"go.opentelemetry.io/otel/sdk/trace"
	semaphoreconversion "go.opentelemetry.io/otel/semconv/v1.4.0"
)

func SetupOpenTelemetry(ctx context.Context, config *cloud.Config) (shutdown func(context.Context) error, err error) {
	var shutdownFuncs []func(context.Context) error

	// shutdown combines shutdown functions from multiple OpenTelemetry
	// components into a single function.
	shutdown = func(ctx context.Context) error {
		var err error
		for _, fn := range shutdownFuncs {
			err = errors.Join(err, fn(ctx))
		}
		shutdownFuncs = nil
		return err
	}

	// Identify your application using resource detection
	res, err := resource.New(ctx,
		// Use the GCP resource detector to detect information about the GCP platform
		resource.WithDetectors(gcp.NewDetector()),
		// Keep the default detectors
		resource.WithTelemetrySDK(),
		// Add your own custom attributes to identify your application
		resource.WithAttributes(
			semaphoreconversion.ServiceNameKey.String(config.Application.Name),
		),
	)
	if errors.Is(err, resource.ErrPartialResource) || errors.Is(err, resource.ErrSchemaURLConflict) {
		slog.Warn("partial resource", "error", err)
	} else if err != nil {
		slog.Error("resource.New", "error", err)
	}

	// Configure Context Propagation to use the default W3C traceparent format
	otel.SetTextMapPropagator(autoprop.NewTextMapPropagator())

	traceExporter, err := telemetryexporter.New(telemetryexporter.WithProjectID(config.Application.GoogleProjectId))
	if err != nil {
		slog.Error("unable to set up tracing", "error", err)
	}

	tp := trace.NewTracerProvider(
		trace.WithBatcher(traceExporter),
		trace.WithResource(res),
	)

	shutdownFuncs = append(shutdownFuncs, tp.Shutdown)
	otel.SetTracerProvider(tp)

	mExporter, err := mexporter.New(
		mexporter.WithProjectID(config.Application.GoogleProjectId),
	)

	if err != nil {
		log.Printf("Failed to create exporter: %v", err)
		return nil, err
	}

	mProvider := metric.NewMeterProvider(
		metric.WithReader(metric.NewPeriodicReader(mExporter)),
	)

	// Setup Namespace Meter
	otel.Meter("github.com/GoogleCloudPlatform/solutions/media")

	shutdownFuncs = append(shutdownFuncs, mProvider.Shutdown)
	otel.SetMeterProvider(mProvider)

	return shutdown, nil
}


================================================================
File: internal/testutil/test.go
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test

import (
	"log"
	"os"
	"testing"

	"github.com/jaycherian/gcp-go-media-search/internal/cloud"
)

type StateManager struct {
	config *cloud.Config
}

var state = &StateManager{}

func HandleErr(err error, t *testing.T) {
	if err != nil {
		t.Errorf("Error reading config file: %v", err)
	}
}

func GetTestHighResMessageText() string {
	return `{
  "kind": "storage#object",
  "id": "media_high_res_resources/test-trailer-001.mp4/1728615848664286",
  "selfLink": "https://www.googleapis.com/storage/v1/b/media_high_res_resources/o/test-trailer-001.mp4",
  "name": "test-trailer-001.mp4",
  "bucket": "media_high_res_resources",
  "generation": "1728615848664286",
  "metageneration": "1",
  "contentType": "video/mp4",
  "timeCreated": "2024-10-11T03:04:08.672Z",
  "updated": "2024-10-11T03:04:08.672Z",
  "storageClass": "STANDARD",
  "timeStorageClassUpdated": "2024-10-11T03:04:08.672Z",
  "size": "259348037",
  "md5Hash": "67c1rAU+1RYZzK5zp8iBkA==",
  "mediaLink": "https://storage.googleapis.com/download/storage/v1/b/media_high_res_resources/o/test-trailer-001.mp4?generation=1728615848664286&alt=media",
  "metadata": { "touch": "18" },
  "crc32c": "IYeSTw==",
  "etag": "CN658+yrhYkDEAE="
	}`
}

func GetTestLowResMessageText() string {
	return `{
  "kind": "storage#object",
  "id": "media_low_res_resources/test-trailer-001.mp4/1728615848664286",
  "selfLink": "https://www.googleapis.com/storage/v1/b/media_low_res_resources/o/test-trailer-001.mp4",
  "name": "test-trailer-001.mp4",
  "bucket": "media_low_res_resources",
  "generation": "1728615848664286",
  "metageneration": "1",
  "contentType": "video/mp4",
  "timeCreated": "2024-10-11T03:04:08.672Z",
  "updated": "2024-10-11T03:04:08.672Z",
  "storageClass": "STANDARD",
  "timeStorageClassUpdated": "2024-10-11T03:04:08.672Z",
  "size": "259348037",
  "md5Hash": "67c1rAU+1RYZzK5zp8iBkA==",
  "mediaLink": "https://storage.googleapis.com/download/storage/v1/b/media_low_res_resources/o/test-trailer-001.mp4?generation=1728615848664286&alt=media",
  "metadata": { "touch": "18" },
  "crc32c": "IYeSTw==",
  "etag": "CN658+yrhYkDEAE="
}
`
}

func SetupOS() (err error) {
	err = os.Setenv(cloud.EnvConfigFilePrefix, "configs")
	if err != nil {
		return err
	}
	err = os.Setenv(cloud.EnvConfigRuntime, "test")
	return err
}

func GetConfig() *cloud.Config {
	if state.config == nil {
		err := SetupOS()
		if err != nil {
			log.Fatalf("failed to setup environment for test: %v\n", err)
		}
		// Create a default cloud config
		config := cloud.NewConfig()
		// Load it from the TOML files
		cloud.LoadConfig(&config)
		state.config = config
	}
	return state.config
}


================================================================
File: owners.txt
================================================================
rmcguinness@google.com
jaycherian@google.com
crgrant@google.com

================================================================
File: reorganize_consolidated.sh
================================================================
#!/bin/bash

# ==============================================================================
# Consolidated Repository Reorganization Script
# ==============================================================================
# This script reorganizes the gcp-go-media-search repository from a Bazel-based
# structure to a more conventional Go and Node.js project structure. It handles
# both file movement and Go import path updates.
#
# WARNING: This script makes significant changes to the file system.
# It is highly recommended to run this on a clean git branch.
#
# USAGE: Run this script from the root of the 'gcp-go-media-search' repository.
#
# $ ./reorganize_consolidated.sh
# ==============================================================================

# Exit immediately if a command exits with a non-zero status.
set -e

echo "Starting repository reorganization..."
echo "Please ensure you are running this from the project root on a clean git branch."
echo "--------------------------------------------------------------------"

# === STEP 1: Create the new directory structure ===
echo "[1/8] Creating new directory structure..."
mkdir -p cmd/server
mkdir -p internal/api
mkdir -p internal/cloud
mkdir -p internal/core/commands
mkdir -p internal/core/cor
mkdir -p internal/core/model
mkdir -p internal/core/services
mkdir -p internal/core/workflow
mkdir -p internal/telemetry
mkdir -p internal/testutil
mkdir -p deployments
mkdir -p web/ui
echo "    -> Done."

# === STEP 2: Move the Go backend source files ===
echo "[2/8] Moving Go backend and library files..."
# Move main package and split the original api_server package
mv web/apps/api_server/api_server.go cmd/server/main.go
mv web/apps/api_server/setup.go cmd/server/
mv web/apps/api_server/listeners.go cmd/server/
mv web/apps/api_server/media.go internal/api/
mv web/apps/api_server/file_upload.go internal/api/
mv web/apps/api_server/dashboard.go internal/api/

# Move the 'pkg' contents into the new 'internal' structure
mv pkg/cloud/* internal/cloud/
mv pkg/cor/* internal/core/cor/
mv pkg/model/* internal/core/model/
mv pkg/telemetry/* internal/telemetry/

# Move commands, services, and workflow to their own packages to avoid collisions
mv pkg/commands/* internal/core/commands/
mv pkg/services/* internal/core/services/
mv pkg/workflow/* internal/core/workflow/
echo "    -> Done."


# === STEP 3: Move Terraform files ===
echo "[3/8] Moving Terraform deployment files..."
mv build/terraform deployments/
echo "    -> Done."

# === STEP 4: Move test files to match the new structure ===
echo "[4/8] Reorganizing test files..."
mkdir -p internal/cloud/test
mkdir -p internal/core/model/test
mkdir -p internal/core/services/test
mkdir -p internal/core/workflow/test

mv test/cloud/* internal/cloud/test/
mv test/model/* internal/core/model/test/
mv test/services/* internal/core/services/test/
mv test/workflow/* internal/core/workflow/test/
mv test/test.go internal/testutil/
echo "    -> Done."


# === STEP 5: Move the React frontend ===
echo "[5/8] Moving React frontend files..."
# Use rsync to robustly move files, including dotfiles
rsync -av --progress web/apps/media-search/ web/ui/ --remove-source-files
echo "    -> Done."


# === STEP 6: Clean up old, now-empty directories ===
echo "[6/8] Cleaning up old directories..."
rm -rf pkg
rm -rf web/apps
rm -rf build
rm -rf test
echo "    -> Done."

# === STEP 7: Delete all Bazel-related files ===
echo "[7/8] Deleting Bazel configuration files..."
find . -name "BUILD.bazel" -type f -delete
find . -name "*.bzl" -type f -delete
find . -name "MODULE.bazel" -type f -delete
find . -name "WORKSPACE" -type f -delete
find . -name ".bazelignore" -type f -delete
find . -name ".bazelrc" -type f -delete
echo "    -> Done."

# === STEP 8: Update Go import paths ===
echo "[8/8] Updating Go module and import paths..."
OLD_MODULE="github.com/GoogleCloudPlatform/solutions/media"
NEW_MODULE="github.com/jaycherian/gcp-go-media-search"

# Update go.mod file
sed -i.bak "s|${OLD_MODULE}|${NEW_MODULE}|g" go.mod

# Find all .go files in the new structure
GO_FILES=$(find cmd internal -name "*.go" -type f)

# Loop through all found .go files and replace old import paths.
for file in $GO_FILES; do
    sed -i.bak "s|${OLD_MODULE}/pkg/cloud|${NEW_MODULE}/internal/cloud|g" "$file"
    sed -i.bak "s|${OLD_MODULE}/pkg/cor|${NEW_MODULE}/internal/core/cor|g" "$file"
    sed -i.bak "s|${OLD_MODULE}/pkg/model|${NEW_MODULE}/internal/core/model|g" "$file"
    sed -i.bak "s|${OLD_MODULE}/pkg/telemetry|${NEW_MODULE}/internal/telemetry|g" "$file"
    sed -i.bak "s|${OLD_MODULE}/pkg/workflow|${NEW_MODULE}/internal/core/workflow|g" "$file"
    sed -i.bak "s|${OLD_MODULE}/pkg/commands|${NEW_MODULE}/internal/core/commands|g" "$file"
    sed -i.bak "s|${OLD_MODULE}/pkg/services|${NEW_MODULE}/internal/core/services|g" "$file"
    sed -i.bak "s|${OLD_MODULE}/test|${NEW_MODULE}/internal/testutil|g" "$file"
done

# Clean up backup files created by sed
find . -name "*.bak" -type f -delete
echo "    -> Done."

echo "--------------------------------------------------------------------"
echo "Reorganization complete!"
echo
echo "--- NEXT STEPS ---"
echo
echo "1. REVIEW GO CHANGES & DEPENDENCIES:"
echo "   - Run 'go mod tidy' to sync dependencies."
echo
echo "2. UPDATE FRONTEND SCRIPTS:"
echo "   - Edit 'web/ui/package.json' to use standard Vite scripts for 'dev', 'build', and 'preview'."
echo "   - Navigate to 'web/ui' and run 'pnpm install'."
echo
echo "3. UPDATE DOCUMENTATION:"
echo "   - Update README.md and other docs with the new, simplified build instructions."
echo
echo "4. REVIEW AND COMMIT:"
echo "   - Carefully review all changes with 'git status' and 'git diff'."
echo "   - Commit the changes to your git branch."




================================================================
File: start-public.sh
================================================================
i#!/bin/bash
# ==============================================================================
# Start Script for Media Search Application
# ==============================================================================
# This script starts both the backend Go server and the frontend Vite server
# for local development.
#
# USAGE: Run this script from the root of the project.
# $ ./start.sh
# ==============================================================================

# Exit the script if any command fails
set -e

echo "Starting Go backend server in the background..."
echo "Backend logs will be written to backend.log"

# Run the Go server in the background (&) and redirect its output.
go run ./cmd/server > backend.log 2>&1 &

# Get the Process ID (PID) of the last background command.
BACKEND_PID=$!
echo "Backend server started with PID: $BACKEND_PID"

# Define a cleanup function to be called on script exit.
cleanup() {
    echo
    echo "Shutting down backend server (PID: $BACKEND_PID)..."
    # The 'kill' command sends a signal to the process.
    # By default, it sends SIGTERM, which allows the Go server's
    # graceful shutdown logic to run.
    kill $BACKEND_PID
    echo "Backend server shut down."
}

# 'trap' catches signals. When this script receives an EXIT signal (e.g., from
# Ctrl+C or when it finishes), it will run the 'cleanup' function.
trap cleanup EXIT

# Navigate to the UI directory to run the frontend commands.
cd web/ui

echo "Installing frontend dependencies (if needed)..."
pnpm install

echo "Starting Vite frontend server in the foreground..."
echo "The UI will be accessible on your local network and potentially the public internet."
echo "Press Ctrl+C to stop both servers."

# Start the Vite dev server in the foreground.
# The `--host` flag makes the server listen on all network interfaces (0.0.0.0),
# not just localhost, making it accessible from other devices on the network.
# The double dash (`--`) is used to pass the flag through pnpm to the underlying vite command.
pnpm dev -- --host

# When `pnpm dev` is stopped (Ctrl+C), the script will exit,
# triggering the `trap` and running the `cleanup` function.



================================================================
File: start.sh
================================================================
#!/bin/bash
# ==============================================================================
# Start Script for Media Search Application
# ==============================================================================
# This script starts both the backend Go server and the frontend Vite server
# for local development.
#
# USAGE: Run this script from the root of the project.
# $ ./start.sh
# ==============================================================================

# Exit the script if any command fails
set -e

echo "Starting Go backend server in the background..."
echo "Backend logs will be written to backend.log"

# Run the Go server in the background (&) and redirect its output.
go run ./cmd/server > backend.log 2>&1 &

# Get the Process ID (PID) of the last background command.
BACKEND_PID=$!
echo "Backend server started with PID: $BACKEND_PID"

# Define a cleanup function to be called on script exit.
cleanup() {
    echo
    echo "Shutting down backend server (PID: $BACKEND_PID)..."
    # The 'kill' command sends a signal to the process.
    # By default, it sends SIGTERM, which allows the Go server's
    # graceful shutdown logic to run.
    kill $BACKEND_PID
    echo "Backend server shut down."
}

# 'trap' catches signals. When this script receives an EXIT signal (e.g., from
# Ctrl+C or when it finishes), it will run the 'cleanup' function.
trap cleanup EXIT

# Navigate to the UI directory to run the frontend commands.
cd web/ui

echo "Installing frontend dependencies (if needed)..."
pnpm install

echo "Starting Vite frontend server in the foreground..."
echo "Press Ctrl+C to stop both servers."

# Start the Vite dev server in the foreground. The script will pause here
# until this command is terminated by the user.
pnpm dev

# When `pnpm dev` is stopped (Ctrl+C), the script will exit,
# triggering the `trap` and running the `cleanup` function.



================================================================
File: start_frontend.sh
================================================================
#!/bin/bash
# ==============================================================================
# Start Script for Media Search Application
# ==============================================================================
# This script starts both the backend Go server and the frontend Vite server
# for local development.
#
# USAGE: Run this script from the root of the project.
# $ ./start.sh
# ==============================================================================

# Exit the script if any command fails
set -e



# 'trap' catches signals. When this script receives an EXIT signal (e.g., from
# Ctrl+C or when it finishes), it will run the 'cleanup' function.
trap cleanup EXIT

# Navigate to the UI directory to run the frontend commands.
cd web/ui

echo "Installing frontend dependencies (if needed)..."
pnpm install

echo "Starting Vite frontend server in the foreground..."
echo "Press Ctrl+C to stop both servers."

# Start the Vite dev server in the foreground. The script will pause here
# until this command is terminated by the user.
pnpm dev

# When `pnpm dev` is stopped (Ctrl+C), the script will exit,
# triggering the `trap` and running the `cleanup` function.



================================================================
File: web/ui/.gitignore
================================================================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


================================================================
File: web/ui/.npmrc
================================================================
version=v20.15.0
hoist=false

================================================================
File: web/ui/README.md
================================================================
# Media Search

This is a super simple web site to show the results in a graphical way.

```shell
# Start the web services in one terminal (from project root):
bazel run //web/apps/api_server

# Open another terminal
# Start in the directory
cd web/apps/media-search
# Build
npm install
# Start the server
npx vite
```

================================================================
File: web/ui/eslint.config.js
================================================================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
    {ignores: ['dist']},
    {
        extends: [js.configs.recommended, ...tseslint.configs.recommended],
        files: ['**/*.{ts,tsx}'],
        languageOptions: {
            ecmaVersion: 2020,
            globals: globals.browser,
        },
        plugins: {
            'react-hooks': reactHooks,
            'react-refresh': reactRefresh,
        },
        rules: {
            ...reactHooks.configs.recommended.rules,
            'react-refresh/only-export-components': [
                'warn',
                {allowConstantExport: true},
            ],
        },
    },
)


================================================================
File: web/ui/index.html
================================================================
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
    <title>Media Search</title>

    <link href="https://fonts.googleapis.com" rel="preconnect"/>
    <link crossorigin href="https://fonts.gstatic.com" rel="preconnect"/>
    <link href="https://fonts.googleapis.com/css2?family=Google+Sans:wght@400;500;700" rel="stylesheet">
    <link
            href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
            rel="stylesheet"
    />
    <link
            href="https://fonts.googleapis.com/icon?family=Material+Icons"
            rel="stylesheet"
    />
</head>
<body>
<div id="root"></div>
<script src="/src/main.tsx" type="module"></script>
</body>
</html>


================================================================
File: web/ui/pnpm-lock.yaml
================================================================
lockfileVersion: '6.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

dependencies:
  '@emotion/react':
    specifier: ^11.13.3
    version: 11.13.3(@types/react@18.3.12)(react@18.3.1)
  '@emotion/styled':
    specifier: ^11.13.0
    version: 11.13.0(@emotion/react@11.13.3)(@types/react@18.3.12)(react@18.3.1)
  '@mui/icons-material':
    specifier: ^6.1.6
    version: 6.1.6(@mui/material@6.1.6)(@types/react@18.3.12)(react@18.3.1)
  '@mui/material':
    specifier: ^6.1.6
    version: 6.1.6(@emotion/react@11.13.3)(@emotion/styled@11.13.0)(@types/react@18.3.12)(react-dom@18.3.1)(react@18.3.1)
  axios:
    specifier: ^1.7.7
    version: 1.7.7
  react:
    specifier: ^18.3.1
    version: 18.3.1
  react-dom:
    specifier: ^18.3.1
    version: 18.3.1(react@18.3.1)
  react-drag-drop-files:
    specifier: ^2.4.0
    version: 2.4.0(react-dom@18.3.1)(react@18.3.1)
  react-router-dom:
    specifier: ^6.27.0
    version: 6.27.0(react-dom@18.3.1)(react@18.3.1)

devDependencies:
  '@types/react':
    specifier: ^18.3.12
    version: 18.3.12
  '@types/react-dom':
    specifier: ^18.3.1
    version: 18.3.1
  '@vitejs/plugin-react':
    specifier: ^4.3.3
    version: 4.3.3(vite@5.4.10)
  '@vitejs/plugin-react-swc':
    specifier: ^3.7.1
    version: 3.7.1(vite@5.4.10)
  eslint:
    specifier: ^9.14.0
    version: 9.14.0
  eslint-plugin-react-hooks:
    specifier: ^5.1.0-rc-fb9a90fa48-20240614
    version: 5.1.0-rc-fb9a90fa48-20240614(eslint@9.14.0)
  eslint-plugin-react-refresh:
    specifier: ^0.4.14
    version: 0.4.14(eslint@9.14.0)
  tsconfig-to-swcconfig:
    specifier: ^2.8.1
    version: 2.8.1
  typescript:
    specifier: ^5.6.3
    version: 5.6.3
  typescript-eslint:
    specifier: ^8.13.0
    version: 8.13.0(eslint@9.14.0)(typescript@5.6.3)
  vite:
    specifier: ^5.4.10
    version: 5.4.10

packages:

  /@ampproject/remapping@2.3.0:
    resolution: {integrity: sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==}
    engines: {node: '>=6.0.0'}
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25
    dev: true

  /@babel/code-frame@7.26.2:
    resolution: {integrity: sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/helper-validator-identifier': 7.25.9
      js-tokens: 4.0.0
      picocolors: 1.1.1

  /@babel/compat-data@7.26.2:
    resolution: {integrity: sha512-Z0WgzSEa+aUcdiJuCIqgujCshpMWgUpgOxXotrYPSA53hA3qopNaqcJpyr0hVb1FeWdnqFA35/fUtXgBK8srQg==}
    engines: {node: '>=6.9.0'}
    dev: true

  /@babel/core@7.26.0:
    resolution: {integrity: sha512-i1SLeK+DzNnQ3LL/CswPCa/E5u4lh1k6IAEphON8F+cXt0t9euTshDru0q7/IqMa1PMPz5RnHuHscF8/ZJsStg==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@ampproject/remapping': 2.3.0
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.26.2
      '@babel/helper-compilation-targets': 7.25.9
      '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.0)
      '@babel/helpers': 7.26.0
      '@babel/parser': 7.26.2
      '@babel/template': 7.25.9
      '@babel/traverse': 7.25.9
      '@babel/types': 7.26.0
      convert-source-map: 2.0.0
      debug: 4.3.7
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color
    dev: true

  /@babel/generator@7.26.2:
    resolution: {integrity: sha512-zevQbhbau95nkoxSq3f/DC/SC+EEOUZd3DYqfSkMhY2/wfSeaHV1Ew4vk8e+x8lja31IbyuUa2uQ3JONqKbysw==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/parser': 7.26.2
      '@babel/types': 7.26.0
      '@jridgewell/gen-mapping': 0.3.5
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 3.0.2

  /@babel/helper-compilation-targets@7.25.9:
    resolution: {integrity: sha512-j9Db8Suy6yV/VHa4qzrj9yZfZxhLWQdVnRlXxmKLYlhWUVB1sB2G5sxuWYXk/whHD9iW76PmNzxZ4UCnTQTVEQ==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/compat-data': 7.26.2
      '@babel/helper-validator-option': 7.25.9
      browserslist: 4.24.2
      lru-cache: 5.1.1
      semver: 6.3.1
    dev: true

  /@babel/helper-module-imports@7.25.9:
    resolution: {integrity: sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/traverse': 7.25.9
      '@babel/types': 7.26.0
    transitivePeerDependencies:
      - supports-color

  /@babel/helper-module-transforms@7.26.0(@babel/core@7.26.0):
    resolution: {integrity: sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-module-imports': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9
      '@babel/traverse': 7.25.9
    transitivePeerDependencies:
      - supports-color
    dev: true

  /@babel/helper-plugin-utils@7.25.9:
    resolution: {integrity: sha512-kSMlyUVdWe25rEsRGviIgOWnoT/nfABVWlqt9N19/dIPWViAOW2s9wznP5tURbs/IDuNk4gPy3YdYRgH3uxhBw==}
    engines: {node: '>=6.9.0'}
    dev: true

  /@babel/helper-string-parser@7.25.9:
    resolution: {integrity: sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==}
    engines: {node: '>=6.9.0'}

  /@babel/helper-validator-identifier@7.25.9:
    resolution: {integrity: sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==}
    engines: {node: '>=6.9.0'}

  /@babel/helper-validator-option@7.25.9:
    resolution: {integrity: sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==}
    engines: {node: '>=6.9.0'}
    dev: true

  /@babel/helpers@7.26.0:
    resolution: {integrity: sha512-tbhNuIxNcVb21pInl3ZSjksLCvgdZy9KwJ8brv993QtIVKJBBkYXz4q4ZbAv31GdnC+R90np23L5FbEBlthAEw==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/template': 7.25.9
      '@babel/types': 7.26.0
    dev: true

  /@babel/parser@7.26.2:
    resolution: {integrity: sha512-DWMCZH9WA4Maitz2q21SRKHo9QXZxkDsbNZoVD62gusNtNBBqDg9i7uOhASfTfIGNzW+O+r7+jAlM8dwphcJKQ==}
    engines: {node: '>=6.0.0'}
    hasBin: true
    dependencies:
      '@babel/types': 7.26.0

  /@babel/plugin-transform-react-jsx-self@7.25.9(@babel/core@7.26.0):
    resolution: {integrity: sha512-y8quW6p0WHkEhmErnfe58r7x0A70uKphQm8Sp8cV7tjNQwK56sNVK0M73LK3WuYmsuyrftut4xAkjjgU0twaMg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
    dev: true

  /@babel/plugin-transform-react-jsx-source@7.25.9(@babel/core@7.26.0):
    resolution: {integrity: sha512-+iqjT8xmXhhYv4/uiYd8FNQsraMFZIfxVSqxxVSZP0WbbSAWvBXAul0m/zu+7Vv4O/3WtApy9pmaTMiumEZgfg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0
    dependencies:
      '@babel/core': 7.26.0
      '@babel/helper-plugin-utils': 7.25.9
    dev: true

  /@babel/runtime@7.26.0:
    resolution: {integrity: sha512-FDSOghenHTiToteC/QRlv2q3DhPZ/oOXTBoirfWNx1Cx3TMVcGWQtMMmQcSvb/JjpNeGzx8Pq/b4fKEJuWm1sw==}
    engines: {node: '>=6.9.0'}
    dependencies:
      regenerator-runtime: 0.14.1
    dev: false

  /@babel/template@7.25.9:
    resolution: {integrity: sha512-9DGttpmPvIxBb/2uwpVo3dqJ+O6RooAFOS+lB+xDqoE2PVCE8nfoHMdZLpfCQRLwvohzXISPZcgxt80xLfsuwg==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/parser': 7.26.2
      '@babel/types': 7.26.0

  /@babel/traverse@7.25.9:
    resolution: {integrity: sha512-ZCuvfwOwlz/bawvAuvcj8rrithP2/N55Tzz342AkTvq4qaWbGfmCk/tKhNaV2cthijKrPAA8SRJV5WWe7IBMJw==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/code-frame': 7.26.2
      '@babel/generator': 7.26.2
      '@babel/parser': 7.26.2
      '@babel/template': 7.25.9
      '@babel/types': 7.26.0
      debug: 4.3.7
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  /@babel/types@7.26.0:
    resolution: {integrity: sha512-Z/yiTPj+lDVnF7lWeKCIJzaIkI0vYO87dMpZ4bg4TDrFe4XXLFWL1TbXU27gBP3QccxV9mZICCrnjnYlJjXHOA==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/helper-string-parser': 7.25.9
      '@babel/helper-validator-identifier': 7.25.9

  /@emotion/babel-plugin@11.12.0:
    resolution: {integrity: sha512-y2WQb+oP8Jqvvclh8Q55gLUyb7UFvgv7eJfsj7td5TToBrIUtPay2kMrZi4xjq9qw2vD0ZR5fSho0yqoFgX7Rw==}
    dependencies:
      '@babel/helper-module-imports': 7.25.9
      '@babel/runtime': 7.26.0
      '@emotion/hash': 0.9.2
      '@emotion/memoize': 0.9.0
      '@emotion/serialize': 1.3.2
      babel-plugin-macros: 3.1.0
      convert-source-map: 1.9.0
      escape-string-regexp: 4.0.0
      find-root: 1.1.0
      source-map: 0.5.7
      stylis: 4.2.0
    transitivePeerDependencies:
      - supports-color
    dev: false

  /@emotion/cache@11.13.1:
    resolution: {integrity: sha512-iqouYkuEblRcXmylXIwwOodiEK5Ifl7JcX7o6V4jI3iW4mLXX3dmt5xwBtIkJiQEXFAI+pC8X0i67yiPkH9Ucw==}
    dependencies:
      '@emotion/memoize': 0.9.0
      '@emotion/sheet': 1.4.0
      '@emotion/utils': 1.4.1
      '@emotion/weak-memoize': 0.4.0
      stylis: 4.2.0
    dev: false

  /@emotion/hash@0.9.2:
    resolution: {integrity: sha512-MyqliTZGuOm3+5ZRSaaBGP3USLw6+EGykkwZns2EPC5g8jJ4z9OrdZY9apkl3+UP9+sdz76YYkwCKP5gh8iY3g==}
    dev: false

  /@emotion/is-prop-valid@1.2.2:
    resolution: {integrity: sha512-uNsoYd37AFmaCdXlg6EYD1KaPOaRWRByMCYzbKUX4+hhMfrxdVSelShywL4JVaAeM/eHUOSprYBQls+/neX3pw==}
    dependencies:
      '@emotion/memoize': 0.8.1
    dev: false

  /@emotion/is-prop-valid@1.3.1:
    resolution: {integrity: sha512-/ACwoqx7XQi9knQs/G0qKvv5teDMhD7bXYns9N/wM8ah8iNb8jZ2uNO0YOgiq2o2poIvVtJS2YALasQuMSQ7Kw==}
    dependencies:
      '@emotion/memoize': 0.9.0
    dev: false

  /@emotion/memoize@0.8.1:
    resolution: {integrity: sha512-W2P2c/VRW1/1tLox0mVUalvnWXxavmv/Oum2aPsRcoDJuob75FC3Y8FbpfLwUegRcxINtGUMPq0tFCvYNTBXNA==}
    dev: false

  /@emotion/memoize@0.9.0:
    resolution: {integrity: sha512-30FAj7/EoJ5mwVPOWhAyCX+FPfMDrVecJAM+Iw9NRoSl4BBAQeqj4cApHHUXOVvIPgLVDsCFoz/hGD+5QQD1GQ==}
    dev: false

  /@emotion/react@11.13.3(@types/react@18.3.12)(react@18.3.1):
    resolution: {integrity: sha512-lIsdU6JNrmYfJ5EbUCf4xW1ovy5wKQ2CkPRM4xogziOxH1nXxBSjpC9YqbFAP7circxMfYp+6x676BqWcEiixg==}
    peerDependencies:
      '@types/react': '*'
      react: '>=16.8.0'
    peerDependenciesMeta:
      '@types/react':
        optional: true
    dependencies:
      '@babel/runtime': 7.26.0
      '@emotion/babel-plugin': 11.12.0
      '@emotion/cache': 11.13.1
      '@emotion/serialize': 1.3.2
      '@emotion/use-insertion-effect-with-fallbacks': 1.1.0(react@18.3.1)
      '@emotion/utils': 1.4.1
      '@emotion/weak-memoize': 0.4.0
      '@types/react': 18.3.12
      hoist-non-react-statics: 3.3.2
      react: 18.3.1
    transitivePeerDependencies:
      - supports-color
    dev: false

  /@emotion/serialize@1.3.2:
    resolution: {integrity: sha512-grVnMvVPK9yUVE6rkKfAJlYZgo0cu3l9iMC77V7DW6E1DUIrU68pSEXRmFZFOFB1QFo57TncmOcvcbMDWsL4yA==}
    dependencies:
      '@emotion/hash': 0.9.2
      '@emotion/memoize': 0.9.0
      '@emotion/unitless': 0.10.0
      '@emotion/utils': 1.4.1
      csstype: 3.1.3
    dev: false

  /@emotion/sheet@1.4.0:
    resolution: {integrity: sha512-fTBW9/8r2w3dXWYM4HCB1Rdp8NLibOw2+XELH5m5+AkWiL/KqYX6dc0kKYlaYyKjrQ6ds33MCdMPEwgs2z1rqg==}
    dev: false

  /@emotion/styled@11.13.0(@emotion/react@11.13.3)(@types/react@18.3.12)(react@18.3.1):
    resolution: {integrity: sha512-tkzkY7nQhW/zC4hztlwucpT8QEZ6eUzpXDRhww/Eej4tFfO0FxQYWRyg/c5CCXa4d/f174kqeXYjuQRnhzf6dA==}
    peerDependencies:
      '@emotion/react': ^11.0.0-rc.0
      '@types/react': '*'
      react: '>=16.8.0'
    peerDependenciesMeta:
      '@types/react':
        optional: true
    dependencies:
      '@babel/runtime': 7.26.0
      '@emotion/babel-plugin': 11.12.0
      '@emotion/is-prop-valid': 1.3.1
      '@emotion/react': 11.13.3(@types/react@18.3.12)(react@18.3.1)
      '@emotion/serialize': 1.3.2
      '@emotion/use-insertion-effect-with-fallbacks': 1.1.0(react@18.3.1)
      '@emotion/utils': 1.4.1
      '@types/react': 18.3.12
      react: 18.3.1
    transitivePeerDependencies:
      - supports-color
    dev: false

  /@emotion/unitless@0.10.0:
    resolution: {integrity: sha512-dFoMUuQA20zvtVTuxZww6OHoJYgrzfKM1t52mVySDJnMSEa08ruEvdYQbhvyu6soU+NeLVd3yKfTfT0NeV6qGg==}
    dev: false

  /@emotion/unitless@0.8.1:
    resolution: {integrity: sha512-KOEGMu6dmJZtpadb476IsZBclKvILjopjUii3V+7MnXIQCYh8W3NgNcgwo21n9LXZX6EDIKvqfjYxXebDwxKmQ==}
    dev: false

  /@emotion/use-insertion-effect-with-fallbacks@1.1.0(react@18.3.1):
    resolution: {integrity: sha512-+wBOcIV5snwGgI2ya3u99D7/FJquOIniQT1IKyDsBmEgwvpxMNeS65Oib7OnE2d2aY+3BU4OiH+0Wchf8yk3Hw==}
    peerDependencies:
      react: '>=16.8.0'
    dependencies:
      react: 18.3.1
    dev: false

  /@emotion/utils@1.4.1:
    resolution: {integrity: sha512-BymCXzCG3r72VKJxaYVwOXATqXIZ85cuvg0YOUDxMGNrKc1DJRZk8MgV5wyXRyEayIMd4FuXJIUgTBXvDNW5cA==}
    dev: false

  /@emotion/weak-memoize@0.4.0:
    resolution: {integrity: sha512-snKqtPW01tN0ui7yu9rGv69aJXr/a/Ywvl11sUjNtEcRc+ng/mQriFL0wLXMef74iHa/EkftbDzU9F8iFbH+zg==}
    dev: false

  /@esbuild/aix-ppc64@0.21.5:
    resolution: {integrity: sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [aix]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/android-arm64@0.21.5:
    resolution: {integrity: sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/android-arm@0.21.5:
    resolution: {integrity: sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/android-x64@0.21.5:
    resolution: {integrity: sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/darwin-arm64@0.21.5:
    resolution: {integrity: sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/darwin-x64@0.21.5:
    resolution: {integrity: sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/freebsd-arm64@0.21.5:
    resolution: {integrity: sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/freebsd-x64@0.21.5:
    resolution: {integrity: sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-arm64@0.21.5:
    resolution: {integrity: sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-arm@0.21.5:
    resolution: {integrity: sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-ia32@0.21.5:
    resolution: {integrity: sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-loong64@0.21.5:
    resolution: {integrity: sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-mips64el@0.21.5:
    resolution: {integrity: sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-ppc64@0.21.5:
    resolution: {integrity: sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-riscv64@0.21.5:
    resolution: {integrity: sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-s390x@0.21.5:
    resolution: {integrity: sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-x64@0.21.5:
    resolution: {integrity: sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/netbsd-x64@0.21.5:
    resolution: {integrity: sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/openbsd-x64@0.21.5:
    resolution: {integrity: sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/sunos-x64@0.21.5:
    resolution: {integrity: sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/win32-arm64@0.21.5:
    resolution: {integrity: sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/win32-ia32@0.21.5:
    resolution: {integrity: sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/win32-x64@0.21.5:
    resolution: {integrity: sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@eslint-community/eslint-utils@4.4.1(eslint@9.14.0):
    resolution: {integrity: sha512-s3O3waFUrMV8P/XaF/+ZTp1X9XBZW1a4B97ZnjQF2KYWaFD2A8KyFBsrsfSjEmjn3RGWAIuvlneuZm3CUK3jbA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0
    dependencies:
      eslint: 9.14.0
      eslint-visitor-keys: 3.4.3
    dev: true

  /@eslint-community/regexpp@4.12.1:
    resolution: {integrity: sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}
    dev: true

  /@eslint/config-array@0.18.0:
    resolution: {integrity: sha512-fTxvnS1sRMu3+JjXwJG0j/i4RT9u4qJ+lqS/yCGap4lH4zZGzQ7tu+xZqQmcMZq5OBZDL4QRxQzRjkWcGt8IVw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dependencies:
      '@eslint/object-schema': 2.1.4
      debug: 4.3.7
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color
    dev: true

  /@eslint/core@0.7.0:
    resolution: {integrity: sha512-xp5Jirz5DyPYlPiKat8jaq0EmYvDXKKpzTbxXMpT9eqlRJkRKIz9AGMdlvYjih+im+QlhWrpvVjl8IPC/lHlUw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dev: true

  /@eslint/eslintrc@3.1.0:
    resolution: {integrity: sha512-4Bfj15dVJdoy3RfZmmo86RK1Fwzn6SstsvK9JS+BaVKqC6QQQQyXekNaC+g+LKNgkQ+2VhGAzm6hO40AhMR3zQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dependencies:
      ajv: 6.12.6
      debug: 4.3.7
      espree: 10.3.0
      globals: 14.0.0
      ignore: 5.3.2
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color
    dev: true

  /@eslint/js@9.14.0:
    resolution: {integrity: sha512-pFoEtFWCPyDOl+C6Ift+wC7Ro89otjigCf5vcuWqWgqNSQbRrpjSvdeE6ofLz4dHmyxD5f7gIdGT4+p36L6Twg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dev: true

  /@eslint/object-schema@2.1.4:
    resolution: {integrity: sha512-BsWiH1yFGjXXS2yvrf5LyuoSIIbPrGUWob917o+BTKuZ7qJdxX8aJLRxs1fS9n6r7vESrq1OUqb68dANcFXuQQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dev: true

  /@eslint/plugin-kit@0.2.2:
    resolution: {integrity: sha512-CXtq5nR4Su+2I47WPOlWud98Y5Lv8Kyxp2ukhgFx/eW6Blm18VXJO5WuQylPugRo8nbluoi6GvvxBLqHcvqUUw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dependencies:
      levn: 0.4.1
    dev: true

  /@fastify/deepmerge@1.3.0:
    resolution: {integrity: sha512-J8TOSBq3SoZbDhM9+R/u77hP93gz/rajSA+K2kGyijPpORPWUXHUpTaleoj+92As0S9uPRP7Oi8IqMf0u+ro6A==}
    dev: true

  /@humanfs/core@0.19.1:
    resolution: {integrity: sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==}
    engines: {node: '>=18.18.0'}
    dev: true

  /@humanfs/node@0.16.6:
    resolution: {integrity: sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==}
    engines: {node: '>=18.18.0'}
    dependencies:
      '@humanfs/core': 0.19.1
      '@humanwhocodes/retry': 0.3.1
    dev: true

  /@humanwhocodes/module-importer@1.0.1:
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}
    dev: true

  /@humanwhocodes/retry@0.3.1:
    resolution: {integrity: sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==}
    engines: {node: '>=18.18'}
    dev: true

  /@humanwhocodes/retry@0.4.1:
    resolution: {integrity: sha512-c7hNEllBlenFTHBky65mhq8WD2kbN9Q6gk0bTk8lSBvc554jpXSkST1iePudpt7+A/AQvuHs9EMqjHDXMY1lrA==}
    engines: {node: '>=18.18'}
    dev: true

  /@jridgewell/gen-mapping@0.3.5:
    resolution: {integrity: sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==}
    engines: {node: '>=6.0.0'}
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  /@jridgewell/resolve-uri@3.1.2:
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  /@jridgewell/set-array@1.2.1:
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  /@jridgewell/sourcemap-codec@1.5.0:
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  /@jridgewell/trace-mapping@0.3.25:
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  /@mui/core-downloads-tracker@6.1.6:
    resolution: {integrity: sha512-nz1SlR9TdBYYPz4qKoNasMPRiGb4PaIHFkzLzhju0YVYS5QSuFF2+n7CsiHMIDcHv3piPu/xDWI53ruhOqvZwQ==}
    dev: false

  /@mui/icons-material@6.1.6(@mui/material@6.1.6)(@types/react@18.3.12)(react@18.3.1):
    resolution: {integrity: sha512-5r9urIL2lxXb/sPN3LFfFYEibsXJUb986HhhIeu1gOcte460pwdSiEhBSxkAuyT8Dj7jvu9MjqSBmSumQELo8A==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      '@mui/material': ^6.1.6
      '@types/react': ^17.0.0 || ^18.0.0 || ^19.0.0
      react: ^17.0.0 || ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
    dependencies:
      '@babel/runtime': 7.26.0
      '@mui/material': 6.1.6(@emotion/react@11.13.3)(@emotion/styled@11.13.0)(@types/react@18.3.12)(react-dom@18.3.1)(react@18.3.1)
      '@types/react': 18.3.12
      react: 18.3.1
    dev: false

  /@mui/material@6.1.6(@emotion/react@11.13.3)(@emotion/styled@11.13.0)(@types/react@18.3.12)(react-dom@18.3.1)(react@18.3.1):
    resolution: {integrity: sha512-1yvejiQ/601l5AK3uIdUlAVElyCxoqKnl7QA+2oFB/2qYPWfRwDgavW/MoywS5Y2gZEslcJKhe0s2F3IthgFgw==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      '@emotion/react': ^11.5.0
      '@emotion/styled': ^11.3.0
      '@mui/material-pigment-css': ^6.1.6
      '@types/react': ^17.0.0 || ^18.0.0 || ^19.0.0
      react: ^17.0.0 || ^18.0.0 || ^19.0.0
      react-dom: ^17.0.0 || ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@emotion/react':
        optional: true
      '@emotion/styled':
        optional: true
      '@mui/material-pigment-css':
        optional: true
      '@types/react':
        optional: true
    dependencies:
      '@babel/runtime': 7.26.0
      '@emotion/react': 11.13.3(@types/react@18.3.12)(react@18.3.1)
      '@emotion/styled': 11.13.0(@emotion/react@11.13.3)(@types/react@18.3.12)(react@18.3.1)
      '@mui/core-downloads-tracker': 6.1.6
      '@mui/system': 6.1.6(@emotion/react@11.13.3)(@emotion/styled@11.13.0)(@types/react@18.3.12)(react@18.3.1)
      '@mui/types': 7.2.19(@types/react@18.3.12)
      '@mui/utils': 6.1.6(@types/react@18.3.12)(react@18.3.1)
      '@popperjs/core': 2.11.8
      '@types/react': 18.3.12
      '@types/react-transition-group': 4.4.11
      clsx: 2.1.1
      csstype: 3.1.3
      prop-types: 15.8.1
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      react-is: 18.3.1
      react-transition-group: 4.4.5(react-dom@18.3.1)(react@18.3.1)
    dev: false

  /@mui/private-theming@6.1.6(@types/react@18.3.12)(react@18.3.1):
    resolution: {integrity: sha512-ioAiFckaD/fJSnTrUMWgjl9HYBWt7ixCh7zZw7gDZ+Tae7NuprNV6QJK95EidDT7K0GetR2rU3kAeIR61Myttw==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      '@types/react': ^17.0.0 || ^18.0.0 || ^19.0.0
      react: ^17.0.0 || ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
    dependencies:
      '@babel/runtime': 7.26.0
      '@mui/utils': 6.1.6(@types/react@18.3.12)(react@18.3.1)
      '@types/react': 18.3.12
      prop-types: 15.8.1
      react: 18.3.1
    dev: false

  /@mui/styled-engine@6.1.6(@emotion/react@11.13.3)(@emotion/styled@11.13.0)(react@18.3.1):
    resolution: {integrity: sha512-I+yS1cSuSvHnZDBO7e7VHxTWpj+R7XlSZvTC4lS/OIbUNJOMMSd3UDP6V2sfwzAdmdDNBi7NGCRv2SZ6O9hGDA==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      '@emotion/react': ^11.4.1
      '@emotion/styled': ^11.3.0
      react: ^17.0.0 || ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@emotion/react':
        optional: true
      '@emotion/styled':
        optional: true
    dependencies:
      '@babel/runtime': 7.26.0
      '@emotion/cache': 11.13.1
      '@emotion/react': 11.13.3(@types/react@18.3.12)(react@18.3.1)
      '@emotion/serialize': 1.3.2
      '@emotion/sheet': 1.4.0
      '@emotion/styled': 11.13.0(@emotion/react@11.13.3)(@types/react@18.3.12)(react@18.3.1)
      csstype: 3.1.3
      prop-types: 15.8.1
      react: 18.3.1
    dev: false

  /@mui/system@6.1.6(@emotion/react@11.13.3)(@emotion/styled@11.13.0)(@types/react@18.3.12)(react@18.3.1):
    resolution: {integrity: sha512-qOf1VUE9wK8syiB0BBCp82oNBAVPYdj4Trh+G1s+L+ImYiKlubWhhqlnvWt3xqMevR+D2h1CXzA1vhX2FvA+VQ==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      '@emotion/react': ^11.5.0
      '@emotion/styled': ^11.3.0
      '@types/react': ^17.0.0 || ^18.0.0 || ^19.0.0
      react: ^17.0.0 || ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@emotion/react':
        optional: true
      '@emotion/styled':
        optional: true
      '@types/react':
        optional: true
    dependencies:
      '@babel/runtime': 7.26.0
      '@emotion/react': 11.13.3(@types/react@18.3.12)(react@18.3.1)
      '@emotion/styled': 11.13.0(@emotion/react@11.13.3)(@types/react@18.3.12)(react@18.3.1)
      '@mui/private-theming': 6.1.6(@types/react@18.3.12)(react@18.3.1)
      '@mui/styled-engine': 6.1.6(@emotion/react@11.13.3)(@emotion/styled@11.13.0)(react@18.3.1)
      '@mui/types': 7.2.19(@types/react@18.3.12)
      '@mui/utils': 6.1.6(@types/react@18.3.12)(react@18.3.1)
      '@types/react': 18.3.12
      clsx: 2.1.1
      csstype: 3.1.3
      prop-types: 15.8.1
      react: 18.3.1
    dev: false

  /@mui/types@7.2.19(@types/react@18.3.12):
    resolution: {integrity: sha512-6XpZEM/Q3epK9RN8ENoXuygnqUQxE+siN/6rGRi2iwJPgBUR25mphYQ9ZI87plGh58YoZ5pp40bFvKYOCDJ3tA==}
    peerDependencies:
      '@types/react': ^17.0.0 || ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
    dependencies:
      '@types/react': 18.3.12
    dev: false

  /@mui/utils@6.1.6(@types/react@18.3.12)(react@18.3.1):
    resolution: {integrity: sha512-sBS6D9mJECtELASLM+18WUcXF6RH3zNxBRFeyCRg8wad6NbyNrdxLuwK+Ikvc38sTZwBzAz691HmSofLqHd9sQ==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      '@types/react': ^17.0.0 || ^18.0.0 || ^19.0.0
      react: ^17.0.0 || ^18.0.0 || ^19.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
    dependencies:
      '@babel/runtime': 7.26.0
      '@mui/types': 7.2.19(@types/react@18.3.12)
      '@types/prop-types': 15.7.13
      '@types/react': 18.3.12
      clsx: 2.1.1
      prop-types: 15.8.1
      react: 18.3.1
      react-is: 18.3.1
    dev: false

  /@nodelib/fs.scandir@2.1.5:
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0
    dev: true

  /@nodelib/fs.stat@2.0.5:
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}
    dev: true

  /@nodelib/fs.walk@1.2.8:
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.17.1
    dev: true

  /@popperjs/core@2.11.8:
    resolution: {integrity: sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==}
    dev: false

  /@remix-run/router@1.20.0:
    resolution: {integrity: sha512-mUnk8rPJBI9loFDZ+YzPGdeniYK+FTmRD1TMCz7ev2SNIozyKKpnGgsxO34u6Z4z/t0ITuu7voi/AshfsGsgFg==}
    engines: {node: '>=14.0.0'}
    dev: false

  /@rollup/rollup-android-arm-eabi@4.24.4:
    resolution: {integrity: sha512-jfUJrFct/hTA0XDM5p/htWKoNNTbDLY0KRwEt6pyOA6k2fmk0WVwl65PdUdJZgzGEHWx+49LilkcSaumQRyNQw==}
    cpu: [arm]
    os: [android]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-android-arm64@4.24.4:
    resolution: {integrity: sha512-j4nrEO6nHU1nZUuCfRKoCcvh7PIywQPUCBa2UsootTHvTHIoIu2BzueInGJhhvQO/2FTRdNYpf63xsgEqH9IhA==}
    cpu: [arm64]
    os: [android]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-darwin-arm64@4.24.4:
    resolution: {integrity: sha512-GmU/QgGtBTeraKyldC7cDVVvAJEOr3dFLKneez/n7BvX57UdhOqDsVwzU7UOnYA7AAOt+Xb26lk79PldDHgMIQ==}
    cpu: [arm64]
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-darwin-x64@4.24.4:
    resolution: {integrity: sha512-N6oDBiZCBKlwYcsEPXGDE4g9RoxZLK6vT98M8111cW7VsVJFpNEqvJeIPfsCzbf0XEakPslh72X0gnlMi4Ddgg==}
    cpu: [x64]
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-freebsd-arm64@4.24.4:
    resolution: {integrity: sha512-py5oNShCCjCyjWXCZNrRGRpjWsF0ic8f4ieBNra5buQz0O/U6mMXCpC1LvrHuhJsNPgRt36tSYMidGzZiJF6mw==}
    cpu: [arm64]
    os: [freebsd]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-freebsd-x64@4.24.4:
    resolution: {integrity: sha512-L7VVVW9FCnTTp4i7KrmHeDsDvjB4++KOBENYtNYAiYl96jeBThFfhP6HVxL74v4SiZEVDH/1ILscR5U9S4ms4g==}
    cpu: [x64]
    os: [freebsd]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-linux-arm-gnueabihf@4.24.4:
    resolution: {integrity: sha512-10ICosOwYChROdQoQo589N5idQIisxjaFE/PAnX2i0Zr84mY0k9zul1ArH0rnJ/fpgiqfu13TFZR5A5YJLOYZA==}
    cpu: [arm]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-linux-arm-musleabihf@4.24.4:
    resolution: {integrity: sha512-ySAfWs69LYC7QhRDZNKqNhz2UKN8LDfbKSMAEtoEI0jitwfAG2iZwVqGACJT+kfYvvz3/JgsLlcBP+WWoKCLcw==}
    cpu: [arm]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-linux-arm64-gnu@4.24.4:
    resolution: {integrity: sha512-uHYJ0HNOI6pGEeZ/5mgm5arNVTI0nLlmrbdph+pGXpC9tFHFDQmDMOEqkmUObRfosJqpU8RliYoGz06qSdtcjg==}
    cpu: [arm64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-linux-arm64-musl@4.24.4:
    resolution: {integrity: sha512-38yiWLemQf7aLHDgTg85fh3hW9stJ0Muk7+s6tIkSUOMmi4Xbv5pH/5Bofnsb6spIwD5FJiR+jg71f0CH5OzoA==}
    cpu: [arm64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-linux-powerpc64le-gnu@4.24.4:
    resolution: {integrity: sha512-q73XUPnkwt9ZNF2xRS4fvneSuaHw2BXuV5rI4cw0fWYVIWIBeDZX7c7FWhFQPNTnE24172K30I+dViWRVD9TwA==}
    cpu: [ppc64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-linux-riscv64-gnu@4.24.4:
    resolution: {integrity: sha512-Aie/TbmQi6UXokJqDZdmTJuZBCU3QBDA8oTKRGtd4ABi/nHgXICulfg1KI6n9/koDsiDbvHAiQO3YAUNa/7BCw==}
    cpu: [riscv64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-linux-s390x-gnu@4.24.4:
    resolution: {integrity: sha512-P8MPErVO/y8ohWSP9JY7lLQ8+YMHfTI4bAdtCi3pC2hTeqFJco2jYspzOzTUB8hwUWIIu1xwOrJE11nP+0JFAQ==}
    cpu: [s390x]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-linux-x64-gnu@4.24.4:
    resolution: {integrity: sha512-K03TljaaoPK5FOyNMZAAEmhlyO49LaE4qCsr0lYHUKyb6QacTNF9pnfPpXnFlFD3TXuFbFbz7tJ51FujUXkXYA==}
    cpu: [x64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-linux-x64-musl@4.24.4:
    resolution: {integrity: sha512-VJYl4xSl/wqG2D5xTYncVWW+26ICV4wubwN9Gs5NrqhJtayikwCXzPL8GDsLnaLU3WwhQ8W02IinYSFJfyo34Q==}
    cpu: [x64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-win32-arm64-msvc@4.24.4:
    resolution: {integrity: sha512-ku2GvtPwQfCqoPFIJCqZ8o7bJcj+Y54cZSr43hHca6jLwAiCbZdBUOrqE6y29QFajNAzzpIOwsckaTFmN6/8TA==}
    cpu: [arm64]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-win32-ia32-msvc@4.24.4:
    resolution: {integrity: sha512-V3nCe+eTt/W6UYNr/wGvO1fLpHUrnlirlypZfKCT1fG6hWfqhPgQV/K/mRBXBpxc0eKLIF18pIOFVPh0mqHjlg==}
    cpu: [ia32]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@rollup/rollup-win32-x64-msvc@4.24.4:
    resolution: {integrity: sha512-LTw1Dfd0mBIEqUVCxbvTE/LLo+9ZxVC9k99v1v4ahg9Aak6FpqOfNu5kRkeTAn0wphoC4JU7No1/rL+bBCEwhg==}
    cpu: [x64]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@swc/core-darwin-arm64@1.9.1:
    resolution: {integrity: sha512-2/ncHSCdAh5OHem1fMITrWEzzl97OdMK1PHc9CkxSJnphLjRubfxB5sbc5tDhcO68a5tVy+DxwaBgDec3PXnOg==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /@swc/core-darwin-x64@1.9.1:
    resolution: {integrity: sha512-4MDOFC5zmNqRJ9RGFOH95oYf27J9HniLVpB1pYm2gGeNHdl2QvDMtx2QTuMHQ6+OTn/3y1BHYuhBGp7d405oLA==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /@swc/core-linux-arm-gnueabihf@1.9.1:
    resolution: {integrity: sha512-eVW/BjRW8/HpLe3+1jRU7w7PdRLBgnEEYTkHJISU8805/EKT03xNZn6CfaBpKfeAloY4043hbGzE/NP9IahdpQ==}
    engines: {node: '>=10'}
    cpu: [arm]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@swc/core-linux-arm64-gnu@1.9.1:
    resolution: {integrity: sha512-8m3u1v8R8NgI/9+cHMkzk14w87blSy3OsQPWPfhOL+XPwhyLPvat+ahQJb2nZmltjTgkB4IbzKFSfbuA34LmNA==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@swc/core-linux-arm64-musl@1.9.1:
    resolution: {integrity: sha512-hpT0sQAZnW8l02I289yeyFfT9llGO9PzKDxUq8pocKtioEHiElRqR53juCWoSmzuWi+6KX7zUJ0NKCBrc8pmDg==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@swc/core-linux-x64-gnu@1.9.1:
    resolution: {integrity: sha512-sGFdpdAYusk/ropHiwtXom2JrdaKPxl8MqemRv6dvxZq1Gm/GdmOowxdXIPjCgBGMgoXVcgNviH6CgiO5q+UtA==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@swc/core-linux-x64-musl@1.9.1:
    resolution: {integrity: sha512-YtNLNwIWs0Z2+XgBs6+LrCIGtfCDtNr4S4b6Q5HDOreEIGzSvhkef8eyBI5L+fJ2eGov4b7iEo61C4izDJS5RA==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@swc/core-win32-arm64-msvc@1.9.1:
    resolution: {integrity: sha512-qSxD3uZW2vSiHqUt30vUi0PB92zDh9bjqh5YKpfhhVa7h1vt/xXhlid8yMvSNToTfzhRrTEffOAPUr7WVoyQUA==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@swc/core-win32-ia32-msvc@1.9.1:
    resolution: {integrity: sha512-C3fPEwyX/WRPlX6zIToNykJuz1JkZX0sk8H1QH2vpnKuySUkt/Ur5K2FzLgSWzJdbfxstpgS151/es0VGAD+ZA==}
    engines: {node: '>=10'}
    cpu: [ia32]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@swc/core-win32-x64-msvc@1.9.1:
    resolution: {integrity: sha512-2XZ+U1AyVsOAXeH6WK1syDm7+gwTjA8fShs93WcbxnK7HV+NigDlvr4124CeJLTHyh3fMh1o7+CnQnaBJhlysQ==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@swc/core@1.9.1:
    resolution: {integrity: sha512-OnPc+Kt5oy3xTvr/KCUOqE9ptJcWbyQgAUr1ydh9EmbBcmJTaO1kfQCxm/axzJi6sKeDTxL9rX5zvLOhoYIaQw==}
    engines: {node: '>=10'}
    requiresBuild: true
    peerDependencies:
      '@swc/helpers': '*'
    peerDependenciesMeta:
      '@swc/helpers':
        optional: true
    dependencies:
      '@swc/counter': 0.1.3
      '@swc/types': 0.1.14
    optionalDependencies:
      '@swc/core-darwin-arm64': 1.9.1
      '@swc/core-darwin-x64': 1.9.1
      '@swc/core-linux-arm-gnueabihf': 1.9.1
      '@swc/core-linux-arm64-gnu': 1.9.1
      '@swc/core-linux-arm64-musl': 1.9.1
      '@swc/core-linux-x64-gnu': 1.9.1
      '@swc/core-linux-x64-musl': 1.9.1
      '@swc/core-win32-arm64-msvc': 1.9.1
      '@swc/core-win32-ia32-msvc': 1.9.1
      '@swc/core-win32-x64-msvc': 1.9.1
    dev: true

  /@swc/counter@0.1.3:
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}
    dev: true

  /@swc/types@0.1.14:
    resolution: {integrity: sha512-PbSmTiYCN+GMrvfjrMo9bdY+f2COnwbdnoMw7rqU/PI5jXpKjxOGZ0qqZCImxnT81NkNsKnmEpvu+hRXLBeCJg==}
    dependencies:
      '@swc/counter': 0.1.3
    dev: true

  /@types/babel__core@7.20.5:
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}
    dependencies:
      '@babel/parser': 7.26.2
      '@babel/types': 7.26.0
      '@types/babel__generator': 7.6.8
      '@types/babel__template': 7.4.4
      '@types/babel__traverse': 7.20.6
    dev: true

  /@types/babel__generator@7.6.8:
    resolution: {integrity: sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==}
    dependencies:
      '@babel/types': 7.26.0
    dev: true

  /@types/babel__template@7.4.4:
    resolution: {integrity: sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==}
    dependencies:
      '@babel/parser': 7.26.2
      '@babel/types': 7.26.0
    dev: true

  /@types/babel__traverse@7.20.6:
    resolution: {integrity: sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==}
    dependencies:
      '@babel/types': 7.26.0
    dev: true

  /@types/estree@1.0.6:
    resolution: {integrity: sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==}
    dev: true

  /@types/json-schema@7.0.15:
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}
    dev: true

  /@types/parse-json@4.0.2:
    resolution: {integrity: sha512-dISoDXWWQwUquiKsyZ4Ng+HX2KsPL7LyHKHQwgGFEA3IaKac4Obd+h2a/a6waisAoepJlBcx9paWqjA8/HVjCw==}
    dev: false

  /@types/prop-types@15.7.13:
    resolution: {integrity: sha512-hCZTSvwbzWGvhqxp/RqVqwU999pBf2vp7hzIjiYOsl8wqOmUxkQ6ddw1cV3l8811+kdUFus/q4d1Y3E3SyEifA==}

  /@types/react-dom@18.3.1:
    resolution: {integrity: sha512-qW1Mfv8taImTthu4KoXgDfLuk4bydU6Q/TkADnDWWHwi4NX4BR+LWfTp2sVmTqRrsHvyDDTelgelxJ+SsejKKQ==}
    dependencies:
      '@types/react': 18.3.12
    dev: true

  /@types/react-transition-group@4.4.11:
    resolution: {integrity: sha512-RM05tAniPZ5DZPzzNFP+DmrcOdD0efDUxMy3145oljWSl3x9ZV5vhme98gTxFrj2lhXvmGNnUiuDyJgY9IKkNA==}
    dependencies:
      '@types/react': 18.3.12
    dev: false

  /@types/react@18.3.12:
    resolution: {integrity: sha512-D2wOSq/d6Agt28q7rSI3jhU7G6aiuzljDGZ2hTZHIkrTLUI+AF3WMeKkEZ9nN2fkBAlcktT6vcZjDFiIhMYEQw==}
    dependencies:
      '@types/prop-types': 15.7.13
      csstype: 3.1.3

  /@types/stylis@4.2.5:
    resolution: {integrity: sha512-1Xve+NMN7FWjY14vLoY5tL3BVEQ/n42YLwaqJIPYhotZ9uBHt87VceMwWQpzmdEt2TNXIorIFG+YeCUUW7RInw==}
    dev: false

  /@typescript-eslint/eslint-plugin@8.13.0(@typescript-eslint/parser@8.13.0)(eslint@9.14.0)(typescript@5.6.3):
    resolution: {integrity: sha512-nQtBLiZYMUPkclSeC3id+x4uVd1SGtHuElTxL++SfP47jR0zfkZBJHc+gL4qPsgTuypz0k8Y2GheaDYn6Gy3rg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      '@typescript-eslint/parser': ^8.0.0 || ^8.0.0-alpha.0
      eslint: ^8.57.0 || ^9.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true
    dependencies:
      '@eslint-community/regexpp': 4.12.1
      '@typescript-eslint/parser': 8.13.0(eslint@9.14.0)(typescript@5.6.3)
      '@typescript-eslint/scope-manager': 8.13.0
      '@typescript-eslint/type-utils': 8.13.0(eslint@9.14.0)(typescript@5.6.3)
      '@typescript-eslint/utils': 8.13.0(eslint@9.14.0)(typescript@5.6.3)
      '@typescript-eslint/visitor-keys': 8.13.0
      eslint: 9.14.0
      graphemer: 1.4.0
      ignore: 5.3.2
      natural-compare: 1.4.0
      ts-api-utils: 1.4.0(typescript@5.6.3)
      typescript: 5.6.3
    transitivePeerDependencies:
      - supports-color
    dev: true

  /@typescript-eslint/parser@8.13.0(eslint@9.14.0)(typescript@5.6.3):
    resolution: {integrity: sha512-w0xp+xGg8u/nONcGw1UXAr6cjCPU1w0XVyBs6Zqaj5eLmxkKQAByTdV/uGgNN5tVvN/kKpoQlP2cL7R+ajZZIQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true
    dependencies:
      '@typescript-eslint/scope-manager': 8.13.0
      '@typescript-eslint/types': 8.13.0
      '@typescript-eslint/typescript-estree': 8.13.0(typescript@5.6.3)
      '@typescript-eslint/visitor-keys': 8.13.0
      debug: 4.3.7
      eslint: 9.14.0
      typescript: 5.6.3
    transitivePeerDependencies:
      - supports-color
    dev: true

  /@typescript-eslint/scope-manager@8.13.0:
    resolution: {integrity: sha512-XsGWww0odcUT0gJoBZ1DeulY1+jkaHUciUq4jKNv4cpInbvvrtDoyBH9rE/n2V29wQJPk8iCH1wipra9BhmiMA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dependencies:
      '@typescript-eslint/types': 8.13.0
      '@typescript-eslint/visitor-keys': 8.13.0
    dev: true

  /@typescript-eslint/type-utils@8.13.0(eslint@9.14.0)(typescript@5.6.3):
    resolution: {integrity: sha512-Rqnn6xXTR316fP4D2pohZenJnp+NwQ1mo7/JM+J1LWZENSLkJI8ID8QNtlvFeb0HnFSK94D6q0cnMX6SbE5/vA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true
    dependencies:
      '@typescript-eslint/typescript-estree': 8.13.0(typescript@5.6.3)
      '@typescript-eslint/utils': 8.13.0(eslint@9.14.0)(typescript@5.6.3)
      debug: 4.3.7
      ts-api-utils: 1.4.0(typescript@5.6.3)
      typescript: 5.6.3
    transitivePeerDependencies:
      - eslint
      - supports-color
    dev: true

  /@typescript-eslint/types@8.13.0:
    resolution: {integrity: sha512-4cyFErJetFLckcThRUFdReWJjVsPCqyBlJTi6IDEpc1GWCIIZRFxVppjWLIMcQhNGhdWJJRYFHpHoDWvMlDzng==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dev: true

  /@typescript-eslint/typescript-estree@8.13.0(typescript@5.6.3):
    resolution: {integrity: sha512-v7SCIGmVsRK2Cy/LTLGN22uea6SaUIlpBcO/gnMGT/7zPtxp90bphcGf4fyrCQl3ZtiBKqVTG32hb668oIYy1g==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true
    dependencies:
      '@typescript-eslint/types': 8.13.0
      '@typescript-eslint/visitor-keys': 8.13.0
      debug: 4.3.7
      fast-glob: 3.3.2
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.6.3
      ts-api-utils: 1.4.0(typescript@5.6.3)
      typescript: 5.6.3
    transitivePeerDependencies:
      - supports-color
    dev: true

  /@typescript-eslint/utils@8.13.0(eslint@9.14.0)(typescript@5.6.3):
    resolution: {integrity: sha512-A1EeYOND6Uv250nybnLZapeXpYMl8tkzYUxqmoKAWnI4sei3ihf2XdZVd+vVOmHGcp3t+P7yRrNsyyiXTvShFQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@9.14.0)
      '@typescript-eslint/scope-manager': 8.13.0
      '@typescript-eslint/types': 8.13.0
      '@typescript-eslint/typescript-estree': 8.13.0(typescript@5.6.3)
      eslint: 9.14.0
    transitivePeerDependencies:
      - supports-color
      - typescript
    dev: true

  /@typescript-eslint/visitor-keys@8.13.0:
    resolution: {integrity: sha512-7N/+lztJqH4Mrf0lb10R/CbI1EaAMMGyF5y0oJvFoAhafwgiRA7TXyd8TFn8FC8k5y2dTsYogg238qavRGNnlw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dependencies:
      '@typescript-eslint/types': 8.13.0
      eslint-visitor-keys: 3.4.3
    dev: true

  /@vitejs/plugin-react-swc@3.7.1(vite@5.4.10):
    resolution: {integrity: sha512-vgWOY0i1EROUK0Ctg1hwhtC3SdcDjZcdit4Ups4aPkDcB1jYhmo+RMYWY87cmXMhvtD5uf8lV89j2w16vkdSVg==}
    peerDependencies:
      vite: ^4 || ^5
    dependencies:
      '@swc/core': 1.9.1
      vite: 5.4.10
    transitivePeerDependencies:
      - '@swc/helpers'
    dev: true

  /@vitejs/plugin-react@4.3.3(vite@5.4.10):
    resolution: {integrity: sha512-NooDe9GpHGqNns1i8XDERg0Vsg5SSYRhRxxyTGogUdkdNt47jal+fbuYi+Yfq6pzRCKXyoPcWisfxE6RIM3GKA==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      vite: ^4.2.0 || ^5.0.0
    dependencies:
      '@babel/core': 7.26.0
      '@babel/plugin-transform-react-jsx-self': 7.25.9(@babel/core@7.26.0)
      '@babel/plugin-transform-react-jsx-source': 7.25.9(@babel/core@7.26.0)
      '@types/babel__core': 7.20.5
      react-refresh: 0.14.2
      vite: 5.4.10
    transitivePeerDependencies:
      - supports-color
    dev: true

  /acorn-jsx@5.3.2(acorn@8.14.0):
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0
    dependencies:
      acorn: 8.14.0
    dev: true

  /acorn@8.14.0:
    resolution: {integrity: sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==}
    engines: {node: '>=0.4.0'}
    hasBin: true
    dev: true

  /ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1
    dev: true

  /ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}
    dependencies:
      color-convert: 2.0.1
    dev: true

  /argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}
    dev: true

  /asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}
    dev: false

  /axios@1.7.7:
    resolution: {integrity: sha512-S4kL7XrjgBmvdGut0sN3yJxqYzrDOnivkBiN0OFs6hLiUam3UPvswUo0kqGyhqUZGEOytHyumEdXsAkgCOUf3Q==}
    dependencies:
      follow-redirects: 1.15.9
      form-data: 4.0.1
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug
    dev: false

  /babel-plugin-macros@3.1.0:
    resolution: {integrity: sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==}
    engines: {node: '>=10', npm: '>=6'}
    dependencies:
      '@babel/runtime': 7.26.0
      cosmiconfig: 7.1.0
      resolve: 1.22.8
    dev: false

  /balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}
    dev: true

  /brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1
    dev: true

  /brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}
    dependencies:
      balanced-match: 1.0.2
    dev: true

  /braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}
    dependencies:
      fill-range: 7.1.1
    dev: true

  /browserslist@4.24.2:
    resolution: {integrity: sha512-ZIc+Q62revdMcqC6aChtW4jz3My3klmCO1fEmINZY/8J3EpBg5/A/D0AKmBveUh6pgoeycoMkVMko84tuYS+Gg==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true
    dependencies:
      caniuse-lite: 1.0.30001677
      electron-to-chromium: 1.5.52
      node-releases: 2.0.18
      update-browserslist-db: 1.1.1(browserslist@4.24.2)
    dev: true

  /callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  /camelize@1.0.1:
    resolution: {integrity: sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==}
    dev: false

  /caniuse-lite@1.0.30001677:
    resolution: {integrity: sha512-fmfjsOlJUpMWu+mAAtZZZHz7UEwsUxIIvu1TJfO1HqFQvB/B+ii0xr9B5HpbZY/mC4XZ8SvjHJqtAY6pDPQEog==}
    dev: true

  /chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0
    dev: true

  /clsx@2.1.1:
    resolution: {integrity: sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==}
    engines: {node: '>=6'}
    dev: false

  /color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}
    dependencies:
      color-name: 1.1.4
    dev: true

  /color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}
    dev: true

  /combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}
    dependencies:
      delayed-stream: 1.0.0
    dev: false

  /concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}
    dev: true

  /convert-source-map@1.9.0:
    resolution: {integrity: sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==}
    dev: false

  /convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}
    dev: true

  /cosmiconfig@7.1.0:
    resolution: {integrity: sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==}
    engines: {node: '>=10'}
    dependencies:
      '@types/parse-json': 4.0.2
      import-fresh: 3.3.0
      parse-json: 5.2.0
      path-type: 4.0.0
      yaml: 1.10.2
    dev: false

  /cross-spawn@7.0.3:
    resolution: {integrity: sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==}
    engines: {node: '>= 8'}
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2
    dev: true

  /css-color-keywords@1.0.0:
    resolution: {integrity: sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==}
    engines: {node: '>=4'}
    dev: false

  /css-to-react-native@3.2.0:
    resolution: {integrity: sha512-e8RKaLXMOFii+02mOlqwjbD00KSEKqblnpO9e++1aXS1fPQOpS1YoqdVHBqPjHNoxeF2mimzVqawm2KCbEdtHQ==}
    dependencies:
      camelize: 1.0.1
      css-color-keywords: 1.0.0
      postcss-value-parser: 4.2.0
    dev: false

  /csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  /debug@4.3.7:
    resolution: {integrity: sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true
    dependencies:
      ms: 2.1.3

  /deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}
    dev: true

  /delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}
    dev: false

  /dom-helpers@5.2.1:
    resolution: {integrity: sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==}
    dependencies:
      '@babel/runtime': 7.26.0
      csstype: 3.1.3
    dev: false

  /electron-to-chromium@1.5.52:
    resolution: {integrity: sha512-xtoijJTZ+qeucLBDNztDOuQBE1ksqjvNjvqFoST3nGC7fSpqJ+X6BdTBaY5BHG+IhWWmpc6b/KfpeuEDupEPOQ==}
    dev: true

  /error-ex@1.3.2:
    resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}
    dependencies:
      is-arrayish: 0.2.1
    dev: false

  /esbuild@0.21.5:
    resolution: {integrity: sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==}
    engines: {node: '>=12'}
    hasBin: true
    requiresBuild: true
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.21.5
      '@esbuild/android-arm': 0.21.5
      '@esbuild/android-arm64': 0.21.5
      '@esbuild/android-x64': 0.21.5
      '@esbuild/darwin-arm64': 0.21.5
      '@esbuild/darwin-x64': 0.21.5
      '@esbuild/freebsd-arm64': 0.21.5
      '@esbuild/freebsd-x64': 0.21.5
      '@esbuild/linux-arm': 0.21.5
      '@esbuild/linux-arm64': 0.21.5
      '@esbuild/linux-ia32': 0.21.5
      '@esbuild/linux-loong64': 0.21.5
      '@esbuild/linux-mips64el': 0.21.5
      '@esbuild/linux-ppc64': 0.21.5
      '@esbuild/linux-riscv64': 0.21.5
      '@esbuild/linux-s390x': 0.21.5
      '@esbuild/linux-x64': 0.21.5
      '@esbuild/netbsd-x64': 0.21.5
      '@esbuild/openbsd-x64': 0.21.5
      '@esbuild/sunos-x64': 0.21.5
      '@esbuild/win32-arm64': 0.21.5
      '@esbuild/win32-ia32': 0.21.5
      '@esbuild/win32-x64': 0.21.5
    dev: true

  /escalade@3.2.0:
    resolution: {integrity: sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==}
    engines: {node: '>=6'}
    dev: true

  /escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  /eslint-plugin-react-hooks@5.1.0-rc-fb9a90fa48-20240614(eslint@9.14.0):
    resolution: {integrity: sha512-xsiRwaDNF5wWNC4ZHLut+x/YcAxksUd9Rizt7LaEn3bV8VyYRpXnRJQlLOfYaVy9esk4DFP4zPPnoNVjq5Gc0w==}
    engines: {node: '>=10'}
    peerDependencies:
      eslint: ^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0
    dependencies:
      eslint: 9.14.0
    dev: true

  /eslint-plugin-react-refresh@0.4.14(eslint@9.14.0):
    resolution: {integrity: sha512-aXvzCTK7ZBv1e7fahFuR3Z/fyQQSIQ711yPgYRj+Oj64tyTgO4iQIDmYXDBqvSWQ/FA4OSCsXOStlF+noU0/NA==}
    peerDependencies:
      eslint: '>=7'
    dependencies:
      eslint: 9.14.0
    dev: true

  /eslint-scope@8.2.0:
    resolution: {integrity: sha512-PHlWUfG6lvPc3yvP5A4PNyBL1W8fkDUccmI21JUu/+GKZBoH/W5u6usENXUrWFRsyoW5ACUjFGgAFQp5gUlb/A==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0
    dev: true

  /eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    dev: true

  /eslint-visitor-keys@4.2.0:
    resolution: {integrity: sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dev: true

  /eslint@9.14.0:
    resolution: {integrity: sha512-c2FHsVBr87lnUtjP4Yhvk4yEhKrQavGafRA/Se1ouse8PfbfC/Qh9Mxa00yWsZRlqeUB9raXip0aiiUZkgnr9g==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    hasBin: true
    peerDependencies:
      jiti: '*'
    peerDependenciesMeta:
      jiti:
        optional: true
    dependencies:
      '@eslint-community/eslint-utils': 4.4.1(eslint@9.14.0)
      '@eslint-community/regexpp': 4.12.1
      '@eslint/config-array': 0.18.0
      '@eslint/core': 0.7.0
      '@eslint/eslintrc': 3.1.0
      '@eslint/js': 9.14.0
      '@eslint/plugin-kit': 0.2.2
      '@humanfs/node': 0.16.6
      '@humanwhocodes/module-importer': 1.0.1
      '@humanwhocodes/retry': 0.4.1
      '@types/estree': 1.0.6
      '@types/json-schema': 7.0.15
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.3
      debug: 4.3.7
      escape-string-regexp: 4.0.0
      eslint-scope: 8.2.0
      eslint-visitor-keys: 4.2.0
      espree: 10.3.0
      esquery: 1.6.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 8.0.0
      find-up: 5.0.0
      glob-parent: 6.0.2
      ignore: 5.3.2
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      json-stable-stringify-without-jsonify: 1.0.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.4
      text-table: 0.2.0
    transitivePeerDependencies:
      - supports-color
    dev: true

  /espree@10.3.0:
    resolution: {integrity: sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    dependencies:
      acorn: 8.14.0
      acorn-jsx: 5.3.2(acorn@8.14.0)
      eslint-visitor-keys: 4.2.0
    dev: true

  /esquery@1.6.0:
    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}
    engines: {node: '>=0.10'}
    dependencies:
      estraverse: 5.3.0
    dev: true

  /esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}
    dependencies:
      estraverse: 5.3.0
    dev: true

  /estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}
    dev: true

  /esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}
    dev: true

  /fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}
    dev: true

  /fast-glob@3.3.2:
    resolution: {integrity: sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==}
    engines: {node: '>=8.6.0'}
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8
    dev: true

  /fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}
    dev: true

  /fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}
    dev: true

  /fastq@1.17.1:
    resolution: {integrity: sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==}
    dependencies:
      reusify: 1.0.4
    dev: true

  /file-entry-cache@8.0.0:
    resolution: {integrity: sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==}
    engines: {node: '>=16.0.0'}
    dependencies:
      flat-cache: 4.0.1
    dev: true

  /fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}
    dependencies:
      to-regex-range: 5.0.1
    dev: true

  /find-root@1.1.0:
    resolution: {integrity: sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==}
    dev: false

  /find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0
    dev: true

  /flat-cache@4.0.1:
    resolution: {integrity: sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==}
    engines: {node: '>=16'}
    dependencies:
      flatted: 3.3.1
      keyv: 4.5.4
    dev: true

  /flatted@3.3.1:
    resolution: {integrity: sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==}
    dev: true

  /follow-redirects@1.15.9:
    resolution: {integrity: sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true
    dev: false

  /form-data@4.0.1:
    resolution: {integrity: sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==}
    engines: {node: '>= 6'}
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      mime-types: 2.1.35
    dev: false

  /fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}
    dev: false

  /gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}
    dev: true

  /get-tsconfig@4.8.1:
    resolution: {integrity: sha512-k9PN+cFBmaLWtVz29SkUoqU5O0slLuHJXt/2P+tMVFT+phsSGXGkp9t3rQIqdz0e+06EHNGs3oM6ZX1s2zHxRg==}
    dependencies:
      resolve-pkg-maps: 1.0.0
    dev: true

  /glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}
    dependencies:
      is-glob: 4.0.3
    dev: true

  /glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}
    dependencies:
      is-glob: 4.0.3
    dev: true

  /globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  /globals@14.0.0:
    resolution: {integrity: sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==}
    engines: {node: '>=18'}
    dev: true

  /graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}
    dev: true

  /has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}
    dev: true

  /hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}
    dependencies:
      function-bind: 1.1.2
    dev: false

  /hoist-non-react-statics@3.3.2:
    resolution: {integrity: sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==}
    dependencies:
      react-is: 16.13.1
    dev: false

  /ignore@5.3.2:
    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}
    engines: {node: '>= 4'}
    dev: true

  /import-fresh@3.3.0:
    resolution: {integrity: sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==}
    engines: {node: '>=6'}
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  /imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}
    dev: true

  /is-arrayish@0.2.1:
    resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}
    dev: false

  /is-core-module@2.15.1:
    resolution: {integrity: sha512-z0vtXSwucUJtANQWldhbtbt7BnL0vxiFjIdDLAatwhDYty2bad6s+rijD6Ri4YuYJubLzIJLUidCh09e1djEVQ==}
    engines: {node: '>= 0.4'}
    dependencies:
      hasown: 2.0.2
    dev: false

  /is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}
    dev: true

  /is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}
    dependencies:
      is-extglob: 2.1.1
    dev: true

  /is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}
    dev: true

  /isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}
    dev: true

  /js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  /js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true
    dependencies:
      argparse: 2.0.1
    dev: true

  /jsesc@3.0.2:
    resolution: {integrity: sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==}
    engines: {node: '>=6'}
    hasBin: true

  /json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}
    dev: true

  /json-parse-even-better-errors@2.3.1:
    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}
    dev: false

  /json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}
    dev: true

  /json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}
    dev: true

  /json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true
    dev: true

  /keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}
    dependencies:
      json-buffer: 3.0.1
    dev: true

  /levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0
    dev: true

  /lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}
    dev: false

  /locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}
    dependencies:
      p-locate: 5.0.0
    dev: true

  /lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}
    dev: true

  /loose-envify@1.4.0:
    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}
    hasBin: true
    dependencies:
      js-tokens: 4.0.0
    dev: false

  /lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}
    dependencies:
      yallist: 3.1.1
    dev: true

  /merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}
    dev: true

  /micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1
    dev: true

  /mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}
    dev: false

  /mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}
    dependencies:
      mime-db: 1.52.0
    dev: false

  /minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}
    dependencies:
      brace-expansion: 1.1.11
    dev: true

  /minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}
    dependencies:
      brace-expansion: 2.0.1
    dev: true

  /ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  /nanoid@3.3.7:
    resolution: {integrity: sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  /natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}
    dev: true

  /node-releases@2.0.18:
    resolution: {integrity: sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==}
    dev: true

  /object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}
    dev: false

  /optionator@0.9.4:
    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}
    engines: {node: '>= 0.8.0'}
    dependencies:
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0
      word-wrap: 1.2.5
    dev: true

  /p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}
    dependencies:
      yocto-queue: 0.1.0
    dev: true

  /p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}
    dependencies:
      p-limit: 3.1.0
    dev: true

  /parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}
    dependencies:
      callsites: 3.1.0

  /parse-json@5.2.0:
    resolution: {integrity: sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==}
    engines: {node: '>=8'}
    dependencies:
      '@babel/code-frame': 7.26.2
      error-ex: 1.3.2
      json-parse-even-better-errors: 2.3.1
      lines-and-columns: 1.2.4
    dev: false

  /path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}
    dev: true

  /path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}
    dev: true

  /path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}
    dev: false

  /path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}
    dev: false

  /picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  /picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}
    dev: true

  /postcss-value-parser@4.2.0:
    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}
    dev: false

  /postcss@8.4.38:
    resolution: {integrity: sha512-Wglpdk03BSfXkHoQa3b/oulrotAkwrlLDRSOb9D0bN86FdRyE9lppSp33aHNPgBa0JKCoB+drFLZkQoRRYae5A==}
    engines: {node: ^10 || ^12 || >=14}
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.1.1
      source-map-js: 1.2.1
    dev: false

  /postcss@8.4.47:
    resolution: {integrity: sha512-56rxCq7G/XfB4EkXq9Egn5GCqugWvDFjafDOThIdMBsI15iqPqR5r15TfSr1YPYeEI19YeaXMCbY6u88Y76GLQ==}
    engines: {node: ^10 || ^12 || >=14}
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.1.1
      source-map-js: 1.2.1
    dev: true

  /prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}
    dev: true

  /prop-types@15.8.1:
    resolution: {integrity: sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==}
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1
      react-is: 16.13.1
    dev: false

  /proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}
    dev: false

  /punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}
    dev: true

  /queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}
    dev: true

  /react-dom@18.3.1(react@18.3.1):
    resolution: {integrity: sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==}
    peerDependencies:
      react: ^18.3.1
    dependencies:
      loose-envify: 1.4.0
      react: 18.3.1
      scheduler: 0.23.2
    dev: false

  /react-drag-drop-files@2.4.0(react-dom@18.3.1)(react@18.3.1):
    resolution: {integrity: sha512-MGPV3HVVnwXEXq3gQfLtSU3jz5j5jrabvGedokpiSEMoONrDHgYl/NpIOlfsqGQ4zBv1bzzv7qbKURZNOX32PA==}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0
    dependencies:
      prop-types: 15.8.1
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      styled-components: 6.1.13(react-dom@18.3.1)(react@18.3.1)
    dev: false

  /react-is@16.13.1:
    resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}
    dev: false

  /react-is@18.3.1:
    resolution: {integrity: sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==}
    dev: false

  /react-refresh@0.14.2:
    resolution: {integrity: sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA==}
    engines: {node: '>=0.10.0'}
    dev: true

  /react-router-dom@6.27.0(react-dom@18.3.1)(react@18.3.1):
    resolution: {integrity: sha512-+bvtFWMC0DgAFrfKXKG9Fc+BcXWRUO1aJIihbB79xaeq0v5UzfvnM5houGUm1Y461WVRcgAQ+Clh5rdb1eCx4g==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      react: '>=16.8'
      react-dom: '>=16.8'
    dependencies:
      '@remix-run/router': 1.20.0
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      react-router: 6.27.0(react@18.3.1)
    dev: false

  /react-router@6.27.0(react@18.3.1):
    resolution: {integrity: sha512-YA+HGZXz4jaAkVoYBE98VQl+nVzI+cVI2Oj/06F5ZM+0u3TgedN9Y9kmMRo2mnkSK2nCpNQn0DVob4HCsY/WLw==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      react: '>=16.8'
    dependencies:
      '@remix-run/router': 1.20.0
      react: 18.3.1
    dev: false

  /react-transition-group@4.4.5(react-dom@18.3.1)(react@18.3.1):
    resolution: {integrity: sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==}
    peerDependencies:
      react: '>=16.6.0'
      react-dom: '>=16.6.0'
    dependencies:
      '@babel/runtime': 7.26.0
      dom-helpers: 5.2.1
      loose-envify: 1.4.0
      prop-types: 15.8.1
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
    dev: false

  /react@18.3.1:
    resolution: {integrity: sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==}
    engines: {node: '>=0.10.0'}
    dependencies:
      loose-envify: 1.4.0
    dev: false

  /regenerator-runtime@0.14.1:
    resolution: {integrity: sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==}
    dev: false

  /resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  /resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}
    dev: true

  /resolve@1.22.8:
    resolution: {integrity: sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==}
    hasBin: true
    dependencies:
      is-core-module: 2.15.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0
    dev: false

  /reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}
    dev: true

  /rollup@4.24.4:
    resolution: {integrity: sha512-vGorVWIsWfX3xbcyAS+I047kFKapHYivmkaT63Smj77XwvLSJos6M1xGqZnBPFQFBRZDOcG1QnYEIxAvTr/HjA==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true
    dependencies:
      '@types/estree': 1.0.6
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.24.4
      '@rollup/rollup-android-arm64': 4.24.4
      '@rollup/rollup-darwin-arm64': 4.24.4
      '@rollup/rollup-darwin-x64': 4.24.4
      '@rollup/rollup-freebsd-arm64': 4.24.4
      '@rollup/rollup-freebsd-x64': 4.24.4
      '@rollup/rollup-linux-arm-gnueabihf': 4.24.4
      '@rollup/rollup-linux-arm-musleabihf': 4.24.4
      '@rollup/rollup-linux-arm64-gnu': 4.24.4
      '@rollup/rollup-linux-arm64-musl': 4.24.4
      '@rollup/rollup-linux-powerpc64le-gnu': 4.24.4
      '@rollup/rollup-linux-riscv64-gnu': 4.24.4
      '@rollup/rollup-linux-s390x-gnu': 4.24.4
      '@rollup/rollup-linux-x64-gnu': 4.24.4
      '@rollup/rollup-linux-x64-musl': 4.24.4
      '@rollup/rollup-win32-arm64-msvc': 4.24.4
      '@rollup/rollup-win32-ia32-msvc': 4.24.4
      '@rollup/rollup-win32-x64-msvc': 4.24.4
      fsevents: 2.3.3
    dev: true

  /run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}
    dependencies:
      queue-microtask: 1.2.3
    dev: true

  /scheduler@0.23.2:
    resolution: {integrity: sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==}
    dependencies:
      loose-envify: 1.4.0
    dev: false

  /semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true
    dev: true

  /semver@7.6.3:
    resolution: {integrity: sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==}
    engines: {node: '>=10'}
    hasBin: true
    dev: true

  /shallowequal@1.1.0:
    resolution: {integrity: sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ==}
    dev: false

  /shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}
    dependencies:
      shebang-regex: 3.0.0
    dev: true

  /shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}
    dev: true

  /source-map-js@1.2.1:
    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
    engines: {node: '>=0.10.0'}

  /source-map@0.5.7:
    resolution: {integrity: sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==}
    engines: {node: '>=0.10.0'}
    dev: false

  /strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}
    dev: true

  /styled-components@6.1.13(react-dom@18.3.1)(react@18.3.1):
    resolution: {integrity: sha512-M0+N2xSnAtwcVAQeFEsGWFFxXDftHUD7XrKla06QbpUMmbmtFBMMTcKWvFXtWxuD5qQkB8iU5gk6QASlx2ZRMw==}
    engines: {node: '>= 16'}
    peerDependencies:
      react: '>= 16.8.0'
      react-dom: '>= 16.8.0'
    dependencies:
      '@emotion/is-prop-valid': 1.2.2
      '@emotion/unitless': 0.8.1
      '@types/stylis': 4.2.5
      css-to-react-native: 3.2.0
      csstype: 3.1.3
      postcss: 8.4.38
      react: 18.3.1
      react-dom: 18.3.1(react@18.3.1)
      shallowequal: 1.1.0
      stylis: 4.3.2
      tslib: 2.6.2
    dev: false

  /stylis@4.2.0:
    resolution: {integrity: sha512-Orov6g6BB1sDfYgzWfTHDOxamtX1bE/zo104Dh9e6fqJ3PooipYyfJ0pUmrZO2wAvO8YbEyeFrkV91XTsGMSrw==}
    dev: false

  /stylis@4.3.2:
    resolution: {integrity: sha512-bhtUjWd/z6ltJiQwg0dUfxEJ+W+jdqQd8TbWLWyeIJHlnsqmGLRFFd8e5mA0AZi/zx90smXRlN66YMTcaSFifg==}
    dev: false

  /supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}
    dependencies:
      has-flag: 4.0.0
    dev: true

  /supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}
    dev: false

  /text-table@0.2.0:
    resolution: {integrity: sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==}
    dev: true

  /to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}
    dependencies:
      is-number: 7.0.0
    dev: true

  /ts-api-utils@1.4.0(typescript@5.6.3):
    resolution: {integrity: sha512-032cPxaEKwM+GT3vA5JXNzIaizx388rhsSW79vGRNGXfRRAdEAn2mvk36PvK5HnOchyWZ7afLEXqYCvPCrzuzQ==}
    engines: {node: '>=16'}
    peerDependencies:
      typescript: '>=4.2.0'
    dependencies:
      typescript: 5.6.3
    dev: true

  /tsconfig-to-swcconfig@2.8.1:
    resolution: {integrity: sha512-QxsJZEE0ofziAZTb5phH+As84dovQZOE2sVrB93kLFs5UUlnsCKuT2WGmQt/bNl4sr5YM1MqFDdF6D8vzMnZwQ==}
    hasBin: true
    dependencies:
      '@fastify/deepmerge': 1.3.0
      get-tsconfig: 4.8.1
    dev: true

  /tslib@2.6.2:
    resolution: {integrity: sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==}
    dev: false

  /type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}
    dependencies:
      prelude-ls: 1.2.1
    dev: true

  /typescript-eslint@8.13.0(eslint@9.14.0)(typescript@5.6.3):
    resolution: {integrity: sha512-vIMpDRJrQd70au2G8w34mPps0ezFSPMEX4pXkTzUkrNbRX+36ais2ksGWN0esZL+ZMaFJEneOBHzCgSqle7DHw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true
    dependencies:
      '@typescript-eslint/eslint-plugin': 8.13.0(@typescript-eslint/parser@8.13.0)(eslint@9.14.0)(typescript@5.6.3)
      '@typescript-eslint/parser': 8.13.0(eslint@9.14.0)(typescript@5.6.3)
      '@typescript-eslint/utils': 8.13.0(eslint@9.14.0)(typescript@5.6.3)
      typescript: 5.6.3
    transitivePeerDependencies:
      - eslint
      - supports-color
    dev: true

  /typescript@5.6.3:
    resolution: {integrity: sha512-hjcS1mhfuyi4WW8IWtjP7brDrG2cuDZukyrYrSauoXGNgx0S7zceP07adYkJycEr56BOUTNPzbInooiN3fn1qw==}
    engines: {node: '>=14.17'}
    hasBin: true
    dev: true

  /update-browserslist-db@1.1.1(browserslist@4.24.2):
    resolution: {integrity: sha512-R8UzCaa9Az+38REPiJ1tXlImTJXlVfgHZsglwBD/k6nj76ctsH1E3q4doGrukiLQd3sGQYu56r5+lo5r94l29A==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'
    dependencies:
      browserslist: 4.24.2
      escalade: 3.2.0
      picocolors: 1.1.1
    dev: true

  /uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}
    dependencies:
      punycode: 2.3.1
    dev: true

  /vite@5.4.10:
    resolution: {integrity: sha512-1hvaPshuPUtxeQ0hsVH3Mud0ZanOLwVTneA1EgbAM5LhaZEqyPWGRQ7BtaMvUrTDeEaC8pxtj6a6jku3x4z6SQ==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true
    peerDependencies:
      '@types/node': ^18.0.0 || >=20.0.0
      less: '*'
      lightningcss: ^1.21.0
      sass: '*'
      sass-embedded: '*'
      stylus: '*'
      sugarss: '*'
      terser: ^5.4.0
    peerDependenciesMeta:
      '@types/node':
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      sass-embedded:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true
    dependencies:
      esbuild: 0.21.5
      postcss: 8.4.47
      rollup: 4.24.4
    optionalDependencies:
      fsevents: 2.3.3
    dev: true

  /which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true
    dependencies:
      isexe: 2.0.0
    dev: true

  /word-wrap@1.2.5:
    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}
    engines: {node: '>=0.10.0'}
    dev: true

  /yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}
    dev: true

  /yaml@1.10.2:
    resolution: {integrity: sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==}
    engines: {node: '>= 6'}
    dev: false

  /yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}
    dev: true


================================================================
File: web/ui/src/App.tsx
================================================================
import "./App.css";
import {Box, Container, createTheme, CssBaseline, ThemeOptions, ThemeProvider, Typography} from "@mui/material";
import {LoadingIcon} from "./components/LoadingIcon";
import React from "react";
import {Outlet} from "react-router-dom";
import Footer from "./components/Footer";
import TopNav from "./components/TopNav";

const themeOptions: ThemeOptions = {
    palette: {
        mode: 'dark',
        primary: {
            main: '#1565c0',
        },
        secondary: {
            main: '#37474f',
        },
        error: {
            main: '#b71c1c',
        },
        warning: {
            main: '#f4511e',
        },
    },
};

const theme = createTheme(themeOptions);

function App() {
    return (
        <ThemeProvider theme={theme}>
            <TopNav/>
            <Typography variant="h3" sx={{ml: 2, mt: 2, fontFamily: 'Google Sans', fontWeight: 800, color: '#4285F4'}}>Me<span
                style={{color: '#FBBC04'}}>d</span>ia <span style={{color: '#DB4437'}}>S</span>ea<span
                style={{color: '#0F9D58'}}>r</span>ch</Typography>
            <Box
                sx={{
                    position: "relative",
                    display: "flex",
                    flexDirection: "column",
                    minHeight: "100vh",
                    minWidth: "100vw"

                }}
            >
                <CssBaseline/>
                <Container
                    component="main"
                    sx={{mt: 3, pb: "3.5em", mb: 2}}
                    maxWidth="xl"
                >
                    <React.Suspense fallback={<LoadingIcon/>}>
                        <Outlet/>
                    </React.Suspense>
                </Container>
                <Footer/>
            </Box>
        </ThemeProvider>
    );
}

export default App;


================================================================
File: web/ui/src/components/Cast.tsx
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {Grid2, Typography} from "@mui/material";
import React from "react";
import {CastMember} from "../shared/model";

const Cast = ({cast}: { cast: CastMember[] }) => {
    return (
        <React.Fragment>
            <Typography variant="h6">Cast</Typography>
            <Grid2 container spacing={2} sx={{border: '1px solid #666', p: 1}}>
                <Grid2 size={8} sx={{fontWeight: 900, textAlign: 'center'}}>Character Name</Grid2>
                <Grid2 size={4} sx={{fontWeight: 900, textAlign: 'center'}}>Actor/Actress</Grid2>
                {cast.map((c) => (
                    <>
                        <Grid2 size={8}><Typography variant="body2"><span
                            style={{fontWeight: 800, marginRight: '3em'}}>{c.character_name}</span></Typography></Grid2>
                        <Grid2 size={4}><Typography variant="body2">{c.actor_name}</Typography></Grid2>
                    </>
                ))}
            </Grid2>
        </React.Fragment>
    );
}

export default Cast


================================================================
File: web/ui/src/components/Footer.tsx
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {Box, Container, Typography} from "@mui/material"

const Footer = () => {
    return (
        <Box component="footer" sx={{
            position: 'absolute',
            bottom: 0,
            height: '3.5em',
            width: '100vw',
            zIndex: 999,
            borderTop: '0.5px solid #AAA',
            alignContent: 'center'
        }}>
            <Container maxWidth="xl">
                <Typography variant="body2" sx={{display: 'inline', pr: 5}}>&copy;2024 Google LLC</Typography>
                <Typography variant="body2" sx={{display: 'inline'}}><a href="#">About Google</a> | <a href="#">Google
                    Cloud Terms</a></Typography>
            </Container>
        </Box>
    )
}

export default Footer

================================================================
File: web/ui/src/components/LoadingIcon.tsx
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {Box} from '@mui/material';
import image from '../assets/loader.webp';

export const LoadingIcon = () => {
    return (
        <Box
            sx={{
                position: 'relative',
                width: '100%',
                minHeight: '100%',
                textAlign: 'center',
                paddingTop: '20%',
            }}>
            <img src={image} style={{width: '200px'}} alt="loading icon"/>
        </Box>
    );
};

================================================================
File: web/ui/src/components/MediaResults.tsx
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {Paper, Typography} from "@mui/material"
import {MediaResult} from "../shared/model"
import MediaRow from "./MediaRow"

const MediaResults = ({results}: { results: MediaResult[] }) => {
    if (results && results.length > 0) {
        const mappedResults = results.map((r) => (<MediaRow key={r.id} result={r}/>))
        return (
            <Paper sx={{p: 2, mb: 2}} elevation={5}>
                <Typography variant="h4" sx={{mb: 2}}>Results</Typography>
                {mappedResults}
            </Paper>
        )
    } else {
        return (<></>)
    }
}
export default MediaResults

================================================================
File: web/ui/src/components/MediaRow.tsx
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {Box, Grid2, Typography} from "@mui/material";
import SceneData from "./SceneData";
import {MediaResult, Scene} from "../shared/model";
import Cast from "./Cast";

const MediaRow = ({result}: { result: MediaResult }) => {
    return (
        <Grid2 container spacing={1} sx={{pb: 4}}>
            <Grid2 size={4} sx={{textAlign: 'left', padding: 1}}>
                <Typography variant="h5" sx={{mb: 1}} color={"info"}>{result.title}</Typography>
                <Typography variant="h6">Summary</Typography>
                <Box sx={{pl: 2, pr: 2}}>
                    <Typography variant="caption">{result.summary}</Typography>
                </Box>
                <Cast cast={result.cast}/>
            </Grid2>
            <Grid2 size={8}>
                {result.scenes.map((s: Scene, j:number) => (
                    <Grid2 container spacing={2} sx={{p: 1, mb: 3}} key={`result_${result.id}_${j}`}>
                        {/* FIX: Pass the mediaId to the SceneData component */}
                        <SceneData key={`${result.id}-${s.sequence}`} mediaId={result.id}  scene={s}/>
                    </Grid2>
                ))}
            </Grid2>
        </Grid2>
    );
};

export default MediaRow

================================================================
File: web/ui/src/components/SceneData.tsx
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {Box, Grid2, Typography, CircularProgress} from "@mui/material";
import {Scene} from "../shared/model";
import React, {useState, useEffect} from 'react';
import axios from 'axios';

const SceneData = ({mediaId, scene}: { mediaId: string, scene: Scene }) => {
    const [videoUrl, setVideoUrl] = useState<string | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchSignedUrl = async () => {
            try {
                setLoading(true);
                setError(null);
                const response = await axios.get(`/api/v1/media/${mediaId}/stream`);
                setVideoUrl(response.data.url);
            } catch (err) {
                setError("Could not load video.");
                console.error("Error fetching signed URL:", err);
            } finally {
                setLoading(false);
            }
        };

        fetchSignedUrl();
    }, [mediaId]);


    const formatScript = (val: string): string => {
        return val.replace(/\n/g, "<br/>");
    }

    const GetStartTimeInSeconds = (): number => {
        const parts = scene.start.split(':');
        return parseInt(parts[0])*60*60 + parseInt(parts[1])*60 + parseInt(parts[2]);
    }

    const GetEndTimeInSeconds = (): number => {
        const parts = scene.end.split(':');
        return parseInt(parts[0])*60*60 + parseInt(parts[1])*60 + parseInt(parts[2]);
    }

    const videoSrc = videoUrl ? `${videoUrl}#t=${GetStartTimeInSeconds()},${GetEndTimeInSeconds()}` : '';

    return (
        <>
            <Grid2 size={6}>
                <Grid2 container spacing={2}>
                    <Grid2 size={4} sx={{fontWeight: 800}}>Sequence</Grid2>
                    <Grid2 size={4} sx={{fontWeight: 800}}>Start</Grid2>
                    <Grid2 size={4} sx={{fontWeight: 800}}>End</Grid2>

                    <Grid2 size={4}>{scene.sequence}</Grid2>
                    <Grid2 size={4}>{scene.start}</Grid2>
                    <Grid2 size={4}>{scene.end}</Grid2>
                </Grid2>
            </Grid2>
            <Grid2 size={6} >
                <Box sx={{display: 'flex', flex: 1, flexGrow: 1, justifyContent: 'center', justifyItems: 'center', alignItems: 'center', alignContent: 'center', padding: 2, minHeight: '150px'}}>
                {loading && <CircularProgress />}
                {error && <Typography color="error">{error}</Typography>}
                {videoUrl && (
                    <video controls style={{border: '1px solid #4285F4  ', borderRadius: '10px', boxShadow: '1px 1px 6px 1px #666', width: '100%'}}>
                        <source src={videoSrc} type="video/mp4" />
                        Your browser does not support the video tag.
                    </video>
                )}
                </Box>
            </Grid2>
            <Grid2 size={12} sx={{textAlign: 'left'}}><Typography component="div" variant="body2">
                <div dangerouslySetInnerHTML={{__html: formatScript(scene.script)}}/>
            </Typography></Grid2>
        </>
    )
};

export default SceneData


================================================================
File: web/ui/src/components/SearchBar.tsx
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {FormControl, IconButton, InputAdornment, InputLabel, OutlinedInput, Paper,} from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import {MediaResult} from "../shared/model";
import axios from "axios";
import {useState} from "react";

// Use the environment variable for the API base URL.
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '';

type SearchBarArgs = {
    setResults: (values: MediaResult[]) => void
    setMessage: (value: string) => void
    setOpen: (value: boolean) => void
}

const SearchBar = ({setResults, setMessage, setOpen}: SearchBarArgs) => {
    const runQuery = () => {
        setMessage("Searching...")
        setOpen(true)
        setResults([])
        // Use a relative path. The Vite proxy will forward this to the Go backend.
        const apiUrl = `/api/v1/media?count=5&s=${query}`;
        axios
            .get(apiUrl)
            .then((r) => {
                console.log(r)
                if (r.status == 200) {
                    setResults([...r.data]);
                } else {
                    setMessage(
                        `Invalid HTTP Response: ${r.status} ${r.statusText} - ${r.data}`,
                    );
                    setOpen(true);
                }
            })
            .catch((e) => {
                setMessage(e);
                setOpen(true);
            });
    };

    const [query, setQuery] = useState<string>(null!);

    const keyUp = (e: React.KeyboardEvent<HTMLTextAreaElement | HTMLInputElement>) => {
        if (e.key === 'Enter') {
            runQuery()
        }
    }

    return (
        <Paper
            sx={{p: 2, mb: 2, display: "flex", flexDirection: "row", flex: 1}}
            elevation={4}
        >
            <FormControl variant="outlined" fullWidth>
                <InputLabel htmlFor="search-adornment">Search</InputLabel>
                <OutlinedInput
                    id="search-adornment"
                    type="text"
                    onChange={(v) => setQuery(v.target.value)}
                    onKeyDown={keyUp}
                    endAdornment={
                        <InputAdornment position="end">
                            <IconButton
                                sx={{p: "10px", mt: "2px"}}
                                aria-label="search"
                                onClick={runQuery}
                            >
                                <SearchIcon/>
                            </IconButton>
                        </InputAdornment>
                    }
                    label="Search"
                />
            </FormControl>
        </Paper>
    );
};

export default SearchBar;


================================================================
File: web/ui/src/components/TopNav.tsx
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';


import GoogleIcon from '@mui/icons-material/Google';
import SearchIcon from '@mui/icons-material/Search';
import FileUploadIcon from '@mui/icons-material/FileUpload';
import AssessmentIcon from '@mui/icons-material/Assessment';
import {useNavigate} from 'react-router-dom';

const TopNav = () => {
    const nav = useNavigate();

    return (
        <Box sx={{flexGrow: 1}}>
            <AppBar position="static">
                <Toolbar>
                    <IconButton
                        size="large"
                        edge="start"
                        color="inherit"
                        aria-label="menu"
                        sx={{mr: 2}}
                        onClick={() => nav("/")}
                    >
                        <GoogleIcon/>
                    </IconButton>
                    <Typography variant="h6" component="div" sx={{flexGrow: 1}}>
                        Media Search
                    </Typography>

                    <IconButton
                        size="large"
                        edge="start"
                        color="inherit"
                        aria-label="menu"
                        sx={{mr: 2}}
                        onClick={() => nav("/")}
                    >
                        <SearchIcon/>
                    </IconButton>

                    <IconButton
                        size="large"
                        edge="start"
                        color="inherit"
                        aria-label="menu"
                        sx={{mr: 2}}
                        onClick={() => nav("/uploads")}
                    >
                        <FileUploadIcon/>
                    </IconButton>

                    <IconButton
                        size="large"
                        edge="start"
                        color="inherit"
                        aria-label="menu"
                        sx={{mr: 2}}
                        onClick={() => nav("/dashboard")}
                    >
                        <AssessmentIcon/>
                    </IconButton>
                </Toolbar>
            </AppBar>
        </Box>
    );
}

export default TopNav;

================================================================
File: web/ui/src/index.css
================================================================
:root {
    font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
    line-height: 1.5;
    font-weight: 400;

    color-scheme: light dark;
    color: rgba(255, 255, 255, 0.87);
    background-color: #242424;

    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

a {
    font-weight: 500;
    color: #646cff;
    text-decoration: inherit;
}

a:hover {
    color: #535bf2;
}

body {
    margin: 0;
    display: flex;
    place-items: center;
    min-width: 320px;
    min-height: 100vh;
}

h1 {
    font-size: 3.2em;
    line-height: 1.1;
}

button {
    border-radius: 8px;
    border: 1px solid transparent;
    padding: 0.6em 1.2em;
    font-size: 1em;
    font-weight: 500;
    font-family: inherit;
    background-color: #1a1a1a;
    cursor: pointer;
    transition: border-color 0.25s;
}

button:hover {
    border-color: #646cff;
}

button:focus,
button:focus-visible {
    outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
    :root {
        color: #213547;
        background-color: #ffffff;
    }

    a:hover {
        color: #747bff;
    }

    button {
        background-color: #f9f9f9;
    }
}


================================================================
File: web/ui/src/main.tsx
================================================================
import React from 'react';
import {createRoot} from 'react-dom/client'
import App from './App.tsx'
import './index.css'

import {createBrowserRouter, Navigate, RouterProvider} from 'react-router-dom';

const Search = React.lazy(() => import('./pages/Search'));
const FileUpload = React.lazy(() => import('./pages/FileUpload'));
const Dashboard = React.lazy(() => import('./pages/Dashboard'))

const ErrorBoundary = () => {
    return (<Navigate to="/"/>)
}

const router = createBrowserRouter([
    {
        path: "/",
        element: <App/>,
        children: [
            {
                index: true,
                element: <Search/>,
                errorElement: <ErrorBoundary/>,
            },
            {
                path: "/uploads",
                element: <FileUpload/>,
                errorElement: <ErrorBoundary/>,
            },
            {
                path: "/dashboard",
                element: <Dashboard/>,
                errorElement: <ErrorBoundary/>,
            }
        ]
    }
])

createRoot(document.getElementById('root')!).render(<RouterProvider router={router}/>)

================================================================
File: web/ui/src/pages/Dashboard.tsx
================================================================
import {Container} from "@mui/material";

const Dashboard = () => {
    return(<Container></Container>)
}

export default Dashboard

================================================================
File: web/ui/src/pages/FileUpload.css
================================================================
/**
 * Copyright 2024 Google, LLC
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     https://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

.upload-files {
    min-height: 90px;
}

.upload-files div span {
    font-size: 14pt;
}

.upload-files svg {
    height: 60px;
    width: 60px;
}


================================================================
File: web/ui/src/pages/FileUpload.tsx
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import React from "react";
import {
    Box,
    Button,
    Container,
    Grid2,
    IconButton,
    List,
    ListItem,
    Snackbar,
    SnackbarCloseReason,
    Stack,
    Typography
} from "@mui/material";
import {useState} from "react";
import {FileUploader} from "react-drag-drop-files";
import "./FileUpload.css"
import axios from "axios";
import CloseIcon from '@mui/icons-material/Close';

const SupportedFileTypes = ["mp4"]

const FileListView = ({listOfFiles}: {listOfFiles: FileList}) => {
    if (listOfFiles != null) {
        const out = []
        for (let i = 0; i < listOfFiles.length; i++) {
            out.push(<ListItem key={listOfFiles[i].name}>{listOfFiles[i].name}</ListItem>)
        }

        return (
            <List sx={{pt: 0, mt: 0}}>
                {out.map(item => item)}
            </List>
        )
    }
    return(<Container>No Videos</Container>)
}

const FileUpload = () => {
    const [open, setOpen] = useState(false);
    const [files, setFiles] = useState<FileList>(null!);

    const handleChange = (file: any) => {
        setFiles(file);
    }
    const onDrop = (file: any) => {
        console.log('drop', file);
    };
    const onSelect = (file: any) => {
        console.log('test', file);
    };

    const handleClose = (
        _: React.SyntheticEvent | Event,
        reason?: SnackbarCloseReason,
    ) => {
        if (reason === 'clickaway') {
            return;
        }
        setOpen(false);
    };

    const onTypeError = (err = 1) => console.log(err);
    const onSizeError = (err = 1) => console.log(err);

    const submitData = () => {
        if (!files) {
            return
        }
        const form = new FormData()
        for (const file of files) {
            form.append("files", file)
        }
        // The URL is now relative. Vite's proxy will handle forwarding this to the backend.
        axios.post("/api/v1/uploads", form, {
            headers: {
                'Content-Type': 'multipart/form-data'
            }
        }).then(r => {
            setOpen(true);
            setFiles(null!)
            console.log(r)
        }).catch(e => {
            console.log(e)
        })
    }

    const action = (
        <React.Fragment>
            <Button color="secondary" size="small" onClick={handleClose}>
                Close
            </Button>
            <IconButton
                size="small"
                aria-label="close"
                color="inherit"
                onClick={handleClose}
            >
                <CloseIcon fontSize="small" />
            </IconButton>
        </React.Fragment>
    );


    return (
        <Container>
            <Stack spacing={2}>
                <Typography variant={'h5'}>Upload video file(s)</Typography>
                <Grid2 container>
                    <Grid2 size={6}>
                        <FileUploader
                            classes="upload-files"
                            fileOrFiles={files}
                            onTypeError={onTypeError}
                            handleChange={handleChange}
                            name="file"
                            types={SupportedFileTypes}
                            onSizeError={onSizeError}
                            onDrop={onDrop}
                            onSelect={onSelect}
                            label="Upload file here"
                            dropMessageStyle={{backgroundColor: '#34A853'}}
                            multiple
                        />
                    </Grid2>
                    <Grid2 size={6} sx={{verticalAlign: 'top', mt: 0, pt: 0}}>
                        <FileListView listOfFiles={files} />
                    </Grid2>
                </Grid2>

                <Box sx={{mt: 2, display: 'flex', flex: 1, justifyContent: 'right'}}>
                <Button variant="contained" sx={{width: '50%'}} onClick={submitData}>Submit</Button>
                </Box>
            </Stack>

            <Snackbar
                anchorOrigin={{vertical: 'top', horizontal: 'center'}}
                open={open}
                autoHideDuration={6000}
                onClose={handleClose}
                message="Files uploaded, it will take a few minutes to process."
                action={action}
            />
        </Container>
    )
}

export default FileUpload;



================================================================
File: web/ui/src/pages/Search.tsx
================================================================
// Copyright 2024 Google, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import React from 'react';
import {Snackbar, SnackbarCloseReason, Button, IconButton} from "@mui/material";
import {useState} from "react";
import {MediaResult} from "../shared/model";
import SearchBar from "../components/SearchBar";
import MediaResults from "../components/MediaResults";
import CloseIcon from '@mui/icons-material/Close';

const Search = () => {
    const [results, setResults] = useState<Array<MediaResult>>([]);
    const [message, setMessage] = useState<string>(null!);
    const [open, setOpen] = useState<boolean>(false);

    const handleClose = (
        _: React.SyntheticEvent | Event,
        reason?: SnackbarCloseReason,
    ) => {
        if (reason === 'clickaway') {
            return;
        }
        setOpen(false);
    };

    const action = (
        <React.Fragment>
            <Button color="secondary" size="small" onClick={handleClose}>
                Close
            </Button>
            <IconButton
                size="small"
                aria-label="close"
                color="inherit"
                onClick={handleClose}
            >
                <CloseIcon fontSize="small" />
            </IconButton>
        </React.Fragment>
    );

    return (
        <>
            <SearchBar setMessage={setMessage} setOpen={setOpen} setResults={setResults}/>
            <MediaResults results={results}/>
            <Snackbar
                anchorOrigin={{vertical: 'top', horizontal: 'center'}}
                open={open}
                autoHideDuration={6000}
                onClose={handleClose}
                message={message}
                action={action}
            />
        </>
    );
};

export default Search;


================================================================
File: web/ui/src/shared/model.ts
================================================================
// Copyright 2024 Google, LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

export interface CastMember {
    actor_name: string;
    character_name: string;
}

export interface Scene {
    sequence: number;
    start: string;
    end: string;
    script: string;
}

export interface MediaResult {
    id: string;
    create_date: Date;
    title: string;
    category: string;
    summary: string;
    media_url: string;
    length_in_seconds: number;
    director: string;
    release_year: number;
    genre: string;
    rating: string;
    cast: CastMember[];
    scenes: Scene[];
}


================================================================
File: web/ui/src/vite-env.d.ts
================================================================
/// <reference types="vite/client" />


================================================================
File: web/ui/tsconfig.app.json
================================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": [
    "src"
  ]
}


================================================================
File: web/ui/tsconfig.json
================================================================
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ]
}


================================================================
File: web/ui/tsconfig.node.json
================================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": [
      "ES2023"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": [
    "vite.config.mts"
  ]
}


================================================================
File: web/ui/vite.config.mts
================================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    host: true, // This makes the server listen on all network interfaces
    port: 5173, // You can explicitly set the port here if you want
    // Add this proxy configuration
    proxy: {
      // Proxy requests from /api to the backend server
      '/api': {
        target: 'http://localhost:8080', // The Go backend server
        changeOrigin: true, // Needed for virtual hosted sites
        secure: false,      // If you are not using https
      },
    },
  },
  // build: {
  //   outDir: 'dist',
  //   reportCompressedSize: true,
  //   commonjsOptions: {
  //     transformMixedEsModules: true,
  //   },
  // },
})


