#!/bin/bash

# ==============================================================================
# aggregate_source.sh
#
# Description:
#   This script recursively finds all files in a Git repository that are not
#   excluded by the .gitignore file. It then identifies which of those files
#   are text-based (source code) and aggregates their contents into a single
#   master file. It also creates lists of which files were included and which
#   were skipped (because they were binary).
#
# Usage:
#   Place this script in your project's root directory and run:
#   ./aggregate_source.sh
#
# Requirements:
#   - Must be run from within a Git repository.
#   - The 'git' command must be installed and in the system's PATH.
#
# ==============================================================================

# --- Configuration ---
# The names of the files that will be generated by this script.
MASTER_FILE="master_source_code.txt"
INCLUDED_FILES_LIST="included_files.log"
EXCLUDED_FILES_LIST="skipped_binary_files.log" # Renamed for clarity
SEPARATOR="================================================================"

# --- Prerequisite Checks ---
# Check if this is a Git repository.
if [ ! -d .git ]; then
    echo "Error: This script must be run from the root of a Git repository." >&2
    exit 1
fi

# Warn if no .gitignore file is found.
if [ ! -f .gitignore ]; then
    echo "Warning: No .gitignore file found. All files will be considered."
fi

# --- Initialization ---
# Clean up any files from a previous run to start fresh.
echo "Initializing..."
rm -f "$MASTER_FILE" "$INCLUDED_FILES_LIST" "$EXCLUDED_FILES_LIST"
echo "Old output files removed."
echo

# --- Main Processing Loop ---
# Use 'git ls-files' to get a list of all files not ignored by .gitignore.
# --cached: Shows tracked files.
# --others: Shows untracked files.
# --exclude-standard: Respects .gitignore, .git/info/exclude, and global config.
# The 'while' loop reads each file path found.
git ls-files --cached --others --exclude-standard | while IFS= read -r filepath; do

    # Exclude this script itself and its output files.
    if [[ "$filepath" == "$MASTER_FILE" || \
          "$filepath" == "$INCLUDED_FILES_LIST" || \
          "$filepath" == "$EXCLUDED_FILES_LIST" || \
          "$filepath" == "aggregate_source.sh" ]]; then
        continue
    fi

    # Use the 'file' command to determine the MIME type of the file.
    # This check ensures we only include text files, even if a binary
    # file is not in the .gitignore.
    if [[ $(file --brief --mime-type "$filepath") == text/* ]]; then
        # This is a text file, so we process it.
        echo "Including: $filepath"

        # Append the header for this file to the master file.
        echo "$SEPARATOR" >> "$MASTER_FILE"
        echo "File: $filepath" >> "$MASTER_FILE"
        echo "$SEPARATOR" >> "$MASTER_FILE"
        
        # Append the actual content of the file.
        # Add a newline at the end for clean separation.
        cat "$filepath" >> "$MASTER_FILE"
        echo "" >> "$MASTER_FILE"
        echo "" >> "$MASTER_FILE"

        # Log the file path to the list of included files.
        echo "$filepath" >> "$INCLUDED_FILES_LIST"
    else
        # This is a binary or non-text file, so we skip it.
        echo "Skipping (binary): $filepath"

        # Log the file path to the list of excluded files.
        echo "$filepath" >> "$EXCLUDED_FILES_LIST"
    fi
done

# --- Finalization ---
echo
echo "-------------------------------------------------"
echo "Script finished!"
echo
echo "Aggregated source code is in: $MASTER_FILE"
echo "List of included files is in:   $INCLUDED_FILES_LIST"
echo "List of skipped binary files:   $EXCLUDED_FILES_LIST"
echo "-------------------------------------------------"
